{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/Butterfly/source/js/baidupush.js","path":"js/baidupush.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/activate-power-mode.js","path":"js/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/nightshift.js","path":"js/nightshift.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/runtimeshow.js","path":"js/runtimeshow.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/comment_bg.png","path":"img/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/uploads/white.jpg","path":"uploads/white.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/uploads/background1.jpg","path":"uploads/background1.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/uploads/background2.jpg","path":"uploads/background2.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/uploads/background3.jpg","path":"uploads/background3.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9c562b973c045346fecc9065ecd58fe7a17a41a3","modified":1574439672462},{"_id":"themes/Butterfly/README.md","hash":"50a67fde804586d0f8f103cec9b7a4e325574d0e","modified":1572366931436},{"_id":"themes/Butterfly/_config.yml","hash":"1473c0d6997c2e303b00e31a47ba41b978d60182","modified":1572876896553},{"_id":"themes/Butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1572366931435},{"_id":"themes/Butterfly/package.json","hash":"5a1b91a5ff7ca0bbcdd9f18d1bab6b4e5a670240","modified":1572366931453},{"_id":"source/_data/link.yml","hash":"3d2b8e00b2c5c9190d043cf3b2eceb7b8eb6c2e3","modified":1572876719524},{"_id":"source/about/index.md","hash":"3a0d44292311717d3b387af98e2784594ec1494e","modified":1572878095971},{"_id":"source/_drafts/title.md","hash":"42fca402e7e575e89b1df9d05b795b7d9edda2f9","modified":1572109982969},{"_id":"source/_posts/Github 搜索技巧.md","hash":"388fb30c1d96784cc136edab2564d8f66caca245","modified":1574338771310},{"_id":"source/_posts/.DS_Store","hash":"991a47df7055f9c234eeb71664dee554ce3127e9","modified":1574439707479},{"_id":"source/404/index.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1572166431230},{"_id":"source/_posts/Docker-基础命令.md","hash":"da08871618dab1dfe85d9683a28ddb34f2b2a3af","modified":1574439995077},{"_id":"source/_posts/Mac 入门配置.md","hash":"f02d57c59de8a58888d4e3e7e4b82fe7181f6e88","modified":1574324241373},{"_id":"source/_posts/Hexo 博客搭建.md","hash":"184669ccbb3522dbf0ab9429a27e69532a9f4592","modified":1574174495484},{"_id":"source/_posts/Pine Script 学习笔记.md","hash":"373321d82b48c547cac90c4ef979e2f7cd221ae8","modified":1572875893237},{"_id":"source/_posts/Pine Script 学习笔记(二).md","hash":"355d528eacd2c6d30e5523a90eeb7aaab23e962e","modified":1572875925306},{"_id":"source/_posts/git cheetsheet.md","hash":"b4bcd0b9881b5afb88e5f6142c2c04e48097e134","modified":1574171527583},{"_id":"source/link/index.md","hash":"bf979c24c120a4e3c0dcb644466d4ea5474f3a42","modified":1572877244732},{"_id":"source/categories/index.md","hash":"ed3883be7c2df4f774313384306a08b0c3a743b2","modified":1572460145266},{"_id":"source/archives/index.md","hash":"eed735f68bf640948f22600f185297e0fd4c4f5b","modified":1572460127584},{"_id":"source/_posts/php学习笔记.md","hash":"4a446d124acb035f6672e15304b77897ee767f1d","modified":1574171566562},{"_id":"themes/Butterfly/languages/en.yml","hash":"0095bec5d65cd3df7569262b3e51ca3050c56eb1","modified":1572373810611},{"_id":"source/tags/index.md","hash":"cbd271431048a6e5f3e4db9cd585d0c8dd3ee7c2","modified":1572460170133},{"_id":"themes/Butterfly/languages/default.yml","hash":"7db6e129c56c4fcc531826bd9518deed4c969372","modified":1572373815477},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"21eec327046e1f5cc343905924e5196d52c2b777","modified":1572366931438},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"d2871768a8aece5242c375c91e986cd46a5b29c9","modified":1572374556925},{"_id":"themes/Butterfly/layout/archive.pug","hash":"2a8b01d66fb0c1f4eed0cec831e356acfde1b4e7","modified":1572366931438},{"_id":"themes/Butterfly/layout/category.pug","hash":"42b9f24c6d8d7832338f67536456933126daf8e0","modified":1572366931439},{"_id":"themes/Butterfly/layout/flink.pug","hash":"8a3fe4ca770b8b66583e7ae102bbc9b41f7e5565","modified":1572366931439},{"_id":"themes/Butterfly/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1572366931439},{"_id":"themes/Butterfly/layout/post.pug","hash":"04f6974b90689f2ee85654e831aa4acaebcf54af","modified":1572366931452},{"_id":"themes/Butterfly/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1572366931453},{"_id":"themes/Butterfly/layout/tag.pug","hash":"dfac75e6a8cb8ed3abfeb12f40944cb8e42f1328","modified":1572366931452},{"_id":"themes/Butterfly/scripts/list_archives.js","hash":"741bccdb700e5ffb77e6a8c6d62fc51651581168","modified":1572366931453},{"_id":"themes/Butterfly/scripts/note.js","hash":"03d608278de2dc9c6b2af69e8d36c77c0272e2bf","modified":1572366931454},{"_id":"themes/Butterfly/layout/page.pug","hash":"dc2c6fcaf21d6e6036c6ada5f8147853305886f6","modified":1572366931452},{"_id":"themes/Butterfly/layout/index.pug","hash":"a027cfd8f61e29a623ed8ba977032f165812d9b0","modified":1572366931452},{"_id":"themes/Butterfly/scripts/post-lazyload.js","hash":"01f1582e4e1b7f08ed1d128ee2811c6d980e3aed","modified":1572366931454},{"_id":"themes/Butterfly/scripts/random_cover.js","hash":"81d1d2ebc4b5022d701182a98383969715f7ca53","modified":1572366931454},{"_id":"themes/Butterfly/scripts/related_post.js","hash":"84025c94818fd85ff538faf49a5b8a7691f07407","modified":1572366931454},{"_id":"themes/Butterfly/scripts/replace-config.js","hash":"4acb5a4519e1b5a29c23c83d1f70c1e298931e30","modified":1572366931455},{"_id":"themes/Butterfly/scripts/url_check.js","hash":"f3b533517dc5fc6d49dd34103f1ad91dcd6d0e87","modified":1572366931455},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"4cccdf1e82b5de0c7a5cabe371d7e1dfed2b3107","modified":1572366931439},{"_id":"themes/Butterfly/layout/includes/aside.pug","hash":"6e421ec7964024f1e3ad10cb00d3808dc33c6c72","modified":1572366931440},{"_id":"themes/Butterfly/layout/includes/config.pug","hash":"eb2725737f5347a1f35f3914418e70abc0125e1e","modified":1572366931442},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"5d3ecf1fb7b55e991980738f730973c7c9952189","modified":1572366931442},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"25448119f2058c38b41f104d255ff2f78c0da5da","modified":1572366931443},{"_id":"themes/Butterfly/layout/includes/header.pug","hash":"f12c7f15ab6e535abf069ba8129d161b63203c79","modified":1572366931443},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"b11b16d1370df98dd6431a458fb9985239a37dc0","modified":1572366931444},{"_id":"themes/Butterfly/layout/includes/menu_item.pug","hash":"e2b3edb8f0cd0b6bb135c823f037f16c03b801e7","modified":1572366931444},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar.pug","hash":"2be6f988a70bb03657c686b9773f84aaae41f29c","modified":1572366931446},{"_id":"themes/Butterfly/layout/includes/nav.pug","hash":"f577f487ceb7b2651947b2b5f1afb561c11dac2a","modified":1572366931446},{"_id":"themes/Butterfly/layout/includes/page_tag.pug","hash":"77806405a67ce97801f5b74adaa4c62f96b05572","modified":1572366931446},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"65ba1d1d59ccd57e2a71555f1ba22bcd4d090360","modified":1572366931446},{"_id":"themes/Butterfly/layout/includes/reward.pug","hash":"b65ae4f41b9d34156485d61a3a47aa1e4d043828","modified":1572366931447},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"4ce08170a87cb0286c97b5b9b3ea649295ff665e","modified":1572366931448},{"_id":"themes/Butterfly/layout/includes/recent-posts.pug","hash":"1872caefec06ea9f23765f644ecd44d248ef9eaa","modified":1572366931447},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"b076fa6fd08dbcfd743a4f5982f89ad84791573a","modified":1572366931450},{"_id":"themes/Butterfly/source/js/baidupush.js","hash":"276a58782b574ec42bf434e4e8bea623437634d4","modified":1572366931470},{"_id":"themes/Butterfly/source/js/activate-power-mode.js","hash":"e7ee1a178d613ba6293e4b622ea1b6ae16b0da45","modified":1572366931470},{"_id":"themes/Butterfly/source/css/index.styl","hash":"8ab00778fb1f9d688b8bfee50b98273f85769a09","modified":1572366931465},{"_id":"themes/Butterfly/source/css/var.styl","hash":"6c67b8c4dcdb74da54acb5eaa9ce67f1db3f3a4a","modified":1572366931465},{"_id":"themes/Butterfly/source/js/nightshift.js","hash":"5c5d7f143b6e91dc631058fedc1831f982726464","modified":1572366931471},{"_id":"themes/Butterfly/source/js/main.js","hash":"18f0aeb832c0792da4e394e2c732348fa6997665","modified":1572366931471},{"_id":"themes/Butterfly/source/js/runtimeshow.js","hash":"949f87716cc331268f8b9c2f6d523ae6870755bc","modified":1572366931471},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"33acda08bd1654622f532b159506939dc975fc7c","modified":1572366931475},{"_id":"themes/Butterfly/source/js/utils.js","hash":"89b8b6d0f629d85bd60025a92bb43661f5ee9f47","modified":1572366931475},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1572366931466},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"8cb144815552af8ca374dda8a11c14f6223cea29","modified":1572366931465},{"_id":"themes/Butterfly/source/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1572366931468},{"_id":"themes/Butterfly/source/img/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1572366931467},{"_id":"themes/Butterfly/source/img/icp.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1572366931469},{"_id":"themes/Butterfly/source/uploads/.DS_Store","hash":"f73ace717a842f8663d8cb503a82ad8fdbdee793","modified":1572454359192},{"_id":"themes/Butterfly/source/uploads/avatar.jpg","hash":"0d59e285ab5780f148306be5276f776bf41aee3e","modified":1572113355244},{"_id":"themes/Butterfly/source/uploads/white.jpg","hash":"2d91406f1cf8e01d78eaaba87cf5e895c94b8ee0","modified":1572438240126},{"_id":"themes/Butterfly/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572366931443},{"_id":"themes/Butterfly/source/img/alipay.jpg","hash":"eb592441a60c377369f02f094dfd7f6dc0117ff3","modified":1572366931466},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1572366931468},{"_id":"themes/Butterfly/source/img/wechat.jpg","hash":"ff2a3d99f34d9c6495d9fdf1997f707af0abf33b","modified":1572366931469},{"_id":"themes/Butterfly/layout/includes/comments/disqus.pug","hash":"37357152952f1d8f7f9eac390baaae29647e8b69","modified":1572366931440},{"_id":"themes/Butterfly/layout/includes/comments/gitment.pug","hash":"0b7cd8b0b114876238ca022abda4c1fcdfaee12f","modified":1572366931440},{"_id":"themes/Butterfly/layout/includes/comments/gitalk.pug","hash":"fde38da051e2e46bafd74ccf8039322ee7cb072c","modified":1572366931440},{"_id":"themes/Butterfly/layout/includes/comments/index.pug","hash":"2f1254d34c1b7f543f5c05fb2cb113a49e5bef81","modified":1572366931440},{"_id":"themes/Butterfly/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1572366931441},{"_id":"themes/Butterfly/layout/includes/comments/valine.pug","hash":"6fd7b8e80fb59d64824cc815e6c9fe12fc0fe375","modified":1572366931442},{"_id":"themes/Butterfly/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1572366931443},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"9909860d04248979313bed53e4979cee1acc99f8","modified":1572366931446},{"_id":"themes/Butterfly/layout/includes/mixins/UI.pug","hash":"a82e3e44942f845e7cf254fa085acd3f0d13a715","modified":1572366931445},{"_id":"themes/Butterfly/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1572366931448},{"_id":"themes/Butterfly/layout/includes/share/addtoany.pug","hash":"905b48d3ff440c1ce9e19fb6b32d0f5bd5e88ab7","modified":1572366931450},{"_id":"themes/Butterfly/layout/includes/search/local-search.pug","hash":"bc3d9694f3f3f3d4d95e8ccadbf6e27a61093c6d","modified":1572366931448},{"_id":"themes/Butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1572366931448},{"_id":"themes/Butterfly/layout/includes/share/share-js.pug","hash":"55a65c2f5bb7deff2d61f0ad06c535b916baf6b1","modified":1572366931450},{"_id":"themes/Butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1572366931450},{"_id":"themes/Butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1572366931449},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-nest.pug","hash":"d807867bd75271c39b191c36e440fd4ab4c86723","modified":1572366931450},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"2beb85258ec0f065d46eac2e5634274aef703503","modified":1572366931450},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"953ac96a913e8737bba391bae35ed5a2906c4ccf","modified":1572366931450},{"_id":"themes/Butterfly/layout/includes/third-party/katex.pug","hash":"9a95ce685cf9e23f2e2c069c0d919185a8837ea7","modified":1572366931451},{"_id":"themes/Butterfly/layout/includes/third-party/mathjax.pug","hash":"33b350f9826795cd59d9e277a24accc8a9bc9076","modified":1572366931451},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"531fde2c1409d638989615e906dea6ac1dd09fab","modified":1572366931451},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"b216d67e5b6148b3855015d971a14f22e5d30ef1","modified":1572366931451},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"502e6750e5be807acea5499319eb29ac92f48549","modified":1572366931452},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"8ebd3686e9377cc7cc0899ad991eb3dd061aca06","modified":1572366931452},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"78b40c166a2e17790ff0c6a1ff1ea4517dd378b2","modified":1572366931452},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"75cce3123bcfc78ba487efd8a82d2fcecae98f7e","modified":1572366931456},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"ddd750cc1655980b4cf30393c84c34101f7f1e0d","modified":1572366931451},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"2ca228a61fba9046e8bf327ac340c50757b4a7d1","modified":1572366931451},{"_id":"themes/Butterfly/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1572366931456},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"e8d1e0d9f0ebef428aca01863b93b449a1325294","modified":1572366931456},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1572366931457},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"1d151a92ea11c28145651cb7610b6379384f31ae","modified":1572366931458},{"_id":"themes/Butterfly/source/css/_layout/category.styl","hash":"f4901636997913ccd8beafc14d9c5eb0d0bedf16","modified":1572366931458},{"_id":"themes/Butterfly/source/css/_layout/comments.styl","hash":"98f19c9c01e7111d76584a1e2bacff539a2aa936","modified":1572366931458},{"_id":"themes/Butterfly/source/css/_layout/flink.styl","hash":"c9900ac40dad775314b26dac0cc061f634563f75","modified":1572366931458},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"66da15c79d7ff4f511aa2ba0e558c44fc333faad","modified":1572366931458},{"_id":"themes/Butterfly/source/css/_layout/mobile-sidebar.styl","hash":"e7faf67671b58705b5f587e435d98f00fd86ce06","modified":1572366931459},{"_id":"themes/Butterfly/source/css/_layout/nightshift.styl","hash":"4be0b2b4380f5dca260f526e38f04f4ef392d89c","modified":1572366931460},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"86aa52a3c99cf3f77b5ce0db4de2758dcdc01db3","modified":1572366931459},{"_id":"themes/Butterfly/source/css/_layout/note.styl","hash":"e897f0df4e0adb4f13f2633cb36c441c3ea31ee2","modified":1572366931461},{"_id":"themes/Butterfly/source/css/_layout/page.styl","hash":"4bffb13ffa8cf93fb8eb7e1f291db64153f922bd","modified":1572366931461},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"a67de37fbf891aa943a6c58d65a71febe107e592","modified":1572366931461},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"cbd9f79941482d137be4e8675ea75494d7fa5a92","modified":1572366931461},{"_id":"themes/Butterfly/source/css/_layout/readmode.styl","hash":"56a91116ae86ec0a90957481a7dbf595c80060c8","modified":1572366931461},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"12d2dddd3dd330f5aaebd544c08c3669bab8ccc2","modified":1572366931462},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"b6b58c836118d02d514cf901b49d31d9f0e895b5","modified":1572366931463},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"e8f077f3cee35d34a92ae81bf1869ea658908dad","modified":1572366931463},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"96af1d243733b616adaa468690e135b3c282b07e","modified":1572366931463},{"_id":"themes/Butterfly/source/css/_layout/z-other.styl","hash":"55fdd457e373c3bc88b30214be4dfe3b2a28a3a1","modified":1572366931464},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"534e5641e3efe2452db95cc25ec8da0111ceadcf","modified":1572366931464},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1572366931464},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"c4f3ac6eafc84883e921be8966e86ae7e085681d","modified":1572366931464},{"_id":"themes/Butterfly/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1572366931465},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1572366931465},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"bf5d87cb632176020a7a952ead4d285da91a5a91","modified":1572366931471},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"84bed9c4e4a4d0ec5c6615e7bfdf81e96f6e76d1","modified":1572366931472},{"_id":"themes/Butterfly/source/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1572366931472},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1572366931472},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","hash":"5f66d8b7a436e922b08c184720556ddd1e100f6a","modified":1572366931473},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1572366931473},{"_id":"themes/Butterfly/source/js/third-party/piao.js","hash":"df687981381345c735c5db5e4ff16bfc256d2a39","modified":1572366931475},{"_id":"themes/Butterfly/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1572366931473},{"_id":"themes/Butterfly/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1572366931474},{"_id":"themes/Butterfly/source/uploads/background1.jpg","hash":"8eb3b5bc32d9aac8a7908d2fc030ff1ccaa391d2","modified":1572372185305},{"_id":"themes/Butterfly/source/img/avatar.png","hash":"dd1a6f2463665a2d3b89329f0fa2cde5ee823a2a","modified":1572366931467},{"_id":"themes/Butterfly/source/uploads/background2.jpg","hash":"926ce584214b8d93d66cc3c327960a5a21209c9c","modified":1572372184716},{"_id":"themes/Butterfly/source/uploads/background3.jpg","hash":"6a94239e9f4a42c140c80b2e93da8f2ecee326d5","modified":1572372187627},{"_id":"public/search.xml","hash":"d0773c8a9258ccdce4bfaaf9051cbf410d0f8715","modified":1574440021060},{"_id":"public/about/index.html","hash":"9342b505faad531200e45f3f7505786062f0a2fe","modified":1574440021060},{"_id":"public/404/index.html","hash":"4a850c5c032ba9b058c3bd1df22a29b0598c1d57","modified":1574440021060},{"_id":"public/link/index.html","hash":"39b4dfdbb44b491e1af96eebbdcf771993f5ab46","modified":1574440021060},{"_id":"public/categories/index.html","hash":"070a4658b3d97c3929a9c2e29ac7a37e515fbc29","modified":1574440021060},{"_id":"public/archives/index.html","hash":"3ca0baa97b63b13eabbaeb2158553f14f674bf1f","modified":1574440021060},{"_id":"public/tags/index.html","hash":"512197cbd0cdf43f5e0045bb9360658e8a61d044","modified":1574440021060},{"_id":"public/2019/11/21/Docker-基础命令/index.html","hash":"72cd1b6ab10a27af1521c79fd3269c7e56b589ed","modified":1574440021060},{"_id":"public/2019/11/21/Github 搜索技巧/index.html","hash":"fa9c125468b146d8b660b1cb3dc5ae902ff836ee","modified":1574440021060},{"_id":"public/2019/11/19/php学习笔记/index.html","hash":"dfb377a47b6bce96c2f2b2fe0200ff3c7b9ddf3a","modified":1574440021060},{"_id":"public/2019/11/14/git cheetsheet/index.html","hash":"d9a30946dd1f96355e9b515a976044c8bd81d2ba","modified":1574440021060},{"_id":"public/2019/11/04/Pine Script 学习笔记(二)/index.html","hash":"7992bed57b4050d401aa5119bae8843417c8bc83","modified":1574440021060},{"_id":"public/2019/10/31/Pine Script 学习笔记/index.html","hash":"d9ad9d0915281210ff5fa996fe1fdfb5a5882704","modified":1574440021060},{"_id":"public/2019/10/27/Hexo 博客搭建/index.html","hash":"3484ede5aac2e4fd8ff9efdf572415a372fb483c","modified":1574440021060},{"_id":"public/2019/09/01/Mac 入门配置/index.html","hash":"58ef3d373c153365ddf17f71c269c98d41ad1249","modified":1574440021060},{"_id":"public/archives/2019/index.html","hash":"374738fa9ceb03ea53b774a90dea58847d15a2c3","modified":1574440021060},{"_id":"public/archives/2019/09/index.html","hash":"11179ef03c42b81e2ca048fd94118e40849ca370","modified":1574440021060},{"_id":"public/archives/2019/10/index.html","hash":"af7706be7b6ce8914dcd5f467d42d6c41d290785","modified":1574440021060},{"_id":"public/archives/2019/11/index.html","hash":"b2f21d6264f9f6b399a6e73bde543310e85b282e","modified":1574440021060},{"_id":"public/categories/基础技能/index.html","hash":"cbde8b84af5c301fb71734bd7f0c7bb8d343b4fa","modified":1574440021060},{"_id":"public/categories/量化/index.html","hash":"ddccfeb79d5620b27721d5cc1153846179f31824","modified":1574440021060},{"_id":"public/categories/电脑基本配置/index.html","hash":"9f4b2ec17dac950f18d6e3833044e85c06effa25","modified":1574440021060},{"_id":"public/categories/php/index.html","hash":"8951da20f6c6a7d349313ed68c982e64ff0d92e2","modified":1574440021060},{"_id":"public/categories/量化/Pine/index.html","hash":"5ab4a487f5d9831a4b97778bea529a9b489044e7","modified":1574440021060},{"_id":"public/index.html","hash":"dd5c3e18d64f0fe6bd6d5238e5deb957821c9d60","modified":1574440021060},{"_id":"public/tags/Github/index.html","hash":"f5132f1dccc653141251e633914a3fa8eeaa11c0","modified":1574440021060},{"_id":"public/tags/日常学习笔记-Docker/index.html","hash":"d85c6a50095fe6929b86b4563a86d8743482c23c","modified":1574440021060},{"_id":"public/tags/Pine/index.html","hash":"86c4615edeb7c5b33bf07345d75fd1b860922d0d","modified":1574440021060},{"_id":"public/tags/TradingView/index.html","hash":"3eb9d43ca1cf6a3d1b559de67e58cdc382440c87","modified":1574440021060},{"_id":"public/tags/量化/index.html","hash":"3cabfb437f47247c34918e3e26912a9007717fe7","modified":1574440021060},{"_id":"public/tags/日常学习笔记/index.html","hash":"185db4038b4dc000d4e8fb435abc34fae0768a25","modified":1574440021060},{"_id":"public/tags/git/index.html","hash":"be869d5ed680aa0ce5dfb307a5dfbe8ed5bfdd4e","modified":1574440021060},{"_id":"public/tags/Hexo/index.html","hash":"efdf1d32d967044377913ab92c03e8969121c68e","modified":1574440021060},{"_id":"public/tags/php/index.html","hash":"c98623845f900924ff4612fd958f732d680aec61","modified":1574440021060},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1574440021060},{"_id":"public/img/404.jpg","hash":"8cb144815552af8ca374dda8a11c14f6223cea29","modified":1574440021060},{"_id":"public/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1574440021060},{"_id":"public/img/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1574440021060},{"_id":"public/img/icp.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1574440021060},{"_id":"public/uploads/avatar.jpg","hash":"0d59e285ab5780f148306be5276f776bf41aee3e","modified":1574440021060},{"_id":"public/uploads/white.jpg","hash":"2d91406f1cf8e01d78eaaba87cf5e895c94b8ee0","modified":1574440021060},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1574440021060},{"_id":"public/img/alipay.jpg","hash":"eb592441a60c377369f02f094dfd7f6dc0117ff3","modified":1574440021060},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1574440021060},{"_id":"public/img/wechat.jpg","hash":"ff2a3d99f34d9c6495d9fdf1997f707af0abf33b","modified":1574440021060},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1574440021060},{"_id":"public/js/activate-power-mode.js","hash":"e7ee1a178d613ba6293e4b622ea1b6ae16b0da45","modified":1574440021060},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1574440021060},{"_id":"public/js/nightshift.js","hash":"5c5d7f143b6e91dc631058fedc1831f982726464","modified":1574440021060},{"_id":"public/js/runtimeshow.js","hash":"949f87716cc331268f8b9c2f6d523ae6870755bc","modified":1574440021060},{"_id":"public/js/utils.js","hash":"89b8b6d0f629d85bd60025a92bb43661f5ee9f47","modified":1574440021060},{"_id":"public/js/baidupush.js","hash":"276a58782b574ec42bf434e4e8bea623437634d4","modified":1574440021060},{"_id":"public/js/search/algolia.js","hash":"bf5d87cb632176020a7a952ead4d285da91a5a91","modified":1574440021060},{"_id":"public/js/search/local-search.js","hash":"84bed9c4e4a4d0ec5c6615e7bfdf81e96f6e76d1","modified":1574440021060},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1574440021060},{"_id":"public/js/third-party/canvas-nest.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1574440021060},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"5f66d8b7a436e922b08c184720556ddd1e100f6a","modified":1574440021060},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1574440021060},{"_id":"public/js/third-party/piao.js","hash":"df687981381345c735c5db5e4ff16bfc256d2a39","modified":1574440021060},{"_id":"public/js/main.js","hash":"18f0aeb832c0792da4e394e2c732348fa6997665","modified":1574440021060},{"_id":"public/js/tw_cn.js","hash":"33acda08bd1654622f532b159506939dc975fc7c","modified":1574440021060},{"_id":"public/css/index.css","hash":"254ee6fc803133cc1196360ecc53988641a2c322","modified":1574440021060},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1574440021060},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1574440021060},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1574440021060},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1574440021060},{"_id":"public/img/avatar.png","hash":"dd1a6f2463665a2d3b89329f0fa2cde5ee823a2a","modified":1574440021060},{"_id":"public/uploads/background1.jpg","hash":"8eb3b5bc32d9aac8a7908d2fc030ff1ccaa391d2","modified":1574440021060},{"_id":"public/uploads/background2.jpg","hash":"926ce584214b8d93d66cc3c327960a5a21209c9c","modified":1574440021060},{"_id":"public/uploads/background3.jpg","hash":"6a94239e9f4a42c140c80b2e93da8f2ecee326d5","modified":1574440021060}],"Category":[{"name":"基础技能","_id":"ck3acxtjl0006pw8me94604s8"},{"name":"量化","_id":"ck3acxtk1000kpw8me5te8e4x"},{"name":"电脑基本配置","_id":"ck3acxtk4000qpw8m4fxwbpig"},{"name":"php","_id":"ck3acxtk6000upw8mbulhgh9s"},{"name":"Pine","parent":"ck3acxtk1000kpw8me5te8e4x","_id":"ck3acxtk80012pw8m44zmfmkb"}],"Data":[{"_id":"link","data":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}],"Page":[{"title":"关于","date":"2019-10-26T17:38:15.000Z","top_img":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104222717.png","_content":"\n## 一个努力学习的普通人\n梦想成为的人如上，不知道有几个人能看懂","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-10-27 01:38:15\ntop_img: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104222717.png\n---\n\n## 一个努力学习的普通人\n梦想成为的人如上，不知道有几个人能看懂","updated":"2019-11-04T14:34:55.971Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck3acxtje0001pw8megjf9rv0","content":"<h2 id=\"一个努力学习的普通人\"><a href=\"#一个努力学习的普通人\" class=\"headerlink\" title=\"一个努力学习的普通人\"></a>一个努力学习的普通人</h2><p>梦想成为的人如上，不知道有几个人能看懂</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031012321.png","excerpt":"","more":"<h2 id=\"一个努力学习的普通人\"><a href=\"#一个努力学习的普通人\" class=\"headerlink\" title=\"一个努力学习的普通人\"></a>一个努力学习的普通人</h2><p>梦想成为的人如上，不知道有几个人能看懂</p>\n"},{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404/index.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2019-11-07T12:36:24.798Z","updated":"2019-10-27T08:53:51.230Z","path":"404/index.html","title":"","comments":1,"layout":"page","_id":"ck3acxtjh0003pw8m43lh7wfq","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031012321.png","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"友情链接","comments":1,"date":"2019-11-04T14:03:28.000Z","type":"link","description":null,"top_img":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221837.png","_content":"\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ncomments: true\ndate: 2019-11-04 22:03:28\ntype: \"link\"\ndescription:\ntop_img: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221837.png\n---\n\n","updated":"2019-11-04T14:20:44.732Z","path":"link/index.html","layout":"page","_id":"ck3acxtjk0005pw8m1bxnfcyd","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031012321.png","excerpt":"","more":""},{"title":"categories","date":"2019-10-26T17:38:06.000Z","type":"categories","top_img":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031022801.jpg","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-10-27 01:38:06\ntype: \"categories\"\ntop_img: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031022801.jpg\n---\n","updated":"2019-10-30T18:29:05.266Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck3acxtjo0009pw8m55fnffk5","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031012321.png","excerpt":"","more":""},{"title":"归档","date":"2019-10-27T08:36:41.000Z","top_img":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031022801.jpg","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2019-10-27 16:36:41\ntop_img: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031022801.jpg\n---\n","updated":"2019-10-30T18:28:47.584Z","path":"archives/index.html","comments":1,"layout":"page","_id":"ck3acxtjr000bpw8m91s64o85","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031012321.png","excerpt":"","more":""},{"title":"tags","date":"2019-10-26T17:09:48.000Z","type":"tags","top_img":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031022814.jpg","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-10-27 01:09:48\ntype: \"tags\"\ntop_img: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031022814.jpg\n---\n","updated":"2019-10-30T18:29:30.133Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck3acxtju000fpw8mf9zveyie","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031012321.png","excerpt":"","more":""}],"Post":[{"title":"title","_content":"","source":"_drafts/title.md","raw":"---\ntitle: title\ntags:\n---\n","slug":"title","published":0,"date":"2019-10-26T17:13:02.968Z","updated":"2019-10-26T17:13:02.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3acxtj90000pw8m25ab4h8t","content":"","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031012321.png","excerpt":"","more":""},{"title":"Github 搜索技巧","comments":0,"date":"2019-11-21T12:12:42.000Z","keywords":null,"description":null,"top_img":null,"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191121201729.png","toc":null,"toc_number":null,"copyright":null,"_content":"\n## 前言\n\n因为最近手头上的东西很多，要最快的在很短的时间内完成一个项目，需要多多参考别人的优秀的代码。很多东西，在github 上都开源了，反复造轮子浪费时间，用好别人东西才是最高效的方法。\n\n<!--more-->\n\n## 瞎逛逛\n\n- [GitHub Trend](https://github.com/trending) 页面总结了每天/每周/每月周期的热门 Repositories 和 Developers，你可以看到在某个周期处于热门状态的开发项目和开发者。\n-  [GitHub Topic](https://github.com/topics) 展示了最新和最流行的讨论主题，在这里你不仅能够看到开发项目，还能看到更多非开发技术的讨论主题，比如 Job、Chrome 浏览器等。\n\n## 搜索技巧\n\n```\nin:name xx //搜索名字中带有\"xx\"的\nin:readme xx //搜索readme中带有\"xx\"的\nin:description xx //搜索描述中带有\"xx\"的\nstars:>1000 //搜索stars>1000的\nforks:>1000 //搜索forks>1000的\npushed:>2019-09-01 //搜索最近更新于2019年9月1日之后的\nlanguage:xx //搜索xx的项目\npushed:>2019-09-01 //2019年9月1日后有更新的\nlanguage:java //用Java编写的项目\nuser:ppsteven forks:>100 //ppsteven用户下forks>100 的项目\n```\n\n## 有影响力的项目\n\n- [free-programming-books](https://github.com/vhf/free-programming-books)：整理了所有和编程相关的免费书籍，同时也有 [中文版项目](https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md)。\n- [github-cheat-sheet](https://github.com/tiimgreen/github-cheat-sheet/)：集合了使用 GitHub 的各种技巧。\n- 后续会逐步更新添加\n\n## 参考\n\n> [掌握 3 个搜索技巧，在 GitHub 上快速找到实用软件资源](https://sspai.com/post/46061)","source":"_posts/Github 搜索技巧.md","raw":"---\ntitle: Github 搜索技巧\ncomments: false\ndate: 2019-11-21 20:12:42\ntags: Github,\ncategories: 基础技能\nkeywords:\ndescription:\ntop_img:\ncover: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191121201729.png\ntoc:\ntoc_number:\ncopyright:\n---\n\n## 前言\n\n因为最近手头上的东西很多，要最快的在很短的时间内完成一个项目，需要多多参考别人的优秀的代码。很多东西，在github 上都开源了，反复造轮子浪费时间，用好别人东西才是最高效的方法。\n\n<!--more-->\n\n## 瞎逛逛\n\n- [GitHub Trend](https://github.com/trending) 页面总结了每天/每周/每月周期的热门 Repositories 和 Developers，你可以看到在某个周期处于热门状态的开发项目和开发者。\n-  [GitHub Topic](https://github.com/topics) 展示了最新和最流行的讨论主题，在这里你不仅能够看到开发项目，还能看到更多非开发技术的讨论主题，比如 Job、Chrome 浏览器等。\n\n## 搜索技巧\n\n```\nin:name xx //搜索名字中带有\"xx\"的\nin:readme xx //搜索readme中带有\"xx\"的\nin:description xx //搜索描述中带有\"xx\"的\nstars:>1000 //搜索stars>1000的\nforks:>1000 //搜索forks>1000的\npushed:>2019-09-01 //搜索最近更新于2019年9月1日之后的\nlanguage:xx //搜索xx的项目\npushed:>2019-09-01 //2019年9月1日后有更新的\nlanguage:java //用Java编写的项目\nuser:ppsteven forks:>100 //ppsteven用户下forks>100 的项目\n```\n\n## 有影响力的项目\n\n- [free-programming-books](https://github.com/vhf/free-programming-books)：整理了所有和编程相关的免费书籍，同时也有 [中文版项目](https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md)。\n- [github-cheat-sheet](https://github.com/tiimgreen/github-cheat-sheet/)：集合了使用 GitHub 的各种技巧。\n- 后续会逐步更新添加\n\n## 参考\n\n> [掌握 3 个搜索技巧，在 GitHub 上快速找到实用软件资源](https://sspai.com/post/46061)","slug":"Github 搜索技巧","published":1,"updated":"2019-11-21T12:19:31.310Z","layout":"post","photos":[],"link":"","_id":"ck3acxtjf0002pw8m11j43su3","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为最近手头上的东西很多，要最快的在很短的时间内完成一个项目，需要多多参考别人的优秀的代码。很多东西，在github 上都开源了，反复造轮子浪费时间，用好别人东西才是最高效的方法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"瞎逛逛\"><a href=\"#瞎逛逛\" class=\"headerlink\" title=\"瞎逛逛\"></a>瞎逛逛</h2><ul>\n<li><a href=\"https://github.com/trending\" target=\"_blank\" rel=\"noopener\">GitHub Trend</a> 页面总结了每天/每周/每月周期的热门 Repositories 和 Developers，你可以看到在某个周期处于热门状态的开发项目和开发者。</li>\n<li><a href=\"https://github.com/topics\" target=\"_blank\" rel=\"noopener\">GitHub Topic</a> 展示了最新和最流行的讨论主题，在这里你不仅能够看到开发项目，还能看到更多非开发技术的讨论主题，比如 Job、Chrome 浏览器等。</li>\n</ul>\n<h2 id=\"搜索技巧\"><a href=\"#搜索技巧\" class=\"headerlink\" title=\"搜索技巧\"></a>搜索技巧</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in:name xx //搜索名字中带有&quot;xx&quot;的</span><br><span class=\"line\">in:readme xx //搜索readme中带有&quot;xx&quot;的</span><br><span class=\"line\">in:description xx //搜索描述中带有&quot;xx&quot;的</span><br><span class=\"line\">stars:&gt;1000 //搜索stars&gt;1000的</span><br><span class=\"line\">forks:&gt;1000 //搜索forks&gt;1000的</span><br><span class=\"line\">pushed:&gt;2019-09-01 //搜索最近更新于2019年9月1日之后的</span><br><span class=\"line\">language:xx //搜索xx的项目</span><br><span class=\"line\">pushed:&gt;2019-09-01 //2019年9月1日后有更新的</span><br><span class=\"line\">language:java //用Java编写的项目</span><br><span class=\"line\">user:ppsteven forks:&gt;100 //ppsteven用户下forks&gt;100 的项目</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"有影响力的项目\"><a href=\"#有影响力的项目\" class=\"headerlink\" title=\"有影响力的项目\"></a>有影响力的项目</h2><ul>\n<li><a href=\"https://github.com/vhf/free-programming-books\" target=\"_blank\" rel=\"noopener\">free-programming-books</a>：整理了所有和编程相关的免费书籍，同时也有 <a href=\"https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md\" target=\"_blank\" rel=\"noopener\">中文版项目</a>。</li>\n<li><a href=\"https://github.com/tiimgreen/github-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">github-cheat-sheet</a>：集合了使用 GitHub 的各种技巧。</li>\n<li>后续会逐步更新添加</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://sspai.com/post/46061\" target=\"_blank\" rel=\"noopener\">掌握 3 个搜索技巧，在 GitHub 上快速找到实用软件资源</a></p>\n</blockquote>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为最近手头上的东西很多，要最快的在很短的时间内完成一个项目，需要多多参考别人的优秀的代码。很多东西，在github 上都开源了，反复造轮子浪费时间，用好别人东西才是最高效的方法。</p>","more":"<h2 id=\"瞎逛逛\"><a href=\"#瞎逛逛\" class=\"headerlink\" title=\"瞎逛逛\"></a>瞎逛逛</h2><ul>\n<li><a href=\"https://github.com/trending\" target=\"_blank\" rel=\"noopener\">GitHub Trend</a> 页面总结了每天/每周/每月周期的热门 Repositories 和 Developers，你可以看到在某个周期处于热门状态的开发项目和开发者。</li>\n<li><a href=\"https://github.com/topics\" target=\"_blank\" rel=\"noopener\">GitHub Topic</a> 展示了最新和最流行的讨论主题，在这里你不仅能够看到开发项目，还能看到更多非开发技术的讨论主题，比如 Job、Chrome 浏览器等。</li>\n</ul>\n<h2 id=\"搜索技巧\"><a href=\"#搜索技巧\" class=\"headerlink\" title=\"搜索技巧\"></a>搜索技巧</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in:name xx //搜索名字中带有&quot;xx&quot;的</span><br><span class=\"line\">in:readme xx //搜索readme中带有&quot;xx&quot;的</span><br><span class=\"line\">in:description xx //搜索描述中带有&quot;xx&quot;的</span><br><span class=\"line\">stars:&gt;1000 //搜索stars&gt;1000的</span><br><span class=\"line\">forks:&gt;1000 //搜索forks&gt;1000的</span><br><span class=\"line\">pushed:&gt;2019-09-01 //搜索最近更新于2019年9月1日之后的</span><br><span class=\"line\">language:xx //搜索xx的项目</span><br><span class=\"line\">pushed:&gt;2019-09-01 //2019年9月1日后有更新的</span><br><span class=\"line\">language:java //用Java编写的项目</span><br><span class=\"line\">user:ppsteven forks:&gt;100 //ppsteven用户下forks&gt;100 的项目</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"有影响力的项目\"><a href=\"#有影响力的项目\" class=\"headerlink\" title=\"有影响力的项目\"></a>有影响力的项目</h2><ul>\n<li><a href=\"https://github.com/vhf/free-programming-books\" target=\"_blank\" rel=\"noopener\">free-programming-books</a>：整理了所有和编程相关的免费书籍，同时也有 <a href=\"https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md\" target=\"_blank\" rel=\"noopener\">中文版项目</a>。</li>\n<li><a href=\"https://github.com/tiimgreen/github-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">github-cheat-sheet</a>：集合了使用 GitHub 的各种技巧。</li>\n<li>后续会逐步更新添加</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://sspai.com/post/46061\" target=\"_blank\" rel=\"noopener\">掌握 3 个搜索技巧，在 GitHub 上快速找到实用软件资源</a></p>\n</blockquote>"},{"title":"Docker 基础命令","date":"2019-11-21T12:22:30.000Z","keywords":null,"description":null,"top_img":null,"comments":0,"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191123002607.png","toc":null,"toc_number":null,"copyright":null,"_content":"\n## 前言\n\n最近的工作\n\n- php 学习，设计到LAMP的环境搭建。虽然是Mac上Apache 和 php 都是自带的，但是环境上还是不足，所以要用Docker。DAMP\n- 爬虫ip 池搭建，发现别人造好的轮子上需要如redis，flask等环境。而且配置完了，最终也是要部署到服务器上去的，所以docker 是必不可少的\n\n最近的工作，让我感到Docker的学习一定要提前了。因为只是先用起来，首先记录一些常用的命令，争取一天搞定。\n\n<!--more-->\n\n## Docker 镜像使用\n\n```bash\n# 列出本地的镜像 images\n$docker images\n$docker image ls \nREPOSITORY       TAG     IMAGE ID      CREATED             SIZE\nubuntu          latest   775349758637  2 weeks ago         64.2MB\n# 标签的含义\n- REPOSTITORY：表示镜像的仓库源\n- TAG：镜像的标签\n- IMAGE ID：镜像ID\n- CREATED：镜像创建时间\n- SIZE：镜像大小\n\n# 获取镜像\n$docker pull ubuntu:13.10\n\n# 查找镜像\n$docker search ubuntu\n- NAME:镜像仓库源的名称\n- DESCRIPTION:镜像的描述\n- OFFICIAL:是否docker官方发布\n\n# 删除镜像\n$docker rmi\n\n# 删除所有镜像\n\n\n```\n\n\n\n## 创建并启动容器\ndocker run 是docker 命令中比较复杂的一个命令 \n```bash\n$docker run <images> <command>\n$docker run busybox echo hello world\n$docker run Ubuntu:16.01 /bin/bash\n$docker run -t-i Ubuntu:16.01 /bin/bash\n-t-i: 交互式会话\n-d: 后台方式\n--rm: 运行完成后就会删除\n$docker exec -ti <CONTAINER ID> /bin/bash\n```\n\n## 容器信息\n```bash\n# 下面所有的<CONTAINER ID> 都可以用容器的NAME 替代\n# docker 很贴心的为我们的容器起了名字\n# 列出运行容器\n$docker ps \n$docker ps -a # 包含停止但没有消失的容器\n\n```\n\n## 容器管理\n```bash\n# 停止正在运行的容器\n$docker kill <CONTAINER ID>\n$docker stop <CONTAINER ID> \n# 两个命令都是会停止容器运行\n# 停止没有消失的容器\n$docker restart <CONTAINER ID>\n$docker start <CONTAINER ID>\n# 启动并进入交互界面\n$docker start -it <CONTAINER ID> /bin/bash\n\n# 删除无用的容器\n$docker rm <CONTAINER ID>\n# 删除所有已停止的容器\n$docker rm -v $(docker ps -aq -f status=exited)\n# 删除所有容器\n$docker rm $(docker ps -a)\n```\n\n## 查看docker输出\n用于查看docker 的输出，对于没有交互(-ti)的容器的时候，需要用这个命令查看容器输出\n```bash\n$docker logs <CONTAINER ID>\n```\n\n## 文件拷贝\n```bash\n$docker cp <CONTAINER ID>:[/path/to/file]\n```\n\n## Docker LNMP环境搭建\n> 这里我用的是github 上phplearn\n> 有一份教程整理的也很不错，下面列出来，以后继续看\n> [Docker LNMP环境搭建](https://www.awaimai.com/2120.html#9)\n\n```bash\n$cd phplearn\n$docker-compose up # 启动容器\n$docker-compose stop # 停止服务\n```\n\n## 参考资料\n> [DockerCheatSheet](https://github.com/eon01/DockerCheatSheet)\n\n","source":"_posts/Docker-基础命令.md","raw":"---\ntitle: Docker 基础命令\ndate: 2019-11-21 20:22:30\ntags: 日常学习笔记,Docker\ncategories:  基础技能\nkeywords: \ndescription: \ntop_img: \ncomments: false\ncover: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191123002607.png\ntoc: \ntoc_number:  \ncopyright: \n---\n\n## 前言\n\n最近的工作\n\n- php 学习，设计到LAMP的环境搭建。虽然是Mac上Apache 和 php 都是自带的，但是环境上还是不足，所以要用Docker。DAMP\n- 爬虫ip 池搭建，发现别人造好的轮子上需要如redis，flask等环境。而且配置完了，最终也是要部署到服务器上去的，所以docker 是必不可少的\n\n最近的工作，让我感到Docker的学习一定要提前了。因为只是先用起来，首先记录一些常用的命令，争取一天搞定。\n\n<!--more-->\n\n## Docker 镜像使用\n\n```bash\n# 列出本地的镜像 images\n$docker images\n$docker image ls \nREPOSITORY       TAG     IMAGE ID      CREATED             SIZE\nubuntu          latest   775349758637  2 weeks ago         64.2MB\n# 标签的含义\n- REPOSTITORY：表示镜像的仓库源\n- TAG：镜像的标签\n- IMAGE ID：镜像ID\n- CREATED：镜像创建时间\n- SIZE：镜像大小\n\n# 获取镜像\n$docker pull ubuntu:13.10\n\n# 查找镜像\n$docker search ubuntu\n- NAME:镜像仓库源的名称\n- DESCRIPTION:镜像的描述\n- OFFICIAL:是否docker官方发布\n\n# 删除镜像\n$docker rmi\n\n# 删除所有镜像\n\n\n```\n\n\n\n## 创建并启动容器\ndocker run 是docker 命令中比较复杂的一个命令 \n```bash\n$docker run <images> <command>\n$docker run busybox echo hello world\n$docker run Ubuntu:16.01 /bin/bash\n$docker run -t-i Ubuntu:16.01 /bin/bash\n-t-i: 交互式会话\n-d: 后台方式\n--rm: 运行完成后就会删除\n$docker exec -ti <CONTAINER ID> /bin/bash\n```\n\n## 容器信息\n```bash\n# 下面所有的<CONTAINER ID> 都可以用容器的NAME 替代\n# docker 很贴心的为我们的容器起了名字\n# 列出运行容器\n$docker ps \n$docker ps -a # 包含停止但没有消失的容器\n\n```\n\n## 容器管理\n```bash\n# 停止正在运行的容器\n$docker kill <CONTAINER ID>\n$docker stop <CONTAINER ID> \n# 两个命令都是会停止容器运行\n# 停止没有消失的容器\n$docker restart <CONTAINER ID>\n$docker start <CONTAINER ID>\n# 启动并进入交互界面\n$docker start -it <CONTAINER ID> /bin/bash\n\n# 删除无用的容器\n$docker rm <CONTAINER ID>\n# 删除所有已停止的容器\n$docker rm -v $(docker ps -aq -f status=exited)\n# 删除所有容器\n$docker rm $(docker ps -a)\n```\n\n## 查看docker输出\n用于查看docker 的输出，对于没有交互(-ti)的容器的时候，需要用这个命令查看容器输出\n```bash\n$docker logs <CONTAINER ID>\n```\n\n## 文件拷贝\n```bash\n$docker cp <CONTAINER ID>:[/path/to/file]\n```\n\n## Docker LNMP环境搭建\n> 这里我用的是github 上phplearn\n> 有一份教程整理的也很不错，下面列出来，以后继续看\n> [Docker LNMP环境搭建](https://www.awaimai.com/2120.html#9)\n\n```bash\n$cd phplearn\n$docker-compose up # 启动容器\n$docker-compose stop # 停止服务\n```\n\n## 参考资料\n> [DockerCheatSheet](https://github.com/eon01/DockerCheatSheet)\n\n","slug":"Docker-基础命令","published":1,"updated":"2019-11-22T16:26:35.077Z","layout":"post","photos":[],"link":"","_id":"ck3acxtjj0004pw8mekvcffme","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近的工作</p>\n<ul>\n<li>php 学习，设计到LAMP的环境搭建。虽然是Mac上Apache 和 php 都是自带的，但是环境上还是不足，所以要用Docker。DAMP</li>\n<li>爬虫ip 池搭建，发现别人造好的轮子上需要如redis，flask等环境。而且配置完了，最终也是要部署到服务器上去的，所以docker 是必不可少的</li>\n</ul>\n<p>最近的工作，让我感到Docker的学习一定要提前了。因为只是先用起来，首先记录一些常用的命令，争取一天搞定。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Docker-镜像使用\"><a href=\"#Docker-镜像使用\" class=\"headerlink\" title=\"Docker 镜像使用\"></a>Docker 镜像使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出本地的镜像 images</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> images</span><br><span class=\"line\"><span class=\"variable\">$docker</span> image ls </span><br><span class=\"line\">REPOSITORY       TAG     IMAGE ID      CREATED             SIZE</span><br><span class=\"line\">ubuntu          latest   775349758637  2 weeks ago         64.2MB</span><br><span class=\"line\"><span class=\"comment\"># 标签的含义</span></span><br><span class=\"line\">- REPOSTITORY：表示镜像的仓库源</span><br><span class=\"line\">- TAG：镜像的标签</span><br><span class=\"line\">- IMAGE ID：镜像ID</span><br><span class=\"line\">- CREATED：镜像创建时间</span><br><span class=\"line\">- SIZE：镜像大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> pull ubuntu:13.10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> search ubuntu</span><br><span class=\"line\">- NAME:镜像仓库源的名称</span><br><span class=\"line\">- DESCRIPTION:镜像的描述</span><br><span class=\"line\">- OFFICIAL:是否docker官方发布</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rmi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除所有镜像</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建并启动容器\"><a href=\"#创建并启动容器\" class=\"headerlink\" title=\"创建并启动容器\"></a>创建并启动容器</h2><p>docker run 是docker 命令中比较复杂的一个命令 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> run &lt;images&gt; &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"><span class=\"variable\">$docker</span> run busybox <span class=\"built_in\">echo</span> hello world</span><br><span class=\"line\"><span class=\"variable\">$docker</span> run Ubuntu:16.01 /bin/bash</span><br><span class=\"line\"><span class=\"variable\">$docker</span> run -t-i Ubuntu:16.01 /bin/bash</span><br><span class=\"line\">-t-i: 交互式会话</span><br><span class=\"line\">-d: 后台方式</span><br><span class=\"line\">--rm: 运行完成后就会删除</span><br><span class=\"line\"><span class=\"variable\">$docker</span> <span class=\"built_in\">exec</span> -ti &lt;CONTAINER ID&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器信息\"><a href=\"#容器信息\" class=\"headerlink\" title=\"容器信息\"></a>容器信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下面所有的&lt;CONTAINER ID&gt; 都可以用容器的NAME 替代</span></span><br><span class=\"line\"><span class=\"comment\"># docker 很贴心的为我们的容器起了名字</span></span><br><span class=\"line\"><span class=\"comment\"># 列出运行容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> ps </span><br><span class=\"line\"><span class=\"variable\">$docker</span> ps -a <span class=\"comment\"># 包含停止但没有消失的容器</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止正在运行的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> <span class=\"built_in\">kill</span> &lt;CONTAINER ID&gt;</span><br><span class=\"line\"><span class=\"variable\">$docker</span> stop &lt;CONTAINER ID&gt; </span><br><span class=\"line\"><span class=\"comment\"># 两个命令都是会停止容器运行</span></span><br><span class=\"line\"><span class=\"comment\"># 停止没有消失的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> restart &lt;CONTAINER ID&gt;</span><br><span class=\"line\"><span class=\"variable\">$docker</span> start &lt;CONTAINER ID&gt;</span><br><span class=\"line\"><span class=\"comment\"># 启动并进入交互界面</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> start -it &lt;CONTAINER ID&gt; /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除无用的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm &lt;CONTAINER ID&gt;</span><br><span class=\"line\"><span class=\"comment\"># 删除所有已停止的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\"><span class=\"comment\"># 删除所有容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm $(docker ps -a)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看docker输出\"><a href=\"#查看docker输出\" class=\"headerlink\" title=\"查看docker输出\"></a>查看docker输出</h2><p>用于查看docker 的输出，对于没有交互(-ti)的容器的时候，需要用这个命令查看容器输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> logs &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> cp &lt;CONTAINER ID&gt;:[/path/to/file]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-LNMP环境搭建\"><a href=\"#Docker-LNMP环境搭建\" class=\"headerlink\" title=\"Docker LNMP环境搭建\"></a>Docker LNMP环境搭建</h2><blockquote>\n<p>这里我用的是github 上phplearn<br>有一份教程整理的也很不错，下面列出来，以后继续看<br><a href=\"https://www.awaimai.com/2120.html#9\" target=\"_blank\" rel=\"noopener\">Docker LNMP环境搭建</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cd</span> phplearn</span><br><span class=\"line\"><span class=\"variable\">$docker</span>-compose up <span class=\"comment\"># 启动容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span>-compose stop <span class=\"comment\"># 停止服务</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://github.com/eon01/DockerCheatSheet\" target=\"_blank\" rel=\"noopener\">DockerCheatSheet</a></p>\n</blockquote>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近的工作</p>\n<ul>\n<li>php 学习，设计到LAMP的环境搭建。虽然是Mac上Apache 和 php 都是自带的，但是环境上还是不足，所以要用Docker。DAMP</li>\n<li>爬虫ip 池搭建，发现别人造好的轮子上需要如redis，flask等环境。而且配置完了，最终也是要部署到服务器上去的，所以docker 是必不可少的</li>\n</ul>\n<p>最近的工作，让我感到Docker的学习一定要提前了。因为只是先用起来，首先记录一些常用的命令，争取一天搞定。</p>","more":"<h2 id=\"Docker-镜像使用\"><a href=\"#Docker-镜像使用\" class=\"headerlink\" title=\"Docker 镜像使用\"></a>Docker 镜像使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出本地的镜像 images</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> images</span><br><span class=\"line\"><span class=\"variable\">$docker</span> image ls </span><br><span class=\"line\">REPOSITORY       TAG     IMAGE ID      CREATED             SIZE</span><br><span class=\"line\">ubuntu          latest   775349758637  2 weeks ago         64.2MB</span><br><span class=\"line\"><span class=\"comment\"># 标签的含义</span></span><br><span class=\"line\">- REPOSTITORY：表示镜像的仓库源</span><br><span class=\"line\">- TAG：镜像的标签</span><br><span class=\"line\">- IMAGE ID：镜像ID</span><br><span class=\"line\">- CREATED：镜像创建时间</span><br><span class=\"line\">- SIZE：镜像大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> pull ubuntu:13.10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> search ubuntu</span><br><span class=\"line\">- NAME:镜像仓库源的名称</span><br><span class=\"line\">- DESCRIPTION:镜像的描述</span><br><span class=\"line\">- OFFICIAL:是否docker官方发布</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rmi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除所有镜像</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建并启动容器\"><a href=\"#创建并启动容器\" class=\"headerlink\" title=\"创建并启动容器\"></a>创建并启动容器</h2><p>docker run 是docker 命令中比较复杂的一个命令 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> run &lt;images&gt; &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"><span class=\"variable\">$docker</span> run busybox <span class=\"built_in\">echo</span> hello world</span><br><span class=\"line\"><span class=\"variable\">$docker</span> run Ubuntu:16.01 /bin/bash</span><br><span class=\"line\"><span class=\"variable\">$docker</span> run -t-i Ubuntu:16.01 /bin/bash</span><br><span class=\"line\">-t-i: 交互式会话</span><br><span class=\"line\">-d: 后台方式</span><br><span class=\"line\">--rm: 运行完成后就会删除</span><br><span class=\"line\"><span class=\"variable\">$docker</span> <span class=\"built_in\">exec</span> -ti &lt;CONTAINER ID&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器信息\"><a href=\"#容器信息\" class=\"headerlink\" title=\"容器信息\"></a>容器信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下面所有的&lt;CONTAINER ID&gt; 都可以用容器的NAME 替代</span></span><br><span class=\"line\"><span class=\"comment\"># docker 很贴心的为我们的容器起了名字</span></span><br><span class=\"line\"><span class=\"comment\"># 列出运行容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> ps </span><br><span class=\"line\"><span class=\"variable\">$docker</span> ps -a <span class=\"comment\"># 包含停止但没有消失的容器</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止正在运行的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> <span class=\"built_in\">kill</span> &lt;CONTAINER ID&gt;</span><br><span class=\"line\"><span class=\"variable\">$docker</span> stop &lt;CONTAINER ID&gt; </span><br><span class=\"line\"><span class=\"comment\"># 两个命令都是会停止容器运行</span></span><br><span class=\"line\"><span class=\"comment\"># 停止没有消失的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> restart &lt;CONTAINER ID&gt;</span><br><span class=\"line\"><span class=\"variable\">$docker</span> start &lt;CONTAINER ID&gt;</span><br><span class=\"line\"><span class=\"comment\"># 启动并进入交互界面</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> start -it &lt;CONTAINER ID&gt; /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除无用的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm &lt;CONTAINER ID&gt;</span><br><span class=\"line\"><span class=\"comment\"># 删除所有已停止的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\"><span class=\"comment\"># 删除所有容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm $(docker ps -a)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看docker输出\"><a href=\"#查看docker输出\" class=\"headerlink\" title=\"查看docker输出\"></a>查看docker输出</h2><p>用于查看docker 的输出，对于没有交互(-ti)的容器的时候，需要用这个命令查看容器输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> logs &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> cp &lt;CONTAINER ID&gt;:[/path/to/file]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-LNMP环境搭建\"><a href=\"#Docker-LNMP环境搭建\" class=\"headerlink\" title=\"Docker LNMP环境搭建\"></a>Docker LNMP环境搭建</h2><blockquote>\n<p>这里我用的是github 上phplearn<br>有一份教程整理的也很不错，下面列出来，以后继续看<br><a href=\"https://www.awaimai.com/2120.html#9\" target=\"_blank\" rel=\"noopener\">Docker LNMP环境搭建</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cd</span> phplearn</span><br><span class=\"line\"><span class=\"variable\">$docker</span>-compose up <span class=\"comment\"># 启动容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span>-compose stop <span class=\"comment\"># 停止服务</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://github.com/eon01/DockerCheatSheet\" target=\"_blank\" rel=\"noopener\">DockerCheatSheet</a></p>\n</blockquote>"},{"title":"Pine Script 学习笔记","comments":0,"date":"2019-10-31T14:03:08.000Z","description":null,"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031220526.png","_content":"\n\n\n# Pine Script 学习笔记——基础语法篇（一）\n\n## 简介\n\n量化交易平台 [TrendingView ](https://www.tradingview.com/) 是一个支持多种资产的投资平台，很多人在上面分享对于股票，外汇，数据货币等资产的投资观点，难得的是在上面能找到很多人的交易策略。\n\nTrendingView 使用的是自己开发的Pine 语言作为脚本，这一点和MT4 开发的mql4 很像。用户可以自己编写脚本和策略，并与其他人分享。Pine 直观给我的印象比Mql4 更加简单，更加关注于策略本身，而不是编程技巧。\n\n此外，Pine语言编辑器没有那么强大的debug 功能，这对于一开始上手练习来说，不是那么方便。不过它一直在更新，发展的很快。\n\nTrendingView 对接了很多经纪商，使得它支持的交易品种很丰富，而且它的图表功能很强大。\n\n下面记录一下自己学习Pine 脚本的一些基础的笔记，权当备忘。主要内容都参考自Pine 的脚本文档\n\n## 脚本结构\n指明用的Pine 脚本版本\n```pine\n//@version=4  \n```\n\nPine 可以分为study脚本 和 strategy 脚本（指标&策略）\nstudy 脚本必须包含 plot,plotshape,barcolor,line.new  等输出\nstrategy 脚本包含 strategy.* 即交易函数\n\n## 换行 Line wrapping\n```Pine\n//例子1 换行需要空格\na = open+\n      high+\n        low\n// 例子2 换行中不能有注释\na = open+\n       high // 此处加注释会出问题\n// 例子3 函数内换行，空行必须要超过一个Tab（或者4个空格）\nlabel.new(bar_index, na, yloc=yloc.abovebar, text=t,\n     color=hist ? color.green : color.red)\n// 这里空格必须超过4个\n```\n\n## 运算符\n- 算术： + - * / %\n  > 1/2 = 0 \n  > 1/2.0 = 0.5\n\n- 比较:  ==  !=\n\n- 逻辑: not and or\n\n- 三元运算符：\n  - condition ? result1 : result2\n  - iff(condition, result1, result2)\n  \n  ```\n  有房？嫁:有车？: 嫁:帅？嫁: 不嫁\n  ```\n\n- []  运算符(History reference operator)\n  close 代表最新的价格，close[1]代表了历史价格。\n  ```\n  close = close[0] //显示的是最新的收盘价\n  ```\n  除此之外，Pine脚本里面还有一个变量 bar_index，记录着bar的数目，编号自左向右，从0开始。bar_index = (bar数量)N-1。\n  \n  - [ ]  为什么运行close[bar_index-1] ≠ close[0] ?\n    而close[bar_index-1] 会出错\n\n## 函数\n\nPine 脚本中包含了大量的自建函数，用户还可以自定义函数、\n\n- 单行函数\n\n  ```\n  f(x,y) => x+y\n  ```\n\n  Pine Script 的函数不支持**<u>递归</u>**\n\n  即，不允许在函数中再次调用自己本身\n\n- 多行函数\n\n  ```\n  geom_average(x, y) =>\n      a = x*x\n      b = y*y\n      sqrt(a + b)\n  ```\n\n  > - Pine Script 需要（一个Tab 或者4空格，TrendingView 会自动用4个空格来替换掉Tab）来划定函数的范围\n  > - 最后一行的表达式或 变量作为函数的输出结果\n\n- 输出>=2\n\n  ```\n  fun(x,y) =>\n  \t a = x+y\n     b = x-y\n     retrun [a,b]\n  // 调用函数\n  [a,b] =fun(3,2)\n  ```\n\n\n\n### 函数的注意事项\n\n当在函数块中使用函数或者历史数据信息的时候要注意。因为所使用的历史信息是每一次连续调用生成的。\n\n如果函数并不是在每一根柱线上都调用，那么数据生成就会出现错误。\n\n- 例1\n\n  ```\n  // 定义两个函数f1,f2\n  f1(a) => a[1]\n  f2() => close[1]\n  // 说明下列用法的实际意义\n  f1(close) 等价于 close[2]\n  f2() 等价于 close[1]\n  ```\n\n <div alig=“center”>\n  <img src=\"https://www.tradingview.com/pine-script-docs/en/v4/_images/Function_historical_context_1.png\">\n  </div>\n\n  f1 传入的close 序列，需要在第一次调用后才能生成，所以f1 的 价格信息实际上比f2 晚一天\n\n## 变量声明&语句statement\n\n### var\n\n- Pine 语言中变量定义的方式有两种： = 和 var\n\n  ```\n  a = 1 // a为整形\n  float a = 1 // a为浮点型\n  var a = 0\n  var int a = 0\n  b = na //出错\n  ```\n\n  变量定义的时候，需要指明变量的类型(或者 等式右侧表达式能指明类型亦可)\n\n  na 没有特定的类型，所以赋值时会出错\n  \n- var 关键词\n\n  var 是用于分配和一次性初始化变量的关键词。\n\n  不含var 关键词的变量在每次数据更新的时候都会覆盖变量的值。使用了var 关键词的变量，在数据更新中，可以“保持状态”。\n  举例\n\n  ```\n  //@version=4\n  study(\"Var keyword example\")\n  var a = close\n  var b = 0.0\n  var c = 0.0\n  var green_bars_count = 0\n  if close > open\n  \tvar x = close\n  \tb := x\n  \tgreen_bars_count := green_bars_count + 1\n  \tif green_bars_count >= 10\n  \t\tvar y = close\n  \t\tc := y\n  plot(a)\n  plot(b)\n  plot(c)\n  ```\n\n  变量 'a' 保持系列中每个柱线的第一根柱线的收盘价。\n\n  变量 'b'保持系列中第一个“绿色”价格棒的收盘价。\n\n  变量 'c'保持系列中第十个“绿色”条的收盘价。\n\n  即a,b,c 都是一个常数。\n\n  去除var 的话，a,b,c 会随着价格变化而变化\n\n### if 语句\n\n  ```\n  // This code compiles\n  x = if close > open\n      close\n  else\n      open\n  // This code doesn't compile\n  x = if close > open\n      close\n  else\n      \"open\"\n  ```\n  需要注意的是，与python不同，Pine要求，then 和 else语句返回的值的类型是相同的。在上面的第二个例子中，close 和 \"open\" 一个是float Series，另一个是string，不同类型的话，编译会出错。\n\n  ```\n    x = if close > open\n      close\n  // If current close > current open, then x = close.\n  // Otherwise the x = na.\n  ```\n  if 语句中可以忽略else，但是系统会默认赋值（na,false,\"\"）\n\n### for 语句\n```Pine\nfor i = 1 to length-1\n     sum := sum + price[i]\n```\n\n\n\n## 执行模型\n\nPine代码是根据价格信息计算的。但是价格信息并不是完整加载的，用户可以一直向左滑动图表，直到最早的一根柱子（Pro 用户可以在图表上加载10000左右，免费用户可以加载5000根柱子）\n\n### 实时数据的计算\n\nPine指标计算实时数据的时候和计算历史数据略有不同，因为实时数据会有addtional commit(?)和rollback action(?)\n\n在实时数据的处理过程中，柱线的每一次变动都会引起Pine 指标的计算\n\n- rollback : 在每一根柱线更新时发生\n- commit : 在每一根柱线关闭时发生\n\n对于判断柱线的状态，Pine中有一系列的自建函数 barstate.* 来显示当前柱线的状态。\n\n","source":"_posts/Pine Script 学习笔记.md","raw":"---\ntitle: Pine Script 学习笔记\ncomments: false\ndate: 2019-10-31 22:03:08\ntags: [Pine, TradingView, 量化]\ncategories: \n- 量化\n- Pine\ndescription: \ncover: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031220526.png\n---\n\n\n\n# Pine Script 学习笔记——基础语法篇（一）\n\n## 简介\n\n量化交易平台 [TrendingView ](https://www.tradingview.com/) 是一个支持多种资产的投资平台，很多人在上面分享对于股票，外汇，数据货币等资产的投资观点，难得的是在上面能找到很多人的交易策略。\n\nTrendingView 使用的是自己开发的Pine 语言作为脚本，这一点和MT4 开发的mql4 很像。用户可以自己编写脚本和策略，并与其他人分享。Pine 直观给我的印象比Mql4 更加简单，更加关注于策略本身，而不是编程技巧。\n\n此外，Pine语言编辑器没有那么强大的debug 功能，这对于一开始上手练习来说，不是那么方便。不过它一直在更新，发展的很快。\n\nTrendingView 对接了很多经纪商，使得它支持的交易品种很丰富，而且它的图表功能很强大。\n\n下面记录一下自己学习Pine 脚本的一些基础的笔记，权当备忘。主要内容都参考自Pine 的脚本文档\n\n## 脚本结构\n指明用的Pine 脚本版本\n```pine\n//@version=4  \n```\n\nPine 可以分为study脚本 和 strategy 脚本（指标&策略）\nstudy 脚本必须包含 plot,plotshape,barcolor,line.new  等输出\nstrategy 脚本包含 strategy.* 即交易函数\n\n## 换行 Line wrapping\n```Pine\n//例子1 换行需要空格\na = open+\n      high+\n        low\n// 例子2 换行中不能有注释\na = open+\n       high // 此处加注释会出问题\n// 例子3 函数内换行，空行必须要超过一个Tab（或者4个空格）\nlabel.new(bar_index, na, yloc=yloc.abovebar, text=t,\n     color=hist ? color.green : color.red)\n// 这里空格必须超过4个\n```\n\n## 运算符\n- 算术： + - * / %\n  > 1/2 = 0 \n  > 1/2.0 = 0.5\n\n- 比较:  ==  !=\n\n- 逻辑: not and or\n\n- 三元运算符：\n  - condition ? result1 : result2\n  - iff(condition, result1, result2)\n  \n  ```\n  有房？嫁:有车？: 嫁:帅？嫁: 不嫁\n  ```\n\n- []  运算符(History reference operator)\n  close 代表最新的价格，close[1]代表了历史价格。\n  ```\n  close = close[0] //显示的是最新的收盘价\n  ```\n  除此之外，Pine脚本里面还有一个变量 bar_index，记录着bar的数目，编号自左向右，从0开始。bar_index = (bar数量)N-1。\n  \n  - [ ]  为什么运行close[bar_index-1] ≠ close[0] ?\n    而close[bar_index-1] 会出错\n\n## 函数\n\nPine 脚本中包含了大量的自建函数，用户还可以自定义函数、\n\n- 单行函数\n\n  ```\n  f(x,y) => x+y\n  ```\n\n  Pine Script 的函数不支持**<u>递归</u>**\n\n  即，不允许在函数中再次调用自己本身\n\n- 多行函数\n\n  ```\n  geom_average(x, y) =>\n      a = x*x\n      b = y*y\n      sqrt(a + b)\n  ```\n\n  > - Pine Script 需要（一个Tab 或者4空格，TrendingView 会自动用4个空格来替换掉Tab）来划定函数的范围\n  > - 最后一行的表达式或 变量作为函数的输出结果\n\n- 输出>=2\n\n  ```\n  fun(x,y) =>\n  \t a = x+y\n     b = x-y\n     retrun [a,b]\n  // 调用函数\n  [a,b] =fun(3,2)\n  ```\n\n\n\n### 函数的注意事项\n\n当在函数块中使用函数或者历史数据信息的时候要注意。因为所使用的历史信息是每一次连续调用生成的。\n\n如果函数并不是在每一根柱线上都调用，那么数据生成就会出现错误。\n\n- 例1\n\n  ```\n  // 定义两个函数f1,f2\n  f1(a) => a[1]\n  f2() => close[1]\n  // 说明下列用法的实际意义\n  f1(close) 等价于 close[2]\n  f2() 等价于 close[1]\n  ```\n\n <div alig=“center”>\n  <img src=\"https://www.tradingview.com/pine-script-docs/en/v4/_images/Function_historical_context_1.png\">\n  </div>\n\n  f1 传入的close 序列，需要在第一次调用后才能生成，所以f1 的 价格信息实际上比f2 晚一天\n\n## 变量声明&语句statement\n\n### var\n\n- Pine 语言中变量定义的方式有两种： = 和 var\n\n  ```\n  a = 1 // a为整形\n  float a = 1 // a为浮点型\n  var a = 0\n  var int a = 0\n  b = na //出错\n  ```\n\n  变量定义的时候，需要指明变量的类型(或者 等式右侧表达式能指明类型亦可)\n\n  na 没有特定的类型，所以赋值时会出错\n  \n- var 关键词\n\n  var 是用于分配和一次性初始化变量的关键词。\n\n  不含var 关键词的变量在每次数据更新的时候都会覆盖变量的值。使用了var 关键词的变量，在数据更新中，可以“保持状态”。\n  举例\n\n  ```\n  //@version=4\n  study(\"Var keyword example\")\n  var a = close\n  var b = 0.0\n  var c = 0.0\n  var green_bars_count = 0\n  if close > open\n  \tvar x = close\n  \tb := x\n  \tgreen_bars_count := green_bars_count + 1\n  \tif green_bars_count >= 10\n  \t\tvar y = close\n  \t\tc := y\n  plot(a)\n  plot(b)\n  plot(c)\n  ```\n\n  变量 'a' 保持系列中每个柱线的第一根柱线的收盘价。\n\n  变量 'b'保持系列中第一个“绿色”价格棒的收盘价。\n\n  变量 'c'保持系列中第十个“绿色”条的收盘价。\n\n  即a,b,c 都是一个常数。\n\n  去除var 的话，a,b,c 会随着价格变化而变化\n\n### if 语句\n\n  ```\n  // This code compiles\n  x = if close > open\n      close\n  else\n      open\n  // This code doesn't compile\n  x = if close > open\n      close\n  else\n      \"open\"\n  ```\n  需要注意的是，与python不同，Pine要求，then 和 else语句返回的值的类型是相同的。在上面的第二个例子中，close 和 \"open\" 一个是float Series，另一个是string，不同类型的话，编译会出错。\n\n  ```\n    x = if close > open\n      close\n  // If current close > current open, then x = close.\n  // Otherwise the x = na.\n  ```\n  if 语句中可以忽略else，但是系统会默认赋值（na,false,\"\"）\n\n### for 语句\n```Pine\nfor i = 1 to length-1\n     sum := sum + price[i]\n```\n\n\n\n## 执行模型\n\nPine代码是根据价格信息计算的。但是价格信息并不是完整加载的，用户可以一直向左滑动图表，直到最早的一根柱子（Pro 用户可以在图表上加载10000左右，免费用户可以加载5000根柱子）\n\n### 实时数据的计算\n\nPine指标计算实时数据的时候和计算历史数据略有不同，因为实时数据会有addtional commit(?)和rollback action(?)\n\n在实时数据的处理过程中，柱线的每一次变动都会引起Pine 指标的计算\n\n- rollback : 在每一根柱线更新时发生\n- commit : 在每一根柱线关闭时发生\n\n对于判断柱线的状态，Pine中有一系列的自建函数 barstate.* 来显示当前柱线的状态。\n\n","slug":"Pine Script 学习笔记","published":1,"updated":"2019-11-04T13:58:13.237Z","layout":"post","photos":[],"link":"","_id":"ck3acxtjn0008pw8md9pfb4kv","content":"<h1 id=\"Pine-Script-学习笔记——基础语法篇（一）\"><a href=\"#Pine-Script-学习笔记——基础语法篇（一）\" class=\"headerlink\" title=\"Pine Script 学习笔记——基础语法篇（一）\"></a>Pine Script 学习笔记——基础语法篇（一）</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>量化交易平台 <a href=\"https://www.tradingview.com/\" target=\"_blank\" rel=\"noopener\">TrendingView </a> 是一个支持多种资产的投资平台，很多人在上面分享对于股票，外汇，数据货币等资产的投资观点，难得的是在上面能找到很多人的交易策略。</p>\n<p>TrendingView 使用的是自己开发的Pine 语言作为脚本，这一点和MT4 开发的mql4 很像。用户可以自己编写脚本和策略，并与其他人分享。Pine 直观给我的印象比Mql4 更加简单，更加关注于策略本身，而不是编程技巧。</p>\n<p>此外，Pine语言编辑器没有那么强大的debug 功能，这对于一开始上手练习来说，不是那么方便。不过它一直在更新，发展的很快。</p>\n<p>TrendingView 对接了很多经纪商，使得它支持的交易品种很丰富，而且它的图表功能很强大。</p>\n<p>下面记录一下自己学习Pine 脚本的一些基础的笔记，权当备忘。主要内容都参考自Pine 的脚本文档</p>\n<h2 id=\"脚本结构\"><a href=\"#脚本结构\" class=\"headerlink\" title=\"脚本结构\"></a>脚本结构</h2><p>指明用的Pine 脚本版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br></pre></td></tr></table></figure>\n\n<p>Pine 可以分为study脚本 和 strategy 脚本（指标&amp;策略）<br>study 脚本必须包含 plot,plotshape,barcolor,line.new  等输出<br>strategy 脚本包含 strategy.* 即交易函数</p>\n<h2 id=\"换行-Line-wrapping\"><a href=\"#换行-Line-wrapping\" class=\"headerlink\" title=\"换行 Line wrapping\"></a>换行 Line wrapping</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例子1 换行需要空格</span><br><span class=\"line\">a = open+</span><br><span class=\"line\">      high+</span><br><span class=\"line\">        low</span><br><span class=\"line\">// 例子2 换行中不能有注释</span><br><span class=\"line\">a = open+</span><br><span class=\"line\">       high // 此处加注释会出问题</span><br><span class=\"line\">// 例子3 函数内换行，空行必须要超过一个Tab（或者4个空格）</span><br><span class=\"line\">label.new(bar_index, na, yloc=yloc.abovebar, text=t,</span><br><span class=\"line\">     color=hist ? color.green : color.red)</span><br><span class=\"line\">// 这里空格必须超过4个</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li><p>算术： + - * / %</p>\n<blockquote>\n<p>1/2 = 0<br>1/2.0 = 0.5</p>\n</blockquote>\n</li>\n<li><p>比较:  ==  !=</p>\n</li>\n<li><p>逻辑: not and or</p>\n</li>\n<li><p>三元运算符：</p>\n<ul>\n<li>condition ? result1 : result2</li>\n<li>iff(condition, result1, result2)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有房？嫁:有车？: 嫁:帅？嫁: 不嫁</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>[]  运算符(History reference operator)<br>close 代表最新的价格，close[1]代表了历史价格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">close = close[0] //显示的是最新的收盘价</span><br></pre></td></tr></table></figure>\n<p>除此之外，Pine脚本里面还有一个变量 bar_index，记录着bar的数目，编号自左向右，从0开始。bar_index = (bar数量)N-1。</p>\n<ul>\n<li><input disabled type=\"checkbox\"> 为什么运行close[bar_index-1] ≠ close[0] ?<br>而close[bar_index-1] 会出错</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>Pine 脚本中包含了大量的自建函数，用户还可以自定义函数、</p>\n<ul>\n<li><p>单行函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(x,y) =&gt; x+y</span><br></pre></td></tr></table></figure>\n\n<p>Pine Script 的函数不支持<strong><u>递归</u></strong></p>\n<p>即，不允许在函数中再次调用自己本身</p>\n</li>\n<li><p>多行函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geom_average(x, y) =&gt;</span><br><span class=\"line\">    a = x*x</span><br><span class=\"line\">    b = y*y</span><br><span class=\"line\">    sqrt(a + b)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>Pine Script 需要（一个Tab 或者4空格，TrendingView 会自动用4个空格来替换掉Tab）来划定函数的范围</li>\n<li>最后一行的表达式或 变量作为函数的输出结果</li>\n</ul>\n</blockquote>\n</li>\n<li><p>输出&gt;=2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun(x,y) =&gt;</span><br><span class=\"line\">\t a = x+y</span><br><span class=\"line\">   b = x-y</span><br><span class=\"line\">   retrun [a,b]</span><br><span class=\"line\">// 调用函数</span><br><span class=\"line\">[a,b] =fun(3,2)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"函数的注意事项\"><a href=\"#函数的注意事项\" class=\"headerlink\" title=\"函数的注意事项\"></a>函数的注意事项</h3><p>当在函数块中使用函数或者历史数据信息的时候要注意。因为所使用的历史信息是每一次连续调用生成的。</p>\n<p>如果函数并不是在每一根柱线上都调用，那么数据生成就会出现错误。</p>\n<ul>\n<li><p>例1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义两个函数f1,f2</span><br><span class=\"line\">f1(a) =&gt; a[1]</span><br><span class=\"line\">f2() =&gt; close[1]</span><br><span class=\"line\">// 说明下列用法的实际意义</span><br><span class=\"line\">f1(close) 等价于 close[2]</span><br><span class=\"line\">f2() 等价于 close[1]</span><br></pre></td></tr></table></figure>\n\n<div alig=\"“center”\">\n<img data-src=\"https://www.tradingview.com/pine-script-docs/en/v4/_images/Function_historical_context_1.png\" class=\"lozad\">\n</div>\n\n<p>f1 传入的close 序列，需要在第一次调用后才能生成，所以f1 的 价格信息实际上比f2 晚一天</p>\n</li>\n</ul>\n<h2 id=\"变量声明-amp-语句statement\"><a href=\"#变量声明-amp-语句statement\" class=\"headerlink\" title=\"变量声明&amp;语句statement\"></a>变量声明&amp;语句statement</h2><h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h3><ul>\n<li><p>Pine 语言中变量定义的方式有两种： = 和 var</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1 // a为整形</span><br><span class=\"line\">float a = 1 // a为浮点型</span><br><span class=\"line\">var a = 0</span><br><span class=\"line\">var int a = 0</span><br><span class=\"line\">b = na //出错</span><br></pre></td></tr></table></figure>\n\n<p>变量定义的时候，需要指明变量的类型(或者 等式右侧表达式能指明类型亦可)</p>\n<p>na 没有特定的类型，所以赋值时会出错</p>\n</li>\n<li><p>var 关键词</p>\n<p>var 是用于分配和一次性初始化变量的关键词。</p>\n<p>不含var 关键词的变量在每次数据更新的时候都会覆盖变量的值。使用了var 关键词的变量，在数据更新中，可以“保持状态”。<br>举例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;Var keyword example&quot;)</span><br><span class=\"line\">var a = close</span><br><span class=\"line\">var b = 0.0</span><br><span class=\"line\">var c = 0.0</span><br><span class=\"line\">var green_bars_count = 0</span><br><span class=\"line\">if close &gt; open</span><br><span class=\"line\">\tvar x = close</span><br><span class=\"line\">\tb := x</span><br><span class=\"line\">\tgreen_bars_count := green_bars_count + 1</span><br><span class=\"line\">\tif green_bars_count &gt;= 10</span><br><span class=\"line\">\t\tvar y = close</span><br><span class=\"line\">\t\tc := y</span><br><span class=\"line\">plot(a)</span><br><span class=\"line\">plot(b)</span><br><span class=\"line\">plot(c)</span><br></pre></td></tr></table></figure>\n\n<p>变量 ‘a’ 保持系列中每个柱线的第一根柱线的收盘价。</p>\n<p>变量 ‘b’保持系列中第一个“绿色”价格棒的收盘价。</p>\n<p>变量 ‘c’保持系列中第十个“绿色”条的收盘价。</p>\n<p>即a,b,c 都是一个常数。</p>\n<p>去除var 的话，a,b,c 会随着价格变化而变化</p>\n</li>\n</ul>\n<h3 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// This code compiles</span><br><span class=\"line\">x = if close &gt; open</span><br><span class=\"line\">    close</span><br><span class=\"line\">else</span><br><span class=\"line\">    open</span><br><span class=\"line\">// This code doesn&apos;t compile</span><br><span class=\"line\">x = if close &gt; open</span><br><span class=\"line\">    close</span><br><span class=\"line\">else</span><br><span class=\"line\">    &quot;open&quot;</span><br></pre></td></tr></table></figure>\n<p>  需要注意的是，与python不同，Pine要求，then 和 else语句返回的值的类型是相同的。在上面的第二个例子中，close 和 “open” 一个是float Series，另一个是string，不同类型的话，编译会出错。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  x = if close &gt; open</span><br><span class=\"line\">    close</span><br><span class=\"line\">// If current close &gt; current open, then x = close.</span><br><span class=\"line\">// Otherwise the x = na.</span><br></pre></td></tr></table></figure>\n<p>  if 语句中可以忽略else，但是系统会默认赋值（na,false,””）</p>\n<h3 id=\"for-语句\"><a href=\"#for-语句\" class=\"headerlink\" title=\"for 语句\"></a>for 语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i = 1 to length-1</span><br><span class=\"line\">     sum := sum + price[i]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"执行模型\"><a href=\"#执行模型\" class=\"headerlink\" title=\"执行模型\"></a>执行模型</h2><p>Pine代码是根据价格信息计算的。但是价格信息并不是完整加载的，用户可以一直向左滑动图表，直到最早的一根柱子（Pro 用户可以在图表上加载10000左右，免费用户可以加载5000根柱子）</p>\n<h3 id=\"实时数据的计算\"><a href=\"#实时数据的计算\" class=\"headerlink\" title=\"实时数据的计算\"></a>实时数据的计算</h3><p>Pine指标计算实时数据的时候和计算历史数据略有不同，因为实时数据会有addtional commit(?)和rollback action(?)</p>\n<p>在实时数据的处理过程中，柱线的每一次变动都会引起Pine 指标的计算</p>\n<ul>\n<li>rollback : 在每一根柱线更新时发生</li>\n<li>commit : 在每一根柱线关闭时发生</li>\n</ul>\n<p>对于判断柱线的状态，Pine中有一系列的自建函数 barstate.* 来显示当前柱线的状态。</p>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"excerpt":"","more":"<h1 id=\"Pine-Script-学习笔记——基础语法篇（一）\"><a href=\"#Pine-Script-学习笔记——基础语法篇（一）\" class=\"headerlink\" title=\"Pine Script 学习笔记——基础语法篇（一）\"></a>Pine Script 学习笔记——基础语法篇（一）</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>量化交易平台 <a href=\"https://www.tradingview.com/\" target=\"_blank\" rel=\"noopener\">TrendingView </a> 是一个支持多种资产的投资平台，很多人在上面分享对于股票，外汇，数据货币等资产的投资观点，难得的是在上面能找到很多人的交易策略。</p>\n<p>TrendingView 使用的是自己开发的Pine 语言作为脚本，这一点和MT4 开发的mql4 很像。用户可以自己编写脚本和策略，并与其他人分享。Pine 直观给我的印象比Mql4 更加简单，更加关注于策略本身，而不是编程技巧。</p>\n<p>此外，Pine语言编辑器没有那么强大的debug 功能，这对于一开始上手练习来说，不是那么方便。不过它一直在更新，发展的很快。</p>\n<p>TrendingView 对接了很多经纪商，使得它支持的交易品种很丰富，而且它的图表功能很强大。</p>\n<p>下面记录一下自己学习Pine 脚本的一些基础的笔记，权当备忘。主要内容都参考自Pine 的脚本文档</p>\n<h2 id=\"脚本结构\"><a href=\"#脚本结构\" class=\"headerlink\" title=\"脚本结构\"></a>脚本结构</h2><p>指明用的Pine 脚本版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br></pre></td></tr></table></figure>\n\n<p>Pine 可以分为study脚本 和 strategy 脚本（指标&amp;策略）<br>study 脚本必须包含 plot,plotshape,barcolor,line.new  等输出<br>strategy 脚本包含 strategy.* 即交易函数</p>\n<h2 id=\"换行-Line-wrapping\"><a href=\"#换行-Line-wrapping\" class=\"headerlink\" title=\"换行 Line wrapping\"></a>换行 Line wrapping</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例子1 换行需要空格</span><br><span class=\"line\">a = open+</span><br><span class=\"line\">      high+</span><br><span class=\"line\">        low</span><br><span class=\"line\">// 例子2 换行中不能有注释</span><br><span class=\"line\">a = open+</span><br><span class=\"line\">       high // 此处加注释会出问题</span><br><span class=\"line\">// 例子3 函数内换行，空行必须要超过一个Tab（或者4个空格）</span><br><span class=\"line\">label.new(bar_index, na, yloc=yloc.abovebar, text=t,</span><br><span class=\"line\">     color=hist ? color.green : color.red)</span><br><span class=\"line\">// 这里空格必须超过4个</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li><p>算术： + - * / %</p>\n<blockquote>\n<p>1/2 = 0<br>1/2.0 = 0.5</p>\n</blockquote>\n</li>\n<li><p>比较:  ==  !=</p>\n</li>\n<li><p>逻辑: not and or</p>\n</li>\n<li><p>三元运算符：</p>\n<ul>\n<li>condition ? result1 : result2</li>\n<li>iff(condition, result1, result2)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有房？嫁:有车？: 嫁:帅？嫁: 不嫁</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>[]  运算符(History reference operator)<br>close 代表最新的价格，close[1]代表了历史价格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">close = close[0] //显示的是最新的收盘价</span><br></pre></td></tr></table></figure>\n<p>除此之外，Pine脚本里面还有一个变量 bar_index，记录着bar的数目，编号自左向右，从0开始。bar_index = (bar数量)N-1。</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 为什么运行close[bar_index-1] ≠ close[0] ?<br>而close[bar_index-1] 会出错</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>Pine 脚本中包含了大量的自建函数，用户还可以自定义函数、</p>\n<ul>\n<li><p>单行函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(x,y) =&gt; x+y</span><br></pre></td></tr></table></figure>\n\n<p>Pine Script 的函数不支持<strong><u>递归</u></strong></p>\n<p>即，不允许在函数中再次调用自己本身</p>\n</li>\n<li><p>多行函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geom_average(x, y) =&gt;</span><br><span class=\"line\">    a = x*x</span><br><span class=\"line\">    b = y*y</span><br><span class=\"line\">    sqrt(a + b)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>Pine Script 需要（一个Tab 或者4空格，TrendingView 会自动用4个空格来替换掉Tab）来划定函数的范围</li>\n<li>最后一行的表达式或 变量作为函数的输出结果</li>\n</ul>\n</blockquote>\n</li>\n<li><p>输出&gt;=2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun(x,y) =&gt;</span><br><span class=\"line\">\t a = x+y</span><br><span class=\"line\">   b = x-y</span><br><span class=\"line\">   retrun [a,b]</span><br><span class=\"line\">// 调用函数</span><br><span class=\"line\">[a,b] =fun(3,2)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"函数的注意事项\"><a href=\"#函数的注意事项\" class=\"headerlink\" title=\"函数的注意事项\"></a>函数的注意事项</h3><p>当在函数块中使用函数或者历史数据信息的时候要注意。因为所使用的历史信息是每一次连续调用生成的。</p>\n<p>如果函数并不是在每一根柱线上都调用，那么数据生成就会出现错误。</p>\n<ul>\n<li><p>例1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义两个函数f1,f2</span><br><span class=\"line\">f1(a) =&gt; a[1]</span><br><span class=\"line\">f2() =&gt; close[1]</span><br><span class=\"line\">// 说明下列用法的实际意义</span><br><span class=\"line\">f1(close) 等价于 close[2]</span><br><span class=\"line\">f2() 等价于 close[1]</span><br></pre></td></tr></table></figure>\n\n<div alig=“center”>\n<img src=\"https://www.tradingview.com/pine-script-docs/en/v4/_images/Function_historical_context_1.png\">\n</div>\n\n<p>f1 传入的close 序列，需要在第一次调用后才能生成，所以f1 的 价格信息实际上比f2 晚一天</p>\n</li>\n</ul>\n<h2 id=\"变量声明-amp-语句statement\"><a href=\"#变量声明-amp-语句statement\" class=\"headerlink\" title=\"变量声明&amp;语句statement\"></a>变量声明&amp;语句statement</h2><h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h3><ul>\n<li><p>Pine 语言中变量定义的方式有两种： = 和 var</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1 // a为整形</span><br><span class=\"line\">float a = 1 // a为浮点型</span><br><span class=\"line\">var a = 0</span><br><span class=\"line\">var int a = 0</span><br><span class=\"line\">b = na //出错</span><br></pre></td></tr></table></figure>\n\n<p>变量定义的时候，需要指明变量的类型(或者 等式右侧表达式能指明类型亦可)</p>\n<p>na 没有特定的类型，所以赋值时会出错</p>\n</li>\n<li><p>var 关键词</p>\n<p>var 是用于分配和一次性初始化变量的关键词。</p>\n<p>不含var 关键词的变量在每次数据更新的时候都会覆盖变量的值。使用了var 关键词的变量，在数据更新中，可以“保持状态”。<br>举例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;Var keyword example&quot;)</span><br><span class=\"line\">var a = close</span><br><span class=\"line\">var b = 0.0</span><br><span class=\"line\">var c = 0.0</span><br><span class=\"line\">var green_bars_count = 0</span><br><span class=\"line\">if close &gt; open</span><br><span class=\"line\">\tvar x = close</span><br><span class=\"line\">\tb := x</span><br><span class=\"line\">\tgreen_bars_count := green_bars_count + 1</span><br><span class=\"line\">\tif green_bars_count &gt;= 10</span><br><span class=\"line\">\t\tvar y = close</span><br><span class=\"line\">\t\tc := y</span><br><span class=\"line\">plot(a)</span><br><span class=\"line\">plot(b)</span><br><span class=\"line\">plot(c)</span><br></pre></td></tr></table></figure>\n\n<p>变量 ‘a’ 保持系列中每个柱线的第一根柱线的收盘价。</p>\n<p>变量 ‘b’保持系列中第一个“绿色”价格棒的收盘价。</p>\n<p>变量 ‘c’保持系列中第十个“绿色”条的收盘价。</p>\n<p>即a,b,c 都是一个常数。</p>\n<p>去除var 的话，a,b,c 会随着价格变化而变化</p>\n</li>\n</ul>\n<h3 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// This code compiles</span><br><span class=\"line\">x = if close &gt; open</span><br><span class=\"line\">    close</span><br><span class=\"line\">else</span><br><span class=\"line\">    open</span><br><span class=\"line\">// This code doesn&apos;t compile</span><br><span class=\"line\">x = if close &gt; open</span><br><span class=\"line\">    close</span><br><span class=\"line\">else</span><br><span class=\"line\">    &quot;open&quot;</span><br></pre></td></tr></table></figure>\n<p>  需要注意的是，与python不同，Pine要求，then 和 else语句返回的值的类型是相同的。在上面的第二个例子中，close 和 “open” 一个是float Series，另一个是string，不同类型的话，编译会出错。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  x = if close &gt; open</span><br><span class=\"line\">    close</span><br><span class=\"line\">// If current close &gt; current open, then x = close.</span><br><span class=\"line\">// Otherwise the x = na.</span><br></pre></td></tr></table></figure>\n<p>  if 语句中可以忽略else，但是系统会默认赋值（na,false,””）</p>\n<h3 id=\"for-语句\"><a href=\"#for-语句\" class=\"headerlink\" title=\"for 语句\"></a>for 语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i = 1 to length-1</span><br><span class=\"line\">     sum := sum + price[i]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"执行模型\"><a href=\"#执行模型\" class=\"headerlink\" title=\"执行模型\"></a>执行模型</h2><p>Pine代码是根据价格信息计算的。但是价格信息并不是完整加载的，用户可以一直向左滑动图表，直到最早的一根柱子（Pro 用户可以在图表上加载10000左右，免费用户可以加载5000根柱子）</p>\n<h3 id=\"实时数据的计算\"><a href=\"#实时数据的计算\" class=\"headerlink\" title=\"实时数据的计算\"></a>实时数据的计算</h3><p>Pine指标计算实时数据的时候和计算历史数据略有不同，因为实时数据会有addtional commit(?)和rollback action(?)</p>\n<p>在实时数据的处理过程中，柱线的每一次变动都会引起Pine 指标的计算</p>\n<ul>\n<li>rollback : 在每一根柱线更新时发生</li>\n<li>commit : 在每一根柱线关闭时发生</li>\n</ul>\n<p>对于判断柱线的状态，Pine中有一系列的自建函数 barstate.* 来显示当前柱线的状态。</p>\n"},{"title":"git cheetsheet","date":"2019-11-14T11:20:00.000Z","cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191119215108.png","_content":"\n## cheetsheet\n入门级别的git 基础操作，仅仅收录理解了的，常用的命令。负责的命令，在附录的大全里面可以找到\n\n### git config\nGit 有三层的配置文件\n1. 仓库级的配置文件：在仓库的 `.git/config` 目录下，只对本仓库有效\n2. 全局级的配置文件：Mac在 `~/.gitconfig` 目录\n3. 系统级的配置文件：在Git 的 安装目录下 (经过查找，我的目录为/usr/local/Cellar/git/2.23.0_1/.bottle/etc)\n\n```bash\n# --local: 仓库级 , --glocal: 全局级 , --system: 系统级\n# 添加配置\n$ git config --global user.name \"Name\" # 添加用户名 --global 代表配置的全局的参数\n$ git config --global user.email \"email@example.com\" # 添加邮箱\n\n# 查看配置\n$ git config --list # 查看全部git配置\n$ git config --get user.name/user.email # 查看单个配置\n\n# 删除配置\n$ git config --unset user.name\n\n# 编辑配置\n$ git config -e --global\n\n# 添加别名，对于一些比较长的别名，可以简化\n# 也可以通过git config \n$ git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n$ git config --global alias.graph \"log --graph --oneline\"\n```\n### git init\n```bash\n$ git init  # 创建空的git代码库\n$ git init Myfolder # 创建文件夹Myfolder，并创建git代码库\n```\n### 文件（增删改提）\n#### git add 增\n```bash\n# 把指定的文件添加到暂存区中\n$ git add <文件路径>\n\n# 添加所有修改、已删除的文件到暂存区中\n$ git add -u [<文件路径>]\n$ git add --update [<文件路径>]\n\n# 添加所有修改、已删除、新增的文件到暂存区中，省略 <文件路径> 即为当前目录\n$ git add -A [<文件路径>]\n$ git add --all [<文件路径>]\n$ git add .  # 当前目录（递归子目录）\n\n# 查看所有修改、已删除但没有提交的文件，进入一个子命令系统\n$ git add -i [<文件路径>]\n$ git add --interactive [<文件路径>]\n\n```\n\n#### git commit 提交\n```bash\n# 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息\n$ git commit\n\n# 把暂存区中的文件提交到本地仓库中并添加描述信息\n$ git commit -m \"<提交的描述信息>\"\n\n# 把所有修改、已删除的文件提交到本地仓库中\n# 不包括未被版本库跟踪的文件，等同于先调用了 \"git add -u\"\n$ git commit -a -m \"<提交的描述信息>\"\n\n# 修改上次提交的描述信息\n$ git commit --amend -m \"desc\"\n\n# 拿372a* 提交的信息（作者、提交者、注释、时间戳等）来提交当前修改\n$ git commit -c 372a\n```\n\n#### git reset 还原\n\n```bash\n# 重置暂存区，但文件不受影响\n# 相当于将用 \"git add\" 命令更新到暂存区的内容撤出暂存区，可以指定文件\n# 没有指定 commit ID 则默认为当前 HEAD\n# 丢弃暂存区中的所有文件的修改（工作区不受影响）\n$ git reset \n$ git reset --mixed \n\n$ git reset <文件路径,commit ID>\n$ git reset --mixed  <文件路径,commit ID>\n\n$ git reset --hard HEAD^ # 回到上一个版本（HEAD: 当前版本，HEAD^: 上一个版本，HEAD~100: 往上100个版本）\n$ git reset --hard 1234567 # 回到指定版本号commit id（此处：commit id 假设为1234567******，Git会根据commit id的前几位自动寻找对应的版本）\n\n$ git reflog # 查看命令历史\n```\n\n####  git revert 反做\n\n```bash\n# 生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。\n$ git revert <commit ID>\n```\n比较一下 git revert 和 git reset 的区别：\n\ngit reset是把HEAD向后移动来删除提交，而git revert是用一次新的提交来回滚之前的提交（HEAD会继续前进）。下面一幅图比较形象生动。\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191115001540.png)\n\n\n\n关于git 的版本回退的问题，[廖雪峰的博客：时光穿梭机](https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192)已经讲的很好了，我们可以通过`git log` 查看“当前”版本库的状态，但是如何查看“未来”的版本库呢？可以通过`git reflog` 查看。\n\n#### git remove 删除\n\n```bash\n# 删除工作区文件，若文件在工作区或缓存区中有修改，会失败\n$ git rm <文件路径>\n$ git rm -f <文件路径> # 无论有没有在工作区或暂存区修改，强制删除\n$ git rm --cached <文件路径> # 移除暂存区的文件，在本地仓库的文件夹中保留该文件\n$ git rm -r <文件夹路径> # 移除文件夹\n```\n\n#### git checkout  恢复\n\n```bash\n# 当在暂存区中有修改时，使用暂存区中的修改覆盖工作区中的 <文件路径>\n# 当不在暂存区中时，使用本地版本库中的HEAD指针处的修改覆盖工作区中的<文件路径>\n$ git checkout -- <文件路径>\n# 用本地版本库中 HEAD处提交的文件，覆盖 暂存区和工作区的文件\n$ git checkout HEAD <文件路径>\n# 用本地版本库中 93ef处提交的文件，覆盖 暂存区和工作区的文件\n$ git checkout 93ef <文件路径>\n\n```\n\n### git 日志与文件状态\n\n#### git status 状态\n\n```bash\n# 查看当前所处的分支暂存区和工作区的文件（会显示当前所处分支）\n# 注1：处于暂存区的文件状态:：staged(已暂存)；处于工作区的文件状态:：untrack(未跟踪)、modified(已修改)\n# 注2：工作区中的空目录不会被git追踪\n$ git status\n$ git status <branch name>\n\n# 以简短模式查看暂存区和工作区的文件\n# 会显示两列，第一列是文件的状态，第二列是对应的文件\n# 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中\n$ git status -s\n```\n\n#### git log 日志\n\n```bash\n# 打印所有的提交记录\n$ git log\n\n# 打印从第一次提交到指定的提交的记录\n$ git log <commit ID>\n$ git log -- <文件>\n\n# 打印指定数量的最新提交的记录\n$ git log -<指定的数量>\n\n# 高级功能\n# 记不住可以设置别名\n$ git log -p <文件> # 显示出每次修改的内容\n$ --graph  # 图形化的方式显示\n$ --graph --oneline # 图形化简洁模式\n$ --graph --oneline --name-only # 图像化简洁模式（只显示文件名清单）\n$ --author = leon # 限定作者leon\n$ --grep = \"test\" # 限定注释\n$ --since=\"2018-10-7\" --until='2019-10-12'\n# since,until 标记对和 after，before 标记对是等价的\n$ --after=\"2018-10-7\" --before='2018-10-12'\n$ --since=2.weeks # 最近2周的提交记录\n$ --before = \"2018-10-12\"--since=\n```\n\n#### git show 显示修改\n\n```bash\n# 统计各个提交者的次数\n$ git shortlog -sn \n# 显示修改内容(详细)\n$ git show 3a6c\n$ git show HEAD\n# 显示最近一次提交的修改内容（不显示具体的修改内容）\n$ git show --name-only HEAD \n```\n\n### 分支管理\n\n#### git branch\n\n```bash\n# 列出本地的所有分支，当前所在分支以 \"*\" 标出\n$ git branch\n\n# 列出本地的所有分支并显示最后一次提交，当前所在分支以 \"*\" 标出\n$ git branch -v\n$ git branch -r # 列出所有远程分支 cache\n$ git branch -a # 列出所有本地分支和远程分支cache\n$ git branch -av # 列出所有本地分支和远程分支cache（含简单说明）\n$ git branch -vv # 查看本地分支和远程分支cache的追踪关系\n\n# 创建新分支，新的分支基于上一次提交建立\n$ git branch <分支名>\n\n# 修改分支名称\n# 如果不指定原分支名称则为当前所在分支\n$ git branch -m [<原分支名称>] <新的分支名称>\n# 强制修改分支名称\n$ git branch -M [<原分支名称>] <新的分支名称>\n\n# 删除指定的本地分支\n# 删除的时候需要从被删除的分区切换出去\n$ git branch -d <分支名称>\n\n# 强制删除指定的本地分支\n$ git branch -D <分支名称>\n```\n\n#### git checkout 分支切换\n\n```bash\n# git 提交流程 工作区-> 暂存区 -> 版本库\n$ git checkout -- <file> # 撤销修改：1. 文件在添加到缓存区前修改，则回退到原工作区状态；2. 文件在添加到缓存区后修改，则回退到原缓存区状态。也即是将<file>撤回到最近一次git add或git commit状态（注：--表示在当前分支，如果没有，则切换到另一个分支）\n$ \n```\n\n\n\n\n\n\n\n### 远程操作\n\n#### git clone 克隆\n\n```bash\n# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下\n$ git clone <远程仓库的网址>\n\n# 指定本地仓库的目录\n$ git clone <远程仓库的网址> <本地目录>\n\n# -b 指定要克隆的分支，默认是master分支\n$ git clone <远程仓库的网址> -b <分支名称> <本地目录>\n\n# -o 设置远程仓库为origin\n$ git clone -o <orgin name > https://github.com/kekec/Test.git \n```\n\n\n\n```\n# git 基础配置\n\n\ngit status respo # 查看当前状态\ngit diff <your file> # 查看工作区的文件与暂存区文件的区别\ngit diff <your file> --cached # 查看暂存区(stage/index)的文件与分支(master)的区别\n\ngit log # 查看最近到最远的提交记录（详情: commit id + Author + Date + comment）\ngit log --pretty=oneline # 查看最近到最远的提交记录（简写：commit id + comment）\n\n\ngit remote add origin git@github.com:XXX/learngit.git # 关联一个远程仓库\ngit push -u origin master # 推送master分支到远程  -u 第一次提交使用，关联本地master分支 和 远程 master 分支，之后可以不加 -u\n\n\n# 克隆文件\n# Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快，https 每次推送都必须输入口令。\ngit clone https://github.com/XXX/learngit.git Yourfilepath # https\ngit clone git@github.com:XXX/learngit.git ./lesson01 # ssh（推荐）\n\n# 分支管理\n# Git鼓励大量使用分支\ngit branch # 查看分支\ngit branch <name> # 创建分支\ngit branch -d <name> # 删除分支\ngit checkout <name>或者git switch <name> # 切换分支\ngit checkout -b <name>或者git switch -c <name> # 创建+切换分支\ngit branch dev + git checkout dev # 等价于上面的语句 \ngit merge <name> # 合并某分支到当前分支\ngit merge --no-ff -m \"merge with no-ff\" <name> # 合并后的分支有历史记录，而Fast-Forward合并之后，分支没有历史记录\n\n# 解决冲突\ngit log --graph # 查看分支合并图\ngit log --graph --pretty=oneline --abbrev-commit // 查看分支合并缩略图\ngit checkout -b dev # 创建分支并切换\n\n# Bug 分支\ngit stash # 隐藏分支工作现场，为修复bug准备\ngit stash list # 查看隐藏的工作现场\ngit stash apply # 恢复隐藏的工作现场\ngit stash drop # 删除隐藏的工作现场\ngit stash pop # 恢复并删除工作现场，等价于 git stash apply + git stash drop\ngit stash apply stash@[1] # 可以多次stash，通过git stash list查看所有的stash，然后可以恢复到指定的隐藏的工作现场\n```\n\n团队合作分支\n\n![](https://www.liaoxuefeng.com/files/attachments/919023260793600/0)\n\n## TO DO LIST\n\n- [ ] git pull\n- [ ] git rebase\n- [ ] git 标签 \n\n## 参考资料\n- [廖雪峰git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n- [Git原理与命令大全](https://www.cnblogs.com/kekec/p/9248487.html)\n- [Git命令大全](https://www.jianshu.com/p/93318220cdce)\n\n\n\n\n\n","source":"_posts/git cheetsheet.md","raw":"---\ntitle: git cheetsheet\ndate: 2019-11-14 19:20:00\ntags: [git,日常学习笔记]\ncategories: 基础技能\ncover: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191119215108.png\n---\n\n## cheetsheet\n入门级别的git 基础操作，仅仅收录理解了的，常用的命令。负责的命令，在附录的大全里面可以找到\n\n### git config\nGit 有三层的配置文件\n1. 仓库级的配置文件：在仓库的 `.git/config` 目录下，只对本仓库有效\n2. 全局级的配置文件：Mac在 `~/.gitconfig` 目录\n3. 系统级的配置文件：在Git 的 安装目录下 (经过查找，我的目录为/usr/local/Cellar/git/2.23.0_1/.bottle/etc)\n\n```bash\n# --local: 仓库级 , --glocal: 全局级 , --system: 系统级\n# 添加配置\n$ git config --global user.name \"Name\" # 添加用户名 --global 代表配置的全局的参数\n$ git config --global user.email \"email@example.com\" # 添加邮箱\n\n# 查看配置\n$ git config --list # 查看全部git配置\n$ git config --get user.name/user.email # 查看单个配置\n\n# 删除配置\n$ git config --unset user.name\n\n# 编辑配置\n$ git config -e --global\n\n# 添加别名，对于一些比较长的别名，可以简化\n# 也可以通过git config \n$ git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n$ git config --global alias.graph \"log --graph --oneline\"\n```\n### git init\n```bash\n$ git init  # 创建空的git代码库\n$ git init Myfolder # 创建文件夹Myfolder，并创建git代码库\n```\n### 文件（增删改提）\n#### git add 增\n```bash\n# 把指定的文件添加到暂存区中\n$ git add <文件路径>\n\n# 添加所有修改、已删除的文件到暂存区中\n$ git add -u [<文件路径>]\n$ git add --update [<文件路径>]\n\n# 添加所有修改、已删除、新增的文件到暂存区中，省略 <文件路径> 即为当前目录\n$ git add -A [<文件路径>]\n$ git add --all [<文件路径>]\n$ git add .  # 当前目录（递归子目录）\n\n# 查看所有修改、已删除但没有提交的文件，进入一个子命令系统\n$ git add -i [<文件路径>]\n$ git add --interactive [<文件路径>]\n\n```\n\n#### git commit 提交\n```bash\n# 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息\n$ git commit\n\n# 把暂存区中的文件提交到本地仓库中并添加描述信息\n$ git commit -m \"<提交的描述信息>\"\n\n# 把所有修改、已删除的文件提交到本地仓库中\n# 不包括未被版本库跟踪的文件，等同于先调用了 \"git add -u\"\n$ git commit -a -m \"<提交的描述信息>\"\n\n# 修改上次提交的描述信息\n$ git commit --amend -m \"desc\"\n\n# 拿372a* 提交的信息（作者、提交者、注释、时间戳等）来提交当前修改\n$ git commit -c 372a\n```\n\n#### git reset 还原\n\n```bash\n# 重置暂存区，但文件不受影响\n# 相当于将用 \"git add\" 命令更新到暂存区的内容撤出暂存区，可以指定文件\n# 没有指定 commit ID 则默认为当前 HEAD\n# 丢弃暂存区中的所有文件的修改（工作区不受影响）\n$ git reset \n$ git reset --mixed \n\n$ git reset <文件路径,commit ID>\n$ git reset --mixed  <文件路径,commit ID>\n\n$ git reset --hard HEAD^ # 回到上一个版本（HEAD: 当前版本，HEAD^: 上一个版本，HEAD~100: 往上100个版本）\n$ git reset --hard 1234567 # 回到指定版本号commit id（此处：commit id 假设为1234567******，Git会根据commit id的前几位自动寻找对应的版本）\n\n$ git reflog # 查看命令历史\n```\n\n####  git revert 反做\n\n```bash\n# 生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。\n$ git revert <commit ID>\n```\n比较一下 git revert 和 git reset 的区别：\n\ngit reset是把HEAD向后移动来删除提交，而git revert是用一次新的提交来回滚之前的提交（HEAD会继续前进）。下面一幅图比较形象生动。\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191115001540.png)\n\n\n\n关于git 的版本回退的问题，[廖雪峰的博客：时光穿梭机](https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192)已经讲的很好了，我们可以通过`git log` 查看“当前”版本库的状态，但是如何查看“未来”的版本库呢？可以通过`git reflog` 查看。\n\n#### git remove 删除\n\n```bash\n# 删除工作区文件，若文件在工作区或缓存区中有修改，会失败\n$ git rm <文件路径>\n$ git rm -f <文件路径> # 无论有没有在工作区或暂存区修改，强制删除\n$ git rm --cached <文件路径> # 移除暂存区的文件，在本地仓库的文件夹中保留该文件\n$ git rm -r <文件夹路径> # 移除文件夹\n```\n\n#### git checkout  恢复\n\n```bash\n# 当在暂存区中有修改时，使用暂存区中的修改覆盖工作区中的 <文件路径>\n# 当不在暂存区中时，使用本地版本库中的HEAD指针处的修改覆盖工作区中的<文件路径>\n$ git checkout -- <文件路径>\n# 用本地版本库中 HEAD处提交的文件，覆盖 暂存区和工作区的文件\n$ git checkout HEAD <文件路径>\n# 用本地版本库中 93ef处提交的文件，覆盖 暂存区和工作区的文件\n$ git checkout 93ef <文件路径>\n\n```\n\n### git 日志与文件状态\n\n#### git status 状态\n\n```bash\n# 查看当前所处的分支暂存区和工作区的文件（会显示当前所处分支）\n# 注1：处于暂存区的文件状态:：staged(已暂存)；处于工作区的文件状态:：untrack(未跟踪)、modified(已修改)\n# 注2：工作区中的空目录不会被git追踪\n$ git status\n$ git status <branch name>\n\n# 以简短模式查看暂存区和工作区的文件\n# 会显示两列，第一列是文件的状态，第二列是对应的文件\n# 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中\n$ git status -s\n```\n\n#### git log 日志\n\n```bash\n# 打印所有的提交记录\n$ git log\n\n# 打印从第一次提交到指定的提交的记录\n$ git log <commit ID>\n$ git log -- <文件>\n\n# 打印指定数量的最新提交的记录\n$ git log -<指定的数量>\n\n# 高级功能\n# 记不住可以设置别名\n$ git log -p <文件> # 显示出每次修改的内容\n$ --graph  # 图形化的方式显示\n$ --graph --oneline # 图形化简洁模式\n$ --graph --oneline --name-only # 图像化简洁模式（只显示文件名清单）\n$ --author = leon # 限定作者leon\n$ --grep = \"test\" # 限定注释\n$ --since=\"2018-10-7\" --until='2019-10-12'\n# since,until 标记对和 after，before 标记对是等价的\n$ --after=\"2018-10-7\" --before='2018-10-12'\n$ --since=2.weeks # 最近2周的提交记录\n$ --before = \"2018-10-12\"--since=\n```\n\n#### git show 显示修改\n\n```bash\n# 统计各个提交者的次数\n$ git shortlog -sn \n# 显示修改内容(详细)\n$ git show 3a6c\n$ git show HEAD\n# 显示最近一次提交的修改内容（不显示具体的修改内容）\n$ git show --name-only HEAD \n```\n\n### 分支管理\n\n#### git branch\n\n```bash\n# 列出本地的所有分支，当前所在分支以 \"*\" 标出\n$ git branch\n\n# 列出本地的所有分支并显示最后一次提交，当前所在分支以 \"*\" 标出\n$ git branch -v\n$ git branch -r # 列出所有远程分支 cache\n$ git branch -a # 列出所有本地分支和远程分支cache\n$ git branch -av # 列出所有本地分支和远程分支cache（含简单说明）\n$ git branch -vv # 查看本地分支和远程分支cache的追踪关系\n\n# 创建新分支，新的分支基于上一次提交建立\n$ git branch <分支名>\n\n# 修改分支名称\n# 如果不指定原分支名称则为当前所在分支\n$ git branch -m [<原分支名称>] <新的分支名称>\n# 强制修改分支名称\n$ git branch -M [<原分支名称>] <新的分支名称>\n\n# 删除指定的本地分支\n# 删除的时候需要从被删除的分区切换出去\n$ git branch -d <分支名称>\n\n# 强制删除指定的本地分支\n$ git branch -D <分支名称>\n```\n\n#### git checkout 分支切换\n\n```bash\n# git 提交流程 工作区-> 暂存区 -> 版本库\n$ git checkout -- <file> # 撤销修改：1. 文件在添加到缓存区前修改，则回退到原工作区状态；2. 文件在添加到缓存区后修改，则回退到原缓存区状态。也即是将<file>撤回到最近一次git add或git commit状态（注：--表示在当前分支，如果没有，则切换到另一个分支）\n$ \n```\n\n\n\n\n\n\n\n### 远程操作\n\n#### git clone 克隆\n\n```bash\n# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下\n$ git clone <远程仓库的网址>\n\n# 指定本地仓库的目录\n$ git clone <远程仓库的网址> <本地目录>\n\n# -b 指定要克隆的分支，默认是master分支\n$ git clone <远程仓库的网址> -b <分支名称> <本地目录>\n\n# -o 设置远程仓库为origin\n$ git clone -o <orgin name > https://github.com/kekec/Test.git \n```\n\n\n\n```\n# git 基础配置\n\n\ngit status respo # 查看当前状态\ngit diff <your file> # 查看工作区的文件与暂存区文件的区别\ngit diff <your file> --cached # 查看暂存区(stage/index)的文件与分支(master)的区别\n\ngit log # 查看最近到最远的提交记录（详情: commit id + Author + Date + comment）\ngit log --pretty=oneline # 查看最近到最远的提交记录（简写：commit id + comment）\n\n\ngit remote add origin git@github.com:XXX/learngit.git # 关联一个远程仓库\ngit push -u origin master # 推送master分支到远程  -u 第一次提交使用，关联本地master分支 和 远程 master 分支，之后可以不加 -u\n\n\n# 克隆文件\n# Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快，https 每次推送都必须输入口令。\ngit clone https://github.com/XXX/learngit.git Yourfilepath # https\ngit clone git@github.com:XXX/learngit.git ./lesson01 # ssh（推荐）\n\n# 分支管理\n# Git鼓励大量使用分支\ngit branch # 查看分支\ngit branch <name> # 创建分支\ngit branch -d <name> # 删除分支\ngit checkout <name>或者git switch <name> # 切换分支\ngit checkout -b <name>或者git switch -c <name> # 创建+切换分支\ngit branch dev + git checkout dev # 等价于上面的语句 \ngit merge <name> # 合并某分支到当前分支\ngit merge --no-ff -m \"merge with no-ff\" <name> # 合并后的分支有历史记录，而Fast-Forward合并之后，分支没有历史记录\n\n# 解决冲突\ngit log --graph # 查看分支合并图\ngit log --graph --pretty=oneline --abbrev-commit // 查看分支合并缩略图\ngit checkout -b dev # 创建分支并切换\n\n# Bug 分支\ngit stash # 隐藏分支工作现场，为修复bug准备\ngit stash list # 查看隐藏的工作现场\ngit stash apply # 恢复隐藏的工作现场\ngit stash drop # 删除隐藏的工作现场\ngit stash pop # 恢复并删除工作现场，等价于 git stash apply + git stash drop\ngit stash apply stash@[1] # 可以多次stash，通过git stash list查看所有的stash，然后可以恢复到指定的隐藏的工作现场\n```\n\n团队合作分支\n\n![](https://www.liaoxuefeng.com/files/attachments/919023260793600/0)\n\n## TO DO LIST\n\n- [ ] git pull\n- [ ] git rebase\n- [ ] git 标签 \n\n## 参考资料\n- [廖雪峰git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n- [Git原理与命令大全](https://www.cnblogs.com/kekec/p/9248487.html)\n- [Git命令大全](https://www.jianshu.com/p/93318220cdce)\n\n\n\n\n\n","slug":"git cheetsheet","published":1,"updated":"2019-11-19T13:52:07.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3acxtjq000apw8m8xbaa7os","content":"<h2 id=\"cheetsheet\"><a href=\"#cheetsheet\" class=\"headerlink\" title=\"cheetsheet\"></a>cheetsheet</h2><p>入门级别的git 基础操作，仅仅收录理解了的，常用的命令。负责的命令，在附录的大全里面可以找到</p>\n<h3 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\"git config\"></a>git config</h3><p>Git 有三层的配置文件</p>\n<ol>\n<li>仓库级的配置文件：在仓库的 <code>.git/config</code> 目录下，只对本仓库有效</li>\n<li>全局级的配置文件：Mac在 <code>~/.gitconfig</code> 目录</li>\n<li>系统级的配置文件：在Git 的 安装目录下 (经过查找，我的目录为/usr/local/Cellar/git/2.23.0_1/.bottle/etc)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># --local: 仓库级 , --glocal: 全局级 , --system: 系统级</span></span><br><span class=\"line\"><span class=\"comment\"># 添加配置</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Name\"</span> <span class=\"comment\"># 添加用户名 --global 代表配置的全局的参数</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span> <span class=\"comment\"># 添加邮箱</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置</span></span><br><span class=\"line\">$ git config --list <span class=\"comment\"># 查看全部git配置</span></span><br><span class=\"line\">$ git config --get user.name/user.email <span class=\"comment\"># 查看单个配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除配置</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">unset</span> user.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑配置</span></span><br><span class=\"line\">$ git config -e --global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加别名，对于一些比较长的别名，可以简化</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过git config </span></span><br><span class=\"line\">$ git config --global alias.lg <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span></span><br><span class=\"line\">$ git config --global alias.graph <span class=\"string\">\"log --graph --oneline\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init  <span class=\"comment\"># 创建空的git代码库</span></span><br><span class=\"line\">$ git init Myfolder <span class=\"comment\"># 创建文件夹Myfolder，并创建git代码库</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"文件（增删改提）\"><a href=\"#文件（增删改提）\" class=\"headerlink\" title=\"文件（增删改提）\"></a>文件（增删改提）</h3><h4 id=\"git-add-增\"><a href=\"#git-add-增\" class=\"headerlink\" title=\"git add 增\"></a>git add 增</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把指定的文件添加到暂存区中</span></span><br><span class=\"line\">$ git add &lt;文件路径&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加所有修改、已删除的文件到暂存区中</span></span><br><span class=\"line\">$ git add -u [&lt;文件路径&gt;]</span><br><span class=\"line\">$ git add --update [&lt;文件路径&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span></span><br><span class=\"line\">$ git add -A [&lt;文件路径&gt;]</span><br><span class=\"line\">$ git add --all [&lt;文件路径&gt;]</span><br><span class=\"line\">$ git add .  <span class=\"comment\"># 当前目录（递归子目录）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span></span><br><span class=\"line\">$ git add -i [&lt;文件路径&gt;]</span><br><span class=\"line\">$ git add --interactive [&lt;文件路径&gt;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-commit-提交\"><a href=\"#git-commit-提交\" class=\"headerlink\" title=\"git commit 提交\"></a>git commit 提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span></span><br><span class=\"line\">$ git commit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"&lt;提交的描述信息&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把所有修改、已删除的文件提交到本地仓库中</span></span><br><span class=\"line\"><span class=\"comment\"># 不包括未被版本库跟踪的文件，等同于先调用了 \"git add -u\"</span></span><br><span class=\"line\">$ git commit -a -m <span class=\"string\">\"&lt;提交的描述信息&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改上次提交的描述信息</span></span><br><span class=\"line\">$ git commit --amend -m <span class=\"string\">\"desc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拿372a* 提交的信息（作者、提交者、注释、时间戳等）来提交当前修改</span></span><br><span class=\"line\">$ git commit -c 372a</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-reset-还原\"><a href=\"#git-reset-还原\" class=\"headerlink\" title=\"git reset 还原\"></a>git reset 还原</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重置暂存区，但文件不受影响</span></span><br><span class=\"line\"><span class=\"comment\"># 相当于将用 \"git add\" 命令更新到暂存区的内容撤出暂存区，可以指定文件</span></span><br><span class=\"line\"><span class=\"comment\"># 没有指定 commit ID 则默认为当前 HEAD</span></span><br><span class=\"line\"><span class=\"comment\"># 丢弃暂存区中的所有文件的修改（工作区不受影响）</span></span><br><span class=\"line\">$ git reset </span><br><span class=\"line\">$ git reset --mixed </span><br><span class=\"line\"></span><br><span class=\"line\">$ git reset &lt;文件路径,commit ID&gt;</span><br><span class=\"line\">$ git reset --mixed  &lt;文件路径,commit ID&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$ git reset --hard HEAD^ <span class=\"comment\"># 回到上一个版本（HEAD: 当前版本，HEAD^: 上一个版本，HEAD~100: 往上100个版本）</span></span><br><span class=\"line\">$ git reset --hard 1234567 <span class=\"comment\"># 回到指定版本号commit id（此处：commit id 假设为1234567******，Git会根据commit id的前几位自动寻找对应的版本）</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git reflog <span class=\"comment\"># 查看命令历史</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-revert-反做\"><a href=\"#git-revert-反做\" class=\"headerlink\" title=\"git revert 反做\"></a>git revert 反做</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</span></span><br><span class=\"line\">$ git revert &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>\n<p>比较一下 git revert 和 git reset 的区别：</p>\n<p>git reset是把HEAD向后移动来删除提交，而git revert是用一次新的提交来回滚之前的提交（HEAD会继续前进）。下面一幅图比较形象生动。</p>\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191115001540.png\" class=\"lozad\"></p>\n<p>关于git 的版本回退的问题，<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192\" target=\"_blank\" rel=\"noopener\">廖雪峰的博客：时光穿梭机</a>已经讲的很好了，我们可以通过<code>git log</code> 查看“当前”版本库的状态，但是如何查看“未来”的版本库呢？可以通过<code>git reflog</code> 查看。</p>\n<h4 id=\"git-remove-删除\"><a href=\"#git-remove-删除\" class=\"headerlink\" title=\"git remove 删除\"></a>git remove 删除</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除工作区文件，若文件在工作区或缓存区中有修改，会失败</span></span><br><span class=\"line\">$ git rm &lt;文件路径&gt;</span><br><span class=\"line\">$ git rm -f &lt;文件路径&gt; <span class=\"comment\"># 无论有没有在工作区或暂存区修改，强制删除</span></span><br><span class=\"line\">$ git rm --cached &lt;文件路径&gt; <span class=\"comment\"># 移除暂存区的文件，在本地仓库的文件夹中保留该文件</span></span><br><span class=\"line\">$ git rm -r &lt;文件夹路径&gt; <span class=\"comment\"># 移除文件夹</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-checkout-恢复\"><a href=\"#git-checkout-恢复\" class=\"headerlink\" title=\"git checkout  恢复\"></a>git checkout  恢复</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当在暂存区中有修改时，使用暂存区中的修改覆盖工作区中的 &lt;文件路径&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 当不在暂存区中时，使用本地版本库中的HEAD指针处的修改覆盖工作区中的&lt;文件路径&gt;</span></span><br><span class=\"line\">$ git checkout -- &lt;文件路径&gt;</span><br><span class=\"line\"><span class=\"comment\"># 用本地版本库中 HEAD处提交的文件，覆盖 暂存区和工作区的文件</span></span><br><span class=\"line\">$ git checkout HEAD &lt;文件路径&gt;</span><br><span class=\"line\"><span class=\"comment\"># 用本地版本库中 93ef处提交的文件，覆盖 暂存区和工作区的文件</span></span><br><span class=\"line\">$ git checkout 93ef &lt;文件路径&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-日志与文件状态\"><a href=\"#git-日志与文件状态\" class=\"headerlink\" title=\"git 日志与文件状态\"></a>git 日志与文件状态</h3><h4 id=\"git-status-状态\"><a href=\"#git-status-状态\" class=\"headerlink\" title=\"git status 状态\"></a>git status 状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前所处的分支暂存区和工作区的文件（会显示当前所处分支）</span></span><br><span class=\"line\"><span class=\"comment\"># 注1：处于暂存区的文件状态:：staged(已暂存)；处于工作区的文件状态:：untrack(未跟踪)、modified(已修改)</span></span><br><span class=\"line\"><span class=\"comment\"># 注2：工作区中的空目录不会被git追踪</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git status &lt;branch name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以简短模式查看暂存区和工作区的文件</span></span><br><span class=\"line\"><span class=\"comment\"># 会显示两列，第一列是文件的状态，第二列是对应的文件</span></span><br><span class=\"line\"><span class=\"comment\"># 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中</span></span><br><span class=\"line\">$ git status -s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-log-日志\"><a href=\"#git-log-日志\" class=\"headerlink\" title=\"git log 日志\"></a>git log 日志</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印所有的提交记录</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印从第一次提交到指定的提交的记录</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> &lt;commit ID&gt;</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -- &lt;文件&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印指定数量的最新提交的记录</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -&lt;指定的数量&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 高级功能</span></span><br><span class=\"line\"><span class=\"comment\"># 记不住可以设置别名</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p &lt;文件&gt; <span class=\"comment\"># 显示出每次修改的内容</span></span><br><span class=\"line\">$ --graph  <span class=\"comment\"># 图形化的方式显示</span></span><br><span class=\"line\">$ --graph --oneline <span class=\"comment\"># 图形化简洁模式</span></span><br><span class=\"line\">$ --graph --oneline --name-only <span class=\"comment\"># 图像化简洁模式（只显示文件名清单）</span></span><br><span class=\"line\">$ --author = leon <span class=\"comment\"># 限定作者leon</span></span><br><span class=\"line\">$ --grep = <span class=\"string\">\"test\"</span> <span class=\"comment\"># 限定注释</span></span><br><span class=\"line\">$ --since=<span class=\"string\">\"2018-10-7\"</span> --until=<span class=\"string\">'2019-10-12'</span></span><br><span class=\"line\"><span class=\"comment\"># since,until 标记对和 after，before 标记对是等价的</span></span><br><span class=\"line\">$ --after=<span class=\"string\">\"2018-10-7\"</span> --before=<span class=\"string\">'2018-10-12'</span></span><br><span class=\"line\">$ --since=2.weeks <span class=\"comment\"># 最近2周的提交记录</span></span><br><span class=\"line\">$ --before = <span class=\"string\">\"2018-10-12\"</span>--since=</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-show-显示修改\"><a href=\"#git-show-显示修改\" class=\"headerlink\" title=\"git show 显示修改\"></a>git show 显示修改</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计各个提交者的次数</span></span><br><span class=\"line\">$ git shortlog -sn </span><br><span class=\"line\"><span class=\"comment\"># 显示修改内容(详细)</span></span><br><span class=\"line\">$ git show 3a6c</span><br><span class=\"line\">$ git show HEAD</span><br><span class=\"line\"><span class=\"comment\"># 显示最近一次提交的修改内容（不显示具体的修改内容）</span></span><br><span class=\"line\">$ git show --name-only HEAD</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><h4 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出本地的所有分支，当前所在分支以 \"*\" 标出</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 \"*\" 标出</span></span><br><span class=\"line\">$ git branch -v</span><br><span class=\"line\">$ git branch -r <span class=\"comment\"># 列出所有远程分支 cache</span></span><br><span class=\"line\">$ git branch -a <span class=\"comment\"># 列出所有本地分支和远程分支cache</span></span><br><span class=\"line\">$ git branch -av <span class=\"comment\"># 列出所有本地分支和远程分支cache（含简单说明）</span></span><br><span class=\"line\">$ git branch -vv <span class=\"comment\"># 查看本地分支和远程分支cache的追踪关系</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新分支，新的分支基于上一次提交建立</span></span><br><span class=\"line\">$ git branch &lt;分支名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改分支名称</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不指定原分支名称则为当前所在分支</span></span><br><span class=\"line\">$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class=\"line\"><span class=\"comment\"># 强制修改分支名称</span></span><br><span class=\"line\">$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除指定的本地分支</span></span><br><span class=\"line\"><span class=\"comment\"># 删除的时候需要从被删除的分区切换出去</span></span><br><span class=\"line\">$ git branch -d &lt;分支名称&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制删除指定的本地分支</span></span><br><span class=\"line\">$ git branch -D &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-checkout-分支切换\"><a href=\"#git-checkout-分支切换\" class=\"headerlink\" title=\"git checkout 分支切换\"></a>git checkout 分支切换</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git 提交流程 工作区-&gt; 暂存区 -&gt; 版本库</span></span><br><span class=\"line\">$ git checkout -- &lt;file&gt; <span class=\"comment\"># 撤销修改：1. 文件在添加到缓存区前修改，则回退到原工作区状态；2. 文件在添加到缓存区后修改，则回退到原缓存区状态。也即是将&lt;file&gt;撤回到最近一次git add或git commit状态（注：--表示在当前分支，如果没有，则切换到另一个分支）</span></span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h3><h4 id=\"git-clone-克隆\"><a href=\"#git-clone-克隆\" class=\"headerlink\" title=\"git clone 克隆\"></a>git clone 克隆</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;远程仓库的网址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定本地仓库的目录</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;远程仓库的网址&gt; &lt;本地目录&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -b 指定要克隆的分支，默认是master分支</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -o 设置远程仓库为origin</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> -o &lt;orgin name &gt; https://github.com/kekec/Test.git</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># git 基础配置</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git status respo # 查看当前状态</span><br><span class=\"line\">git diff &lt;your file&gt; # 查看工作区的文件与暂存区文件的区别</span><br><span class=\"line\">git diff &lt;your file&gt; --cached # 查看暂存区(stage/index)的文件与分支(master)的区别</span><br><span class=\"line\"></span><br><span class=\"line\">git log # 查看最近到最远的提交记录（详情: commit id + Author + Date + comment）</span><br><span class=\"line\">git log --pretty=oneline # 查看最近到最远的提交记录（简写：commit id + comment）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:XXX/learngit.git # 关联一个远程仓库</span><br><span class=\"line\">git push -u origin master # 推送master分支到远程  -u 第一次提交使用，关联本地master分支 和 远程 master 分支，之后可以不加 -u</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 克隆文件</span><br><span class=\"line\"># Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快，https 每次推送都必须输入口令。</span><br><span class=\"line\">git clone https://github.com/XXX/learngit.git Yourfilepath # https</span><br><span class=\"line\">git clone git@github.com:XXX/learngit.git ./lesson01 # ssh（推荐）</span><br><span class=\"line\"></span><br><span class=\"line\"># 分支管理</span><br><span class=\"line\"># Git鼓励大量使用分支</span><br><span class=\"line\">git branch # 查看分支</span><br><span class=\"line\">git branch &lt;name&gt; # 创建分支</span><br><span class=\"line\">git branch -d &lt;name&gt; # 删除分支</span><br><span class=\"line\">git checkout &lt;name&gt;或者git switch &lt;name&gt; # 切换分支</span><br><span class=\"line\">git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt; # 创建+切换分支</span><br><span class=\"line\">git branch dev + git checkout dev # 等价于上面的语句 </span><br><span class=\"line\">git merge &lt;name&gt; # 合并某分支到当前分支</span><br><span class=\"line\">git merge --no-ff -m &quot;merge with no-ff&quot; &lt;name&gt; # 合并后的分支有历史记录，而Fast-Forward合并之后，分支没有历史记录</span><br><span class=\"line\"></span><br><span class=\"line\"># 解决冲突</span><br><span class=\"line\">git log --graph # 查看分支合并图</span><br><span class=\"line\">git log --graph --pretty=oneline --abbrev-commit // 查看分支合并缩略图</span><br><span class=\"line\">git checkout -b dev # 创建分支并切换</span><br><span class=\"line\"></span><br><span class=\"line\"># Bug 分支</span><br><span class=\"line\">git stash # 隐藏分支工作现场，为修复bug准备</span><br><span class=\"line\">git stash list # 查看隐藏的工作现场</span><br><span class=\"line\">git stash apply # 恢复隐藏的工作现场</span><br><span class=\"line\">git stash drop # 删除隐藏的工作现场</span><br><span class=\"line\">git stash pop # 恢复并删除工作现场，等价于 git stash apply + git stash drop</span><br><span class=\"line\">git stash apply stash@[1] # 可以多次stash，通过git stash list查看所有的stash，然后可以恢复到指定的隐藏的工作现场</span><br></pre></td></tr></table></figure>\n\n<p>团队合作分支</p>\n<p><img alt data-src=\"https://www.liaoxuefeng.com/files/attachments/919023260793600/0\" class=\"lozad\"></p>\n<h2 id=\"TO-DO-LIST\"><a href=\"#TO-DO-LIST\" class=\"headerlink\" title=\"TO DO LIST\"></a>TO DO LIST</h2><ul>\n<li><input disabled type=\"checkbox\"> git pull</li>\n<li><input disabled type=\"checkbox\"> git rebase</li>\n<li><input disabled type=\"checkbox\"> git 标签 </li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰git教程</a></li>\n<li><a href=\"https://www.cnblogs.com/kekec/p/9248487.html\" target=\"_blank\" rel=\"noopener\">Git原理与命令大全</a></li>\n<li><a href=\"https://www.jianshu.com/p/93318220cdce\" target=\"_blank\" rel=\"noopener\">Git命令大全</a></li>\n</ul>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"excerpt":"","more":"<h2 id=\"cheetsheet\"><a href=\"#cheetsheet\" class=\"headerlink\" title=\"cheetsheet\"></a>cheetsheet</h2><p>入门级别的git 基础操作，仅仅收录理解了的，常用的命令。负责的命令，在附录的大全里面可以找到</p>\n<h3 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\"git config\"></a>git config</h3><p>Git 有三层的配置文件</p>\n<ol>\n<li>仓库级的配置文件：在仓库的 <code>.git/config</code> 目录下，只对本仓库有效</li>\n<li>全局级的配置文件：Mac在 <code>~/.gitconfig</code> 目录</li>\n<li>系统级的配置文件：在Git 的 安装目录下 (经过查找，我的目录为/usr/local/Cellar/git/2.23.0_1/.bottle/etc)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># --local: 仓库级 , --glocal: 全局级 , --system: 系统级</span></span><br><span class=\"line\"><span class=\"comment\"># 添加配置</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Name\"</span> <span class=\"comment\"># 添加用户名 --global 代表配置的全局的参数</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span> <span class=\"comment\"># 添加邮箱</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置</span></span><br><span class=\"line\">$ git config --list <span class=\"comment\"># 查看全部git配置</span></span><br><span class=\"line\">$ git config --get user.name/user.email <span class=\"comment\"># 查看单个配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除配置</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">unset</span> user.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑配置</span></span><br><span class=\"line\">$ git config -e --global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加别名，对于一些比较长的别名，可以简化</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过git config </span></span><br><span class=\"line\">$ git config --global alias.lg <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span></span><br><span class=\"line\">$ git config --global alias.graph <span class=\"string\">\"log --graph --oneline\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init  <span class=\"comment\"># 创建空的git代码库</span></span><br><span class=\"line\">$ git init Myfolder <span class=\"comment\"># 创建文件夹Myfolder，并创建git代码库</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"文件（增删改提）\"><a href=\"#文件（增删改提）\" class=\"headerlink\" title=\"文件（增删改提）\"></a>文件（增删改提）</h3><h4 id=\"git-add-增\"><a href=\"#git-add-增\" class=\"headerlink\" title=\"git add 增\"></a>git add 增</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把指定的文件添加到暂存区中</span></span><br><span class=\"line\">$ git add &lt;文件路径&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加所有修改、已删除的文件到暂存区中</span></span><br><span class=\"line\">$ git add -u [&lt;文件路径&gt;]</span><br><span class=\"line\">$ git add --update [&lt;文件路径&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span></span><br><span class=\"line\">$ git add -A [&lt;文件路径&gt;]</span><br><span class=\"line\">$ git add --all [&lt;文件路径&gt;]</span><br><span class=\"line\">$ git add .  <span class=\"comment\"># 当前目录（递归子目录）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span></span><br><span class=\"line\">$ git add -i [&lt;文件路径&gt;]</span><br><span class=\"line\">$ git add --interactive [&lt;文件路径&gt;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-commit-提交\"><a href=\"#git-commit-提交\" class=\"headerlink\" title=\"git commit 提交\"></a>git commit 提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span></span><br><span class=\"line\">$ git commit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"&lt;提交的描述信息&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把所有修改、已删除的文件提交到本地仓库中</span></span><br><span class=\"line\"><span class=\"comment\"># 不包括未被版本库跟踪的文件，等同于先调用了 \"git add -u\"</span></span><br><span class=\"line\">$ git commit -a -m <span class=\"string\">\"&lt;提交的描述信息&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改上次提交的描述信息</span></span><br><span class=\"line\">$ git commit --amend -m <span class=\"string\">\"desc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拿372a* 提交的信息（作者、提交者、注释、时间戳等）来提交当前修改</span></span><br><span class=\"line\">$ git commit -c 372a</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-reset-还原\"><a href=\"#git-reset-还原\" class=\"headerlink\" title=\"git reset 还原\"></a>git reset 还原</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重置暂存区，但文件不受影响</span></span><br><span class=\"line\"><span class=\"comment\"># 相当于将用 \"git add\" 命令更新到暂存区的内容撤出暂存区，可以指定文件</span></span><br><span class=\"line\"><span class=\"comment\"># 没有指定 commit ID 则默认为当前 HEAD</span></span><br><span class=\"line\"><span class=\"comment\"># 丢弃暂存区中的所有文件的修改（工作区不受影响）</span></span><br><span class=\"line\">$ git reset </span><br><span class=\"line\">$ git reset --mixed </span><br><span class=\"line\"></span><br><span class=\"line\">$ git reset &lt;文件路径,commit ID&gt;</span><br><span class=\"line\">$ git reset --mixed  &lt;文件路径,commit ID&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$ git reset --hard HEAD^ <span class=\"comment\"># 回到上一个版本（HEAD: 当前版本，HEAD^: 上一个版本，HEAD~100: 往上100个版本）</span></span><br><span class=\"line\">$ git reset --hard 1234567 <span class=\"comment\"># 回到指定版本号commit id（此处：commit id 假设为1234567******，Git会根据commit id的前几位自动寻找对应的版本）</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git reflog <span class=\"comment\"># 查看命令历史</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-revert-反做\"><a href=\"#git-revert-反做\" class=\"headerlink\" title=\"git revert 反做\"></a>git revert 反做</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</span></span><br><span class=\"line\">$ git revert &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>\n<p>比较一下 git revert 和 git reset 的区别：</p>\n<p>git reset是把HEAD向后移动来删除提交，而git revert是用一次新的提交来回滚之前的提交（HEAD会继续前进）。下面一幅图比较形象生动。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191115001540.png\" alt=\"\"></p>\n<p>关于git 的版本回退的问题，<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192\" target=\"_blank\" rel=\"noopener\">廖雪峰的博客：时光穿梭机</a>已经讲的很好了，我们可以通过<code>git log</code> 查看“当前”版本库的状态，但是如何查看“未来”的版本库呢？可以通过<code>git reflog</code> 查看。</p>\n<h4 id=\"git-remove-删除\"><a href=\"#git-remove-删除\" class=\"headerlink\" title=\"git remove 删除\"></a>git remove 删除</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除工作区文件，若文件在工作区或缓存区中有修改，会失败</span></span><br><span class=\"line\">$ git rm &lt;文件路径&gt;</span><br><span class=\"line\">$ git rm -f &lt;文件路径&gt; <span class=\"comment\"># 无论有没有在工作区或暂存区修改，强制删除</span></span><br><span class=\"line\">$ git rm --cached &lt;文件路径&gt; <span class=\"comment\"># 移除暂存区的文件，在本地仓库的文件夹中保留该文件</span></span><br><span class=\"line\">$ git rm -r &lt;文件夹路径&gt; <span class=\"comment\"># 移除文件夹</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-checkout-恢复\"><a href=\"#git-checkout-恢复\" class=\"headerlink\" title=\"git checkout  恢复\"></a>git checkout  恢复</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当在暂存区中有修改时，使用暂存区中的修改覆盖工作区中的 &lt;文件路径&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 当不在暂存区中时，使用本地版本库中的HEAD指针处的修改覆盖工作区中的&lt;文件路径&gt;</span></span><br><span class=\"line\">$ git checkout -- &lt;文件路径&gt;</span><br><span class=\"line\"><span class=\"comment\"># 用本地版本库中 HEAD处提交的文件，覆盖 暂存区和工作区的文件</span></span><br><span class=\"line\">$ git checkout HEAD &lt;文件路径&gt;</span><br><span class=\"line\"><span class=\"comment\"># 用本地版本库中 93ef处提交的文件，覆盖 暂存区和工作区的文件</span></span><br><span class=\"line\">$ git checkout 93ef &lt;文件路径&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-日志与文件状态\"><a href=\"#git-日志与文件状态\" class=\"headerlink\" title=\"git 日志与文件状态\"></a>git 日志与文件状态</h3><h4 id=\"git-status-状态\"><a href=\"#git-status-状态\" class=\"headerlink\" title=\"git status 状态\"></a>git status 状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前所处的分支暂存区和工作区的文件（会显示当前所处分支）</span></span><br><span class=\"line\"><span class=\"comment\"># 注1：处于暂存区的文件状态:：staged(已暂存)；处于工作区的文件状态:：untrack(未跟踪)、modified(已修改)</span></span><br><span class=\"line\"><span class=\"comment\"># 注2：工作区中的空目录不会被git追踪</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">$ git status &lt;branch name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以简短模式查看暂存区和工作区的文件</span></span><br><span class=\"line\"><span class=\"comment\"># 会显示两列，第一列是文件的状态，第二列是对应的文件</span></span><br><span class=\"line\"><span class=\"comment\"># 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中</span></span><br><span class=\"line\">$ git status -s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-log-日志\"><a href=\"#git-log-日志\" class=\"headerlink\" title=\"git log 日志\"></a>git log 日志</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印所有的提交记录</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印从第一次提交到指定的提交的记录</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> &lt;commit ID&gt;</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -- &lt;文件&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印指定数量的最新提交的记录</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -&lt;指定的数量&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 高级功能</span></span><br><span class=\"line\"><span class=\"comment\"># 记不住可以设置别名</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p &lt;文件&gt; <span class=\"comment\"># 显示出每次修改的内容</span></span><br><span class=\"line\">$ --graph  <span class=\"comment\"># 图形化的方式显示</span></span><br><span class=\"line\">$ --graph --oneline <span class=\"comment\"># 图形化简洁模式</span></span><br><span class=\"line\">$ --graph --oneline --name-only <span class=\"comment\"># 图像化简洁模式（只显示文件名清单）</span></span><br><span class=\"line\">$ --author = leon <span class=\"comment\"># 限定作者leon</span></span><br><span class=\"line\">$ --grep = <span class=\"string\">\"test\"</span> <span class=\"comment\"># 限定注释</span></span><br><span class=\"line\">$ --since=<span class=\"string\">\"2018-10-7\"</span> --until=<span class=\"string\">'2019-10-12'</span></span><br><span class=\"line\"><span class=\"comment\"># since,until 标记对和 after，before 标记对是等价的</span></span><br><span class=\"line\">$ --after=<span class=\"string\">\"2018-10-7\"</span> --before=<span class=\"string\">'2018-10-12'</span></span><br><span class=\"line\">$ --since=2.weeks <span class=\"comment\"># 最近2周的提交记录</span></span><br><span class=\"line\">$ --before = <span class=\"string\">\"2018-10-12\"</span>--since=</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-show-显示修改\"><a href=\"#git-show-显示修改\" class=\"headerlink\" title=\"git show 显示修改\"></a>git show 显示修改</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计各个提交者的次数</span></span><br><span class=\"line\">$ git shortlog -sn </span><br><span class=\"line\"><span class=\"comment\"># 显示修改内容(详细)</span></span><br><span class=\"line\">$ git show 3a6c</span><br><span class=\"line\">$ git show HEAD</span><br><span class=\"line\"><span class=\"comment\"># 显示最近一次提交的修改内容（不显示具体的修改内容）</span></span><br><span class=\"line\">$ git show --name-only HEAD</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><h4 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出本地的所有分支，当前所在分支以 \"*\" 标出</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 \"*\" 标出</span></span><br><span class=\"line\">$ git branch -v</span><br><span class=\"line\">$ git branch -r <span class=\"comment\"># 列出所有远程分支 cache</span></span><br><span class=\"line\">$ git branch -a <span class=\"comment\"># 列出所有本地分支和远程分支cache</span></span><br><span class=\"line\">$ git branch -av <span class=\"comment\"># 列出所有本地分支和远程分支cache（含简单说明）</span></span><br><span class=\"line\">$ git branch -vv <span class=\"comment\"># 查看本地分支和远程分支cache的追踪关系</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新分支，新的分支基于上一次提交建立</span></span><br><span class=\"line\">$ git branch &lt;分支名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改分支名称</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不指定原分支名称则为当前所在分支</span></span><br><span class=\"line\">$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class=\"line\"><span class=\"comment\"># 强制修改分支名称</span></span><br><span class=\"line\">$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除指定的本地分支</span></span><br><span class=\"line\"><span class=\"comment\"># 删除的时候需要从被删除的分区切换出去</span></span><br><span class=\"line\">$ git branch -d &lt;分支名称&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制删除指定的本地分支</span></span><br><span class=\"line\">$ git branch -D &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"git-checkout-分支切换\"><a href=\"#git-checkout-分支切换\" class=\"headerlink\" title=\"git checkout 分支切换\"></a>git checkout 分支切换</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git 提交流程 工作区-&gt; 暂存区 -&gt; 版本库</span></span><br><span class=\"line\">$ git checkout -- &lt;file&gt; <span class=\"comment\"># 撤销修改：1. 文件在添加到缓存区前修改，则回退到原工作区状态；2. 文件在添加到缓存区后修改，则回退到原缓存区状态。也即是将&lt;file&gt;撤回到最近一次git add或git commit状态（注：--表示在当前分支，如果没有，则切换到另一个分支）</span></span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h3><h4 id=\"git-clone-克隆\"><a href=\"#git-clone-克隆\" class=\"headerlink\" title=\"git clone 克隆\"></a>git clone 克隆</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;远程仓库的网址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定本地仓库的目录</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;远程仓库的网址&gt; &lt;本地目录&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -b 指定要克隆的分支，默认是master分支</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -o 设置远程仓库为origin</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> -o &lt;orgin name &gt; https://github.com/kekec/Test.git</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># git 基础配置</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git status respo # 查看当前状态</span><br><span class=\"line\">git diff &lt;your file&gt; # 查看工作区的文件与暂存区文件的区别</span><br><span class=\"line\">git diff &lt;your file&gt; --cached # 查看暂存区(stage/index)的文件与分支(master)的区别</span><br><span class=\"line\"></span><br><span class=\"line\">git log # 查看最近到最远的提交记录（详情: commit id + Author + Date + comment）</span><br><span class=\"line\">git log --pretty=oneline # 查看最近到最远的提交记录（简写：commit id + comment）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:XXX/learngit.git # 关联一个远程仓库</span><br><span class=\"line\">git push -u origin master # 推送master分支到远程  -u 第一次提交使用，关联本地master分支 和 远程 master 分支，之后可以不加 -u</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 克隆文件</span><br><span class=\"line\"># Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快，https 每次推送都必须输入口令。</span><br><span class=\"line\">git clone https://github.com/XXX/learngit.git Yourfilepath # https</span><br><span class=\"line\">git clone git@github.com:XXX/learngit.git ./lesson01 # ssh（推荐）</span><br><span class=\"line\"></span><br><span class=\"line\"># 分支管理</span><br><span class=\"line\"># Git鼓励大量使用分支</span><br><span class=\"line\">git branch # 查看分支</span><br><span class=\"line\">git branch &lt;name&gt; # 创建分支</span><br><span class=\"line\">git branch -d &lt;name&gt; # 删除分支</span><br><span class=\"line\">git checkout &lt;name&gt;或者git switch &lt;name&gt; # 切换分支</span><br><span class=\"line\">git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt; # 创建+切换分支</span><br><span class=\"line\">git branch dev + git checkout dev # 等价于上面的语句 </span><br><span class=\"line\">git merge &lt;name&gt; # 合并某分支到当前分支</span><br><span class=\"line\">git merge --no-ff -m &quot;merge with no-ff&quot; &lt;name&gt; # 合并后的分支有历史记录，而Fast-Forward合并之后，分支没有历史记录</span><br><span class=\"line\"></span><br><span class=\"line\"># 解决冲突</span><br><span class=\"line\">git log --graph # 查看分支合并图</span><br><span class=\"line\">git log --graph --pretty=oneline --abbrev-commit // 查看分支合并缩略图</span><br><span class=\"line\">git checkout -b dev # 创建分支并切换</span><br><span class=\"line\"></span><br><span class=\"line\"># Bug 分支</span><br><span class=\"line\">git stash # 隐藏分支工作现场，为修复bug准备</span><br><span class=\"line\">git stash list # 查看隐藏的工作现场</span><br><span class=\"line\">git stash apply # 恢复隐藏的工作现场</span><br><span class=\"line\">git stash drop # 删除隐藏的工作现场</span><br><span class=\"line\">git stash pop # 恢复并删除工作现场，等价于 git stash apply + git stash drop</span><br><span class=\"line\">git stash apply stash@[1] # 可以多次stash，通过git stash list查看所有的stash，然后可以恢复到指定的隐藏的工作现场</span><br></pre></td></tr></table></figure>\n\n<p>团队合作分支</p>\n<p><img src=\"https://www.liaoxuefeng.com/files/attachments/919023260793600/0\" alt=\"\"></p>\n<h2 id=\"TO-DO-LIST\"><a href=\"#TO-DO-LIST\" class=\"headerlink\" title=\"TO DO LIST\"></a>TO DO LIST</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> git pull</li>\n<li><input disabled=\"\" type=\"checkbox\"> git rebase</li>\n<li><input disabled=\"\" type=\"checkbox\"> git 标签 </li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰git教程</a></li>\n<li><a href=\"https://www.cnblogs.com/kekec/p/9248487.html\" target=\"_blank\" rel=\"noopener\">Git原理与命令大全</a></li>\n<li><a href=\"https://www.jianshu.com/p/93318220cdce\" target=\"_blank\" rel=\"noopener\">Git命令大全</a></li>\n</ul>\n"},{"title":"博客第一贴：Hexo 搭建","date":"2019-10-27T13:46:00.000Z","cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031005140.png","_content":"\n# Hexo 博客搭建\n\n> CodeSheep 学习笔记\n\nHexo 是一款基于node.js 的静态博库框架，而且可以可以方便的托管在Github 上（ 正好B站 up 主 :程序羊也推荐了）， 所以也正好简单记录一下Hexo 的安装配置过程\n\n## 参考文档\n\n不少博客已经总结的很好了，所以提前放上人家的地址\n\n[hexo教程：github page+独立域名搭建(1)](http://fangzh.top/2018/2018090514/)\n\n[hexo从零开始到搭建完整](https://www.cnblogs.com/visugar/p/6821777.html)\n\n## 本地搭建hexo博客\n\n### 下载node.js \n\n 官网下载LTS版本，直接安装\n\n### npm 安装hexo\n\n注意：切换为 root 账号操作    ```su```  ,切换淘宝源 cnpm,会更加快\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n安装hexo `cnpm install hexo-cli -g` \n\n安装完后用`hexo -v` 查看一下是否安装成功\n\n### 启动hexo\n\n在目录下创建 blog 文件夹  `mkdir blog` ,进入 `cd blog`\n\n**初始化hexo** \n\n```bash\nsudo hexo init\n```\n\n出现 `INFO  Start blogging with Hexo!`  表示安装完成\n\n**启动hexo** \n\n```bash\nhexo server / hexo s\n```\n\n### 写第一篇博客\n\n```\nhexo n 'my first blog'\n```\n\n命令会在 /Users/YourUserName/blog/source/_posts/ 文件夹下生成一篇 md文件\n\n可以在finder 中用 typro 编辑\n\n清空hexo: ` hexo clean`\n\n重新生成hexo： `hexo generate / hexo g`\n\n## github 仓库上搭建\n\n### 新建仓库\n\nNew repository \n\n注意：名字必须为自己的用户名+.github.io\n\n如 PPsteven.github.io\n\n### 安装git 插件\n\n```bash\ncnpm install --save hexo-deployer-git\n```\n\n### 修改 _config.yml 配置文件\n\n在配置文件中找到如下代码，添加repo 信息和 branch 信息\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://github.com/PPsteven/PPsteven.github.io.git\n  branch: master\n```\n\n部署hexo\n\n```bash\nhexo clean    #会清除缓存文件db.json及之前生成的静态文件夹public；\nhexo g     #会重新生成静态文件夹public；\nhexo deploy/ hexo d    #因为之前已经安装了插件并且在博客配置文件中也配置好了，所以这个命令会在博客根目录下生成一个.deploy_git的文件夹，并 把本地生成的静态文件部署到LiLei.github.io这个仓库中的master分支上；\n```\n\n如果是第一次部署，会提示输入github 账号和密码\n\n**成功！！**\n\n远端访问：PPsteven.github.io\n\n# 进阶教程\n\n## 参考教程：\n\n> [hexo教程:基本配置+更换主题+多终端工作+coding page部署分流(2)](http://fangzh.top/2018/2018090715/)\n>\n> [如何使用 Hexo 和 GitHub Pages 搭建这个博客](https://uchuhimo.me/2017/04/11/genesis/#more)\n\n学习了上面的教程后，基本的搭建和部署已经没有问题了。\n\n主要的一个需求就是多电脑同步的问题。\n\n## Hexo CheetSheet\n\n- 初始化目录：`hexo init [folder]`\n\n- 新建文章：`hexo new/n [layout] <title>` 或\n\n  - 新建草稿：`hexo new draft <title>`\n  - 新建页面：`hexo new page tags`\n\n- 将草稿发布为正式文章：`hexo publish <title>`\n\n- 生成静态文件：`hexo generate/g`\n\n  - 监听文件变化：`hexo g --watch` 或 `hexo g -w`\n\n- 部署：`hexo deploy/d`\n\n  - 先生成后部署：`hexo d -g`\n  - 等于 `hexo g` 加 `hexo d`\n\n- 启动本地服务器（服务器会监听文件变化并自动更新）\n\n  - `hexo server/s `\n\n  - 启动调试：`hexo s --debug`\n  - 预览草稿：`hexo s --draft`\n\n- 清除缓存：`hexo clean`\n\n## 主题安装教程\n\n\n> 安装教程： [NexT官网](http://theme-next.iissnan.com/getting-started.html)\n>          [jerry博客](https://jerryc.me/posts/21cfbf15/)\n\n\n\n### 下载主题&启动\n\n```bash\ncd blog\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n# 编辑_config.yml\ntheme: next\n```\n\n```bash\ncd blog\ngit clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly\n# 编辑_config.yml\ntheme: Butterfly\n```\n\n## NexT 主题配置\n\n### 设定主题/语言\n\n主题配置的文件在themes/NexT 文件夹下的_config.yml 中，我们按照官网教程，依次配置\n\n```yaml\n#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n\nlanguage: zh-Hans\n```\n\n### 添加标签/分类/关于页面\n\nhexo 新建命令 `hexo n [layout] title` 中 layout 有三个模板\n\npost创建文章，生成在`/source/_posts`文件夹下，draft创建草稿，生成在` /source/ _drafts` 文件夹下，page创建页面，生成在`/source/YourPageName `文件夹下   \n\n![image-20191027011714501](/Users/ppsteven/Library/Application Support/typora-user-images/image-20191027011714501.png)\n\n- 新建页面\n\n  ```bash\n  hexo new page tags\n  hexo new page categories\n  hexo new page about\n  ```\n\n- 修改菜单（编辑 themes/next/_config.yml）\n\n  ```yaml\n  menu:\n    home: / || home\n    about: /about/ || user # 关于页面\n    tags: /tags/ || tags  # 标签页面\n    categories: /categories/ || th # 分类页面\n    archives: /archives/ || archive # 归档页面\n    #schedule: /schedule/ || calendar\n    #sitemap: /sitemap.xml || sitemap\n    commonweal: /404/ || heartbeat # 公益404\n  ```\n\n### 设置头像\n\n_config.yml 在blog 文件和 theme/next 文件夹下都有\n\nblog 下的为站点配置文件，主题下的为主题配置文件\n\n`mkdir themes/next/source/uploads` ，放置头像图片（jpg/gif 等）\n\n修改配置文件\n\n```yaml\n# avatar: http://example.com/avatar.png\navatar: /uploads/avatar_1.jpg\n```\n\n### 设置作者昵称\n\n修改  **站点配置文件** \n\n```yaml\nauthor: Your name\n```\n\n### 设置阅读字数与时长\n\n需要安装插件，[地址](https://github.com/willin/hexo-wordcount)\n\n```yaml\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n  totalcount: true\n  separated_meta: true\n```\n\n### 配置搜索服务\n\nLocal Search添加百度/谷歌/本地 自定义站点内容搜索\n\n```bash\ncnpm install hexo-generator-searchdb --save\n```\n\n编辑站点配置文件，新增如下代码\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n编辑主题配置文件，启动本地搜索\n\n```yaml\n# Local search\n# Dependencies: https://github.com/flashlab/hexo-generator-search\nlocal_search:\n  enable: true\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 3\n```\n\n设置摘要\n\n```yaml\n# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\nauto_excerpt:\n  enable: True\n  length: 150\n```\n\n\n\n## 多端同步\n\n正常情况下，我们写的博客是备份在本地的，没有上传服务器，但是若是有多台电脑的话。如何保持同步是一个问题。最近用闲置的笔记本搞了一个manjaro 玩耍，需要进行多端同步\n\n### 环境配置\n\n具体的步骤请参考上面的教程，主要安装\n\n- node.js\n- git\n- hexo\n\n### 创建分支\n\n在`blog`文件夹下，我们用`hexo d` 命令提交的仅仅是public 文件夹里面的内容，默认的是提交在 master 分支上。为了在同一个repo 下管理我们的博客，我们可以建立新的分支hexo\n\n- github 上创建一个新的分支 hexo。进入仓库在，点击Branch，输入新的分支名回车建立\n\n  [](https://upload-images.jianshu.io/upload_images/4122543-a8884eab55430542.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n- 在本地仓库创建hexo 分支，添加remote 地址\n\n  ```bash\n  $git checkout -b hexo # 代表创建并切换\n  $git remote add origin git@github.com:PPsteven/hexo_source.git \n  # 添加远端地址\n  $git remote -v # 查看remote 地址\n  origin\tgit@github.com:PPsteven/PPsteven.github.io.git (fetch)\n  origin\tgit@github.com:PPsteven/PPsteven.github.io.git (push)# 表示添加成功\n  ```\n\n  其实有一个取巧的方法，在GitHub上创建新的分支hexo 后，在blog 文件夹中直接将该仓库的hexo 分支克隆到本地。\n\n  ```bash\n  $git clone -b git@github.com:PPsteven/PPsteven.github.io.git\n  ```\n\n- 向本地分支添加文件\n\n  ```bash\n  $git add . # 本地文件添加至暂存区\n  $git commit -m \"blog file backup\" # 暂存区文件提交至本地分支\n  $git push origin hexo # 向远端hexo 分支提交文件\n  ```\n\n> 备注: 看到网上讨论，在提交文件的时候，themes 文件夹会出错。原因是themes 下文件夹的主题包含.git 文件，造成了冲突，删除即可。\n\n### 同步分支\n\n进入新的电脑，同步到本地就可以编辑了\n\n```bash\n$git pull origin hexo\n```\n\n\n\n  ","source":"_posts/Hexo 博客搭建.md","raw":"---\ntitle: 博客第一贴：Hexo 搭建\ndate: 2019-10-27 21:46:00\ntags: Hexo\ncategories: 电脑基本配置\ncover: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031005140.png\n---\n\n# Hexo 博客搭建\n\n> CodeSheep 学习笔记\n\nHexo 是一款基于node.js 的静态博库框架，而且可以可以方便的托管在Github 上（ 正好B站 up 主 :程序羊也推荐了）， 所以也正好简单记录一下Hexo 的安装配置过程\n\n## 参考文档\n\n不少博客已经总结的很好了，所以提前放上人家的地址\n\n[hexo教程：github page+独立域名搭建(1)](http://fangzh.top/2018/2018090514/)\n\n[hexo从零开始到搭建完整](https://www.cnblogs.com/visugar/p/6821777.html)\n\n## 本地搭建hexo博客\n\n### 下载node.js \n\n 官网下载LTS版本，直接安装\n\n### npm 安装hexo\n\n注意：切换为 root 账号操作    ```su```  ,切换淘宝源 cnpm,会更加快\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n安装hexo `cnpm install hexo-cli -g` \n\n安装完后用`hexo -v` 查看一下是否安装成功\n\n### 启动hexo\n\n在目录下创建 blog 文件夹  `mkdir blog` ,进入 `cd blog`\n\n**初始化hexo** \n\n```bash\nsudo hexo init\n```\n\n出现 `INFO  Start blogging with Hexo!`  表示安装完成\n\n**启动hexo** \n\n```bash\nhexo server / hexo s\n```\n\n### 写第一篇博客\n\n```\nhexo n 'my first blog'\n```\n\n命令会在 /Users/YourUserName/blog/source/_posts/ 文件夹下生成一篇 md文件\n\n可以在finder 中用 typro 编辑\n\n清空hexo: ` hexo clean`\n\n重新生成hexo： `hexo generate / hexo g`\n\n## github 仓库上搭建\n\n### 新建仓库\n\nNew repository \n\n注意：名字必须为自己的用户名+.github.io\n\n如 PPsteven.github.io\n\n### 安装git 插件\n\n```bash\ncnpm install --save hexo-deployer-git\n```\n\n### 修改 _config.yml 配置文件\n\n在配置文件中找到如下代码，添加repo 信息和 branch 信息\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://github.com/PPsteven/PPsteven.github.io.git\n  branch: master\n```\n\n部署hexo\n\n```bash\nhexo clean    #会清除缓存文件db.json及之前生成的静态文件夹public；\nhexo g     #会重新生成静态文件夹public；\nhexo deploy/ hexo d    #因为之前已经安装了插件并且在博客配置文件中也配置好了，所以这个命令会在博客根目录下生成一个.deploy_git的文件夹，并 把本地生成的静态文件部署到LiLei.github.io这个仓库中的master分支上；\n```\n\n如果是第一次部署，会提示输入github 账号和密码\n\n**成功！！**\n\n远端访问：PPsteven.github.io\n\n# 进阶教程\n\n## 参考教程：\n\n> [hexo教程:基本配置+更换主题+多终端工作+coding page部署分流(2)](http://fangzh.top/2018/2018090715/)\n>\n> [如何使用 Hexo 和 GitHub Pages 搭建这个博客](https://uchuhimo.me/2017/04/11/genesis/#more)\n\n学习了上面的教程后，基本的搭建和部署已经没有问题了。\n\n主要的一个需求就是多电脑同步的问题。\n\n## Hexo CheetSheet\n\n- 初始化目录：`hexo init [folder]`\n\n- 新建文章：`hexo new/n [layout] <title>` 或\n\n  - 新建草稿：`hexo new draft <title>`\n  - 新建页面：`hexo new page tags`\n\n- 将草稿发布为正式文章：`hexo publish <title>`\n\n- 生成静态文件：`hexo generate/g`\n\n  - 监听文件变化：`hexo g --watch` 或 `hexo g -w`\n\n- 部署：`hexo deploy/d`\n\n  - 先生成后部署：`hexo d -g`\n  - 等于 `hexo g` 加 `hexo d`\n\n- 启动本地服务器（服务器会监听文件变化并自动更新）\n\n  - `hexo server/s `\n\n  - 启动调试：`hexo s --debug`\n  - 预览草稿：`hexo s --draft`\n\n- 清除缓存：`hexo clean`\n\n## 主题安装教程\n\n\n> 安装教程： [NexT官网](http://theme-next.iissnan.com/getting-started.html)\n>          [jerry博客](https://jerryc.me/posts/21cfbf15/)\n\n\n\n### 下载主题&启动\n\n```bash\ncd blog\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n# 编辑_config.yml\ntheme: next\n```\n\n```bash\ncd blog\ngit clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly\n# 编辑_config.yml\ntheme: Butterfly\n```\n\n## NexT 主题配置\n\n### 设定主题/语言\n\n主题配置的文件在themes/NexT 文件夹下的_config.yml 中，我们按照官网教程，依次配置\n\n```yaml\n#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n\nlanguage: zh-Hans\n```\n\n### 添加标签/分类/关于页面\n\nhexo 新建命令 `hexo n [layout] title` 中 layout 有三个模板\n\npost创建文章，生成在`/source/_posts`文件夹下，draft创建草稿，生成在` /source/ _drafts` 文件夹下，page创建页面，生成在`/source/YourPageName `文件夹下   \n\n![image-20191027011714501](/Users/ppsteven/Library/Application Support/typora-user-images/image-20191027011714501.png)\n\n- 新建页面\n\n  ```bash\n  hexo new page tags\n  hexo new page categories\n  hexo new page about\n  ```\n\n- 修改菜单（编辑 themes/next/_config.yml）\n\n  ```yaml\n  menu:\n    home: / || home\n    about: /about/ || user # 关于页面\n    tags: /tags/ || tags  # 标签页面\n    categories: /categories/ || th # 分类页面\n    archives: /archives/ || archive # 归档页面\n    #schedule: /schedule/ || calendar\n    #sitemap: /sitemap.xml || sitemap\n    commonweal: /404/ || heartbeat # 公益404\n  ```\n\n### 设置头像\n\n_config.yml 在blog 文件和 theme/next 文件夹下都有\n\nblog 下的为站点配置文件，主题下的为主题配置文件\n\n`mkdir themes/next/source/uploads` ，放置头像图片（jpg/gif 等）\n\n修改配置文件\n\n```yaml\n# avatar: http://example.com/avatar.png\navatar: /uploads/avatar_1.jpg\n```\n\n### 设置作者昵称\n\n修改  **站点配置文件** \n\n```yaml\nauthor: Your name\n```\n\n### 设置阅读字数与时长\n\n需要安装插件，[地址](https://github.com/willin/hexo-wordcount)\n\n```yaml\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n  totalcount: true\n  separated_meta: true\n```\n\n### 配置搜索服务\n\nLocal Search添加百度/谷歌/本地 自定义站点内容搜索\n\n```bash\ncnpm install hexo-generator-searchdb --save\n```\n\n编辑站点配置文件，新增如下代码\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n编辑主题配置文件，启动本地搜索\n\n```yaml\n# Local search\n# Dependencies: https://github.com/flashlab/hexo-generator-search\nlocal_search:\n  enable: true\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 3\n```\n\n设置摘要\n\n```yaml\n# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\nauto_excerpt:\n  enable: True\n  length: 150\n```\n\n\n\n## 多端同步\n\n正常情况下，我们写的博客是备份在本地的，没有上传服务器，但是若是有多台电脑的话。如何保持同步是一个问题。最近用闲置的笔记本搞了一个manjaro 玩耍，需要进行多端同步\n\n### 环境配置\n\n具体的步骤请参考上面的教程，主要安装\n\n- node.js\n- git\n- hexo\n\n### 创建分支\n\n在`blog`文件夹下，我们用`hexo d` 命令提交的仅仅是public 文件夹里面的内容，默认的是提交在 master 分支上。为了在同一个repo 下管理我们的博客，我们可以建立新的分支hexo\n\n- github 上创建一个新的分支 hexo。进入仓库在，点击Branch，输入新的分支名回车建立\n\n  [](https://upload-images.jianshu.io/upload_images/4122543-a8884eab55430542.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n- 在本地仓库创建hexo 分支，添加remote 地址\n\n  ```bash\n  $git checkout -b hexo # 代表创建并切换\n  $git remote add origin git@github.com:PPsteven/hexo_source.git \n  # 添加远端地址\n  $git remote -v # 查看remote 地址\n  origin\tgit@github.com:PPsteven/PPsteven.github.io.git (fetch)\n  origin\tgit@github.com:PPsteven/PPsteven.github.io.git (push)# 表示添加成功\n  ```\n\n  其实有一个取巧的方法，在GitHub上创建新的分支hexo 后，在blog 文件夹中直接将该仓库的hexo 分支克隆到本地。\n\n  ```bash\n  $git clone -b git@github.com:PPsteven/PPsteven.github.io.git\n  ```\n\n- 向本地分支添加文件\n\n  ```bash\n  $git add . # 本地文件添加至暂存区\n  $git commit -m \"blog file backup\" # 暂存区文件提交至本地分支\n  $git push origin hexo # 向远端hexo 分支提交文件\n  ```\n\n> 备注: 看到网上讨论，在提交文件的时候，themes 文件夹会出错。原因是themes 下文件夹的主题包含.git 文件，造成了冲突，删除即可。\n\n### 同步分支\n\n进入新的电脑，同步到本地就可以编辑了\n\n```bash\n$git pull origin hexo\n```\n\n\n\n  ","slug":"Hexo 博客搭建","published":1,"updated":"2019-11-19T14:41:35.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3acxtjs000cpw8m7lxy6st0","content":"<h1 id=\"Hexo-博客搭建\"><a href=\"#Hexo-博客搭建\" class=\"headerlink\" title=\"Hexo 博客搭建\"></a>Hexo 博客搭建</h1><blockquote>\n<p>CodeSheep 学习笔记</p>\n</blockquote>\n<p>Hexo 是一款基于node.js 的静态博库框架，而且可以可以方便的托管在Github 上（ 正好B站 up 主 :程序羊也推荐了）， 所以也正好简单记录一下Hexo 的安装配置过程</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p>不少博客已经总结的很好了，所以提前放上人家的地址</p>\n<p><a href=\"http://fangzh.top/2018/2018090514/\" target=\"_blank\" rel=\"noopener\">hexo教程：github page+独立域名搭建(1)</a></p>\n<p><a href=\"https://www.cnblogs.com/visugar/p/6821777.html\" target=\"_blank\" rel=\"noopener\">hexo从零开始到搭建完整</a></p>\n<h2 id=\"本地搭建hexo博客\"><a href=\"#本地搭建hexo博客\" class=\"headerlink\" title=\"本地搭建hexo博客\"></a>本地搭建hexo博客</h2><h3 id=\"下载node-js\"><a href=\"#下载node-js\" class=\"headerlink\" title=\"下载node.js\"></a>下载node.js</h3><p> 官网下载LTS版本，直接安装</p>\n<h3 id=\"npm-安装hexo\"><a href=\"#npm-安装hexo\" class=\"headerlink\" title=\"npm 安装hexo\"></a>npm 安装hexo</h3><p>注意：切换为 root 账号操作    <code>su</code>  ,切换淘宝源 cnpm,会更加快</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>安装hexo <code>cnpm install hexo-cli -g</code> </p>\n<p>安装完后用<code>hexo -v</code> 查看一下是否安装成功</p>\n<h3 id=\"启动hexo\"><a href=\"#启动hexo\" class=\"headerlink\" title=\"启动hexo\"></a>启动hexo</h3><p>在目录下创建 blog 文件夹  <code>mkdir blog</code> ,进入 <code>cd blog</code></p>\n<p><strong>初始化hexo</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hexo init</span><br></pre></td></tr></table></figure>\n\n<p>出现 <code>INFO  Start blogging with Hexo!</code>  表示安装完成</p>\n<p><strong>启动hexo</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server / hexo s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写第一篇博客\"><a href=\"#写第一篇博客\" class=\"headerlink\" title=\"写第一篇博客\"></a>写第一篇博客</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &apos;my first blog&apos;</span><br></pre></td></tr></table></figure>\n\n<p>命令会在 /Users/YourUserName/blog/source/_posts/ 文件夹下生成一篇 md文件</p>\n<p>可以在finder 中用 typro 编辑</p>\n<p>清空hexo: <code>hexo clean</code></p>\n<p>重新生成hexo： <code>hexo generate / hexo g</code></p>\n<h2 id=\"github-仓库上搭建\"><a href=\"#github-仓库上搭建\" class=\"headerlink\" title=\"github 仓库上搭建\"></a>github 仓库上搭建</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>New repository </p>\n<p>注意：名字必须为自己的用户名+.github.io</p>\n<p>如 PPsteven.github.io</p>\n<h3 id=\"安装git-插件\"><a href=\"#安装git-插件\" class=\"headerlink\" title=\"安装git 插件\"></a>安装git 插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-yml-配置文件\"><a href=\"#修改-config-yml-配置文件\" class=\"headerlink\" title=\"修改 _config.yml 配置文件\"></a>修改 _config.yml 配置文件</h3><p>在配置文件中找到如下代码，添加repo 信息和 branch 信息</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/PPsteven/PPsteven.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>部署hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean    <span class=\"comment\">#会清除缓存文件db.json及之前生成的静态文件夹public；</span></span><br><span class=\"line\">hexo g     <span class=\"comment\">#会重新生成静态文件夹public；</span></span><br><span class=\"line\">hexo deploy/ hexo d    <span class=\"comment\">#因为之前已经安装了插件并且在博客配置文件中也配置好了，所以这个命令会在博客根目录下生成一个.deploy_git的文件夹，并 把本地生成的静态文件部署到LiLei.github.io这个仓库中的master分支上；</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是第一次部署，会提示输入github 账号和密码</p>\n<p><strong>成功！！</strong></p>\n<p>远端访问：PPsteven.github.io</p>\n<h1 id=\"进阶教程\"><a href=\"#进阶教程\" class=\"headerlink\" title=\"进阶教程\"></a>进阶教程</h1><h2 id=\"参考教程：\"><a href=\"#参考教程：\" class=\"headerlink\" title=\"参考教程：\"></a>参考教程：</h2><blockquote>\n<p><a href=\"http://fangzh.top/2018/2018090715/\" target=\"_blank\" rel=\"noopener\">hexo教程:基本配置+更换主题+多终端工作+coding page部署分流(2)</a></p>\n<p><a href=\"https://uchuhimo.me/2017/04/11/genesis/#more\" target=\"_blank\" rel=\"noopener\">如何使用 Hexo 和 GitHub Pages 搭建这个博客</a></p>\n</blockquote>\n<p>学习了上面的教程后，基本的搭建和部署已经没有问题了。</p>\n<p>主要的一个需求就是多电脑同步的问题。</p>\n<h2 id=\"Hexo-CheetSheet\"><a href=\"#Hexo-CheetSheet\" class=\"headerlink\" title=\"Hexo CheetSheet\"></a>Hexo CheetSheet</h2><ul>\n<li><p>初始化目录：<code>hexo init [folder]</code></p>\n</li>\n<li><p>新建文章：<code>hexo new/n [layout] &lt;title&gt;</code> 或</p>\n<ul>\n<li>新建草稿：<code>hexo new draft &lt;title&gt;</code></li>\n<li>新建页面：<code>hexo new page tags</code></li>\n</ul>\n</li>\n<li><p>将草稿发布为正式文章：<code>hexo publish &lt;title&gt;</code></p>\n</li>\n<li><p>生成静态文件：<code>hexo generate/g</code></p>\n<ul>\n<li>监听文件变化：<code>hexo g --watch</code> 或 <code>hexo g -w</code></li>\n</ul>\n</li>\n<li><p>部署：<code>hexo deploy/d</code></p>\n<ul>\n<li>先生成后部署：<code>hexo d -g</code></li>\n<li>等于 <code>hexo g</code> 加 <code>hexo d</code></li>\n</ul>\n</li>\n<li><p>启动本地服务器（服务器会监听文件变化并自动更新）</p>\n<ul>\n<li><p><code>hexo server/s</code></p>\n</li>\n<li><p>启动调试：<code>hexo s --debug</code></p>\n</li>\n<li><p>预览草稿：<code>hexo s --draft</code></p>\n</li>\n</ul>\n</li>\n<li><p>清除缓存：<code>hexo clean</code></p>\n</li>\n</ul>\n<h2 id=\"主题安装教程\"><a href=\"#主题安装教程\" class=\"headerlink\" title=\"主题安装教程\"></a>主题安装教程</h2><blockquote>\n<p>安装教程： <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">NexT官网</a><br>         <a href=\"https://jerryc.me/posts/21cfbf15/\" target=\"_blank\" rel=\"noopener\">jerry博客</a></p>\n</blockquote>\n<h3 id=\"下载主题-amp-启动\"><a href=\"#下载主题-amp-启动\" class=\"headerlink\" title=\"下载主题&amp;启动\"></a>下载主题&amp;启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class=\"line\"><span class=\"comment\"># 编辑_config.yml</span></span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class=\"line\"><span class=\"comment\"># 编辑_config.yml</span></span><br><span class=\"line\">theme: Butterfly</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NexT-主题配置\"><a href=\"#NexT-主题配置\" class=\"headerlink\" title=\"NexT 主题配置\"></a>NexT 主题配置</h2><h3 id=\"设定主题-语言\"><a href=\"#设定主题-语言\" class=\"headerlink\" title=\"设定主题/语言\"></a>设定主题/语言</h3><p>主题配置的文件在themes/NexT 文件夹下的_config.yml 中，我们按照官网教程，依次配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Pisces</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-Hans</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加标签-分类-关于页面\"><a href=\"#添加标签-分类-关于页面\" class=\"headerlink\" title=\"添加标签/分类/关于页面\"></a>添加标签/分类/关于页面</h3><p>hexo 新建命令 <code>hexo n [layout] title</code> 中 layout 有三个模板</p>\n<p>post创建文章，生成在<code>/source/_posts</code>文件夹下，draft创建草稿，生成在<code>/source/ _drafts</code> 文件夹下，page创建页面，生成在<code>/source/YourPageName</code>文件夹下   </p>\n<p>![image-20191027011714501](/Users/ppsteven/Library/Application Support/typora-user-images/image-20191027011714501.png)</p>\n<ul>\n<li><p>新建页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改菜单（编辑 themes/next/_config.yml）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"attr\">  about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">user</span> <span class=\"comment\"># 关于页面</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span>  <span class=\"comment\"># 标签页面</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span> <span class=\"comment\"># 分类页面</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span> <span class=\"comment\"># 归档页面</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\"><span class=\"attr\">  commonweal:</span> <span class=\"string\">/404/</span> <span class=\"string\">||</span> <span class=\"string\">heartbeat</span> <span class=\"comment\"># 公益404</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h3><p>_config.yml 在blog 文件和 theme/next 文件夹下都有</p>\n<p>blog 下的为站点配置文件，主题下的为主题配置文件</p>\n<p><code>mkdir themes/next/source/uploads</code> ，放置头像图片（jpg/gif 等）</p>\n<p>修改配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># avatar: http://example.com/avatar.png</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">/uploads/avatar_1.jpg</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置作者昵称\"><a href=\"#设置作者昵称\" class=\"headerlink\" title=\"设置作者昵称\"></a>设置作者昵称</h3><p>修改  <strong>站点配置文件</strong> </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Your</span> <span class=\"string\">name</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置阅读字数与时长\"><a href=\"#设置阅读字数与时长\" class=\"headerlink\" title=\"设置阅读字数与时长\"></a>设置阅读字数与时长</h3><p>需要安装插件，<a href=\"https://github.com/willin/hexo-wordcount\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Post wordcount display settings</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">post_wordcount:</span></span><br><span class=\"line\"><span class=\"attr\">  item_text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  wordcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  min2read:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  totalcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置搜索服务\"><a href=\"#配置搜索服务\" class=\"headerlink\" title=\"配置搜索服务\"></a>配置搜索服务</h3><p>Local Search添加百度/谷歌/本地 自定义站点内容搜索</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>编辑站点配置文件，新增如下代码</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">  format:</span> <span class=\"string\">html</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑主题配置文件，启动本地搜索</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\"><span class=\"attr\">  trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\"><span class=\"attr\">  top_n_per_article:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>设置摘要</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Automatically Excerpt. Not recommend.</span></span><br><span class=\"line\"><span class=\"comment\"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class=\"line\"><span class=\"attr\">auto_excerpt:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">  length:</span> <span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"多端同步\"><a href=\"#多端同步\" class=\"headerlink\" title=\"多端同步\"></a>多端同步</h2><p>正常情况下，我们写的博客是备份在本地的，没有上传服务器，但是若是有多台电脑的话。如何保持同步是一个问题。最近用闲置的笔记本搞了一个manjaro 玩耍，需要进行多端同步</p>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><p>具体的步骤请参考上面的教程，主要安装</p>\n<ul>\n<li>node.js</li>\n<li>git</li>\n<li>hexo</li>\n</ul>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><p>在<code>blog</code>文件夹下，我们用<code>hexo d</code> 命令提交的仅仅是public 文件夹里面的内容，默认的是提交在 master 分支上。为了在同一个repo 下管理我们的博客，我们可以建立新的分支hexo</p>\n<ul>\n<li><p>github 上创建一个新的分支 hexo。进入仓库在，点击Branch，输入新的分支名回车建立</p>\n<p><a href=\"https://upload-images.jianshu.io/upload_images/4122543-a8884eab55430542.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\" target=\"_blank\" rel=\"noopener\"></a></p>\n</li>\n<li><p>在本地仓库创建hexo 分支，添加remote 地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> checkout -b hexo <span class=\"comment\"># 代表创建并切换</span></span><br><span class=\"line\"><span class=\"variable\">$git</span> remote add origin git@github.com:PPsteven/hexo_source.git </span><br><span class=\"line\"><span class=\"comment\"># 添加远端地址</span></span><br><span class=\"line\"><span class=\"variable\">$git</span> remote -v <span class=\"comment\"># 查看remote 地址</span></span><br><span class=\"line\">origin\tgit@github.com:PPsteven/PPsteven.github.io.git (fetch)</span><br><span class=\"line\">origin\tgit@github.com:PPsteven/PPsteven.github.io.git (push)<span class=\"comment\"># 表示添加成功</span></span><br></pre></td></tr></table></figure>\n\n<p>其实有一个取巧的方法，在GitHub上创建新的分支hexo 后，在blog 文件夹中直接将该仓库的hexo 分支克隆到本地。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> <span class=\"built_in\">clone</span> -b git@github.com:PPsteven/PPsteven.github.io.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>向本地分支添加文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> add . <span class=\"comment\"># 本地文件添加至暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$git</span> commit -m <span class=\"string\">\"blog file backup\"</span> <span class=\"comment\"># 暂存区文件提交至本地分支</span></span><br><span class=\"line\"><span class=\"variable\">$git</span> push origin hexo <span class=\"comment\"># 向远端hexo 分支提交文件</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>备注: 看到网上讨论，在提交文件的时候，themes 文件夹会出错。原因是themes 下文件夹的主题包含.git 文件，造成了冲突，删除即可。</p>\n</blockquote>\n<h3 id=\"同步分支\"><a href=\"#同步分支\" class=\"headerlink\" title=\"同步分支\"></a>同步分支</h3><p>进入新的电脑，同步到本地就可以编辑了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> pull origin hexo</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"excerpt":"","more":"<h1 id=\"Hexo-博客搭建\"><a href=\"#Hexo-博客搭建\" class=\"headerlink\" title=\"Hexo 博客搭建\"></a>Hexo 博客搭建</h1><blockquote>\n<p>CodeSheep 学习笔记</p>\n</blockquote>\n<p>Hexo 是一款基于node.js 的静态博库框架，而且可以可以方便的托管在Github 上（ 正好B站 up 主 :程序羊也推荐了）， 所以也正好简单记录一下Hexo 的安装配置过程</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p>不少博客已经总结的很好了，所以提前放上人家的地址</p>\n<p><a href=\"http://fangzh.top/2018/2018090514/\" target=\"_blank\" rel=\"noopener\">hexo教程：github page+独立域名搭建(1)</a></p>\n<p><a href=\"https://www.cnblogs.com/visugar/p/6821777.html\" target=\"_blank\" rel=\"noopener\">hexo从零开始到搭建完整</a></p>\n<h2 id=\"本地搭建hexo博客\"><a href=\"#本地搭建hexo博客\" class=\"headerlink\" title=\"本地搭建hexo博客\"></a>本地搭建hexo博客</h2><h3 id=\"下载node-js\"><a href=\"#下载node-js\" class=\"headerlink\" title=\"下载node.js\"></a>下载node.js</h3><p> 官网下载LTS版本，直接安装</p>\n<h3 id=\"npm-安装hexo\"><a href=\"#npm-安装hexo\" class=\"headerlink\" title=\"npm 安装hexo\"></a>npm 安装hexo</h3><p>注意：切换为 root 账号操作    <code>su</code>  ,切换淘宝源 cnpm,会更加快</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>安装hexo <code>cnpm install hexo-cli -g</code> </p>\n<p>安装完后用<code>hexo -v</code> 查看一下是否安装成功</p>\n<h3 id=\"启动hexo\"><a href=\"#启动hexo\" class=\"headerlink\" title=\"启动hexo\"></a>启动hexo</h3><p>在目录下创建 blog 文件夹  <code>mkdir blog</code> ,进入 <code>cd blog</code></p>\n<p><strong>初始化hexo</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hexo init</span><br></pre></td></tr></table></figure>\n\n<p>出现 <code>INFO  Start blogging with Hexo!</code>  表示安装完成</p>\n<p><strong>启动hexo</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server / hexo s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写第一篇博客\"><a href=\"#写第一篇博客\" class=\"headerlink\" title=\"写第一篇博客\"></a>写第一篇博客</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &apos;my first blog&apos;</span><br></pre></td></tr></table></figure>\n\n<p>命令会在 /Users/YourUserName/blog/source/_posts/ 文件夹下生成一篇 md文件</p>\n<p>可以在finder 中用 typro 编辑</p>\n<p>清空hexo: <code>hexo clean</code></p>\n<p>重新生成hexo： <code>hexo generate / hexo g</code></p>\n<h2 id=\"github-仓库上搭建\"><a href=\"#github-仓库上搭建\" class=\"headerlink\" title=\"github 仓库上搭建\"></a>github 仓库上搭建</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>New repository </p>\n<p>注意：名字必须为自己的用户名+.github.io</p>\n<p>如 PPsteven.github.io</p>\n<h3 id=\"安装git-插件\"><a href=\"#安装git-插件\" class=\"headerlink\" title=\"安装git 插件\"></a>安装git 插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-yml-配置文件\"><a href=\"#修改-config-yml-配置文件\" class=\"headerlink\" title=\"修改 _config.yml 配置文件\"></a>修改 _config.yml 配置文件</h3><p>在配置文件中找到如下代码，添加repo 信息和 branch 信息</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/PPsteven/PPsteven.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>部署hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean    <span class=\"comment\">#会清除缓存文件db.json及之前生成的静态文件夹public；</span></span><br><span class=\"line\">hexo g     <span class=\"comment\">#会重新生成静态文件夹public；</span></span><br><span class=\"line\">hexo deploy/ hexo d    <span class=\"comment\">#因为之前已经安装了插件并且在博客配置文件中也配置好了，所以这个命令会在博客根目录下生成一个.deploy_git的文件夹，并 把本地生成的静态文件部署到LiLei.github.io这个仓库中的master分支上；</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是第一次部署，会提示输入github 账号和密码</p>\n<p><strong>成功！！</strong></p>\n<p>远端访问：PPsteven.github.io</p>\n<h1 id=\"进阶教程\"><a href=\"#进阶教程\" class=\"headerlink\" title=\"进阶教程\"></a>进阶教程</h1><h2 id=\"参考教程：\"><a href=\"#参考教程：\" class=\"headerlink\" title=\"参考教程：\"></a>参考教程：</h2><blockquote>\n<p><a href=\"http://fangzh.top/2018/2018090715/\" target=\"_blank\" rel=\"noopener\">hexo教程:基本配置+更换主题+多终端工作+coding page部署分流(2)</a></p>\n<p><a href=\"https://uchuhimo.me/2017/04/11/genesis/#more\" target=\"_blank\" rel=\"noopener\">如何使用 Hexo 和 GitHub Pages 搭建这个博客</a></p>\n</blockquote>\n<p>学习了上面的教程后，基本的搭建和部署已经没有问题了。</p>\n<p>主要的一个需求就是多电脑同步的问题。</p>\n<h2 id=\"Hexo-CheetSheet\"><a href=\"#Hexo-CheetSheet\" class=\"headerlink\" title=\"Hexo CheetSheet\"></a>Hexo CheetSheet</h2><ul>\n<li><p>初始化目录：<code>hexo init [folder]</code></p>\n</li>\n<li><p>新建文章：<code>hexo new/n [layout] &lt;title&gt;</code> 或</p>\n<ul>\n<li>新建草稿：<code>hexo new draft &lt;title&gt;</code></li>\n<li>新建页面：<code>hexo new page tags</code></li>\n</ul>\n</li>\n<li><p>将草稿发布为正式文章：<code>hexo publish &lt;title&gt;</code></p>\n</li>\n<li><p>生成静态文件：<code>hexo generate/g</code></p>\n<ul>\n<li>监听文件变化：<code>hexo g --watch</code> 或 <code>hexo g -w</code></li>\n</ul>\n</li>\n<li><p>部署：<code>hexo deploy/d</code></p>\n<ul>\n<li>先生成后部署：<code>hexo d -g</code></li>\n<li>等于 <code>hexo g</code> 加 <code>hexo d</code></li>\n</ul>\n</li>\n<li><p>启动本地服务器（服务器会监听文件变化并自动更新）</p>\n<ul>\n<li><p><code>hexo server/s</code></p>\n</li>\n<li><p>启动调试：<code>hexo s --debug</code></p>\n</li>\n<li><p>预览草稿：<code>hexo s --draft</code></p>\n</li>\n</ul>\n</li>\n<li><p>清除缓存：<code>hexo clean</code></p>\n</li>\n</ul>\n<h2 id=\"主题安装教程\"><a href=\"#主题安装教程\" class=\"headerlink\" title=\"主题安装教程\"></a>主题安装教程</h2><blockquote>\n<p>安装教程： <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">NexT官网</a><br>         <a href=\"https://jerryc.me/posts/21cfbf15/\" target=\"_blank\" rel=\"noopener\">jerry博客</a></p>\n</blockquote>\n<h3 id=\"下载主题-amp-启动\"><a href=\"#下载主题-amp-启动\" class=\"headerlink\" title=\"下载主题&amp;启动\"></a>下载主题&amp;启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class=\"line\"><span class=\"comment\"># 编辑_config.yml</span></span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class=\"line\"><span class=\"comment\"># 编辑_config.yml</span></span><br><span class=\"line\">theme: Butterfly</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NexT-主题配置\"><a href=\"#NexT-主题配置\" class=\"headerlink\" title=\"NexT 主题配置\"></a>NexT 主题配置</h2><h3 id=\"设定主题-语言\"><a href=\"#设定主题-语言\" class=\"headerlink\" title=\"设定主题/语言\"></a>设定主题/语言</h3><p>主题配置的文件在themes/NexT 文件夹下的_config.yml 中，我们按照官网教程，依次配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Pisces</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-Hans</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加标签-分类-关于页面\"><a href=\"#添加标签-分类-关于页面\" class=\"headerlink\" title=\"添加标签/分类/关于页面\"></a>添加标签/分类/关于页面</h3><p>hexo 新建命令 <code>hexo n [layout] title</code> 中 layout 有三个模板</p>\n<p>post创建文章，生成在<code>/source/_posts</code>文件夹下，draft创建草稿，生成在<code>/source/ _drafts</code> 文件夹下，page创建页面，生成在<code>/source/YourPageName</code>文件夹下   </p>\n<p>![image-20191027011714501](/Users/ppsteven/Library/Application Support/typora-user-images/image-20191027011714501.png)</p>\n<ul>\n<li><p>新建页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改菜单（编辑 themes/next/_config.yml）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"attr\">  about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">user</span> <span class=\"comment\"># 关于页面</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span>  <span class=\"comment\"># 标签页面</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span> <span class=\"comment\"># 分类页面</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span> <span class=\"comment\"># 归档页面</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\"><span class=\"attr\">  commonweal:</span> <span class=\"string\">/404/</span> <span class=\"string\">||</span> <span class=\"string\">heartbeat</span> <span class=\"comment\"># 公益404</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h3><p>_config.yml 在blog 文件和 theme/next 文件夹下都有</p>\n<p>blog 下的为站点配置文件，主题下的为主题配置文件</p>\n<p><code>mkdir themes/next/source/uploads</code> ，放置头像图片（jpg/gif 等）</p>\n<p>修改配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># avatar: http://example.com/avatar.png</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">/uploads/avatar_1.jpg</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置作者昵称\"><a href=\"#设置作者昵称\" class=\"headerlink\" title=\"设置作者昵称\"></a>设置作者昵称</h3><p>修改  <strong>站点配置文件</strong> </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Your</span> <span class=\"string\">name</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置阅读字数与时长\"><a href=\"#设置阅读字数与时长\" class=\"headerlink\" title=\"设置阅读字数与时长\"></a>设置阅读字数与时长</h3><p>需要安装插件，<a href=\"https://github.com/willin/hexo-wordcount\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Post wordcount display settings</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">post_wordcount:</span></span><br><span class=\"line\"><span class=\"attr\">  item_text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  wordcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  min2read:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  totalcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置搜索服务\"><a href=\"#配置搜索服务\" class=\"headerlink\" title=\"配置搜索服务\"></a>配置搜索服务</h3><p>Local Search添加百度/谷歌/本地 自定义站点内容搜索</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>编辑站点配置文件，新增如下代码</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">  format:</span> <span class=\"string\">html</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑主题配置文件，启动本地搜索</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\"><span class=\"attr\">  trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\"><span class=\"attr\">  top_n_per_article:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>设置摘要</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Automatically Excerpt. Not recommend.</span></span><br><span class=\"line\"><span class=\"comment\"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class=\"line\"><span class=\"attr\">auto_excerpt:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">  length:</span> <span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"多端同步\"><a href=\"#多端同步\" class=\"headerlink\" title=\"多端同步\"></a>多端同步</h2><p>正常情况下，我们写的博客是备份在本地的，没有上传服务器，但是若是有多台电脑的话。如何保持同步是一个问题。最近用闲置的笔记本搞了一个manjaro 玩耍，需要进行多端同步</p>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><p>具体的步骤请参考上面的教程，主要安装</p>\n<ul>\n<li>node.js</li>\n<li>git</li>\n<li>hexo</li>\n</ul>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><p>在<code>blog</code>文件夹下，我们用<code>hexo d</code> 命令提交的仅仅是public 文件夹里面的内容，默认的是提交在 master 分支上。为了在同一个repo 下管理我们的博客，我们可以建立新的分支hexo</p>\n<ul>\n<li><p>github 上创建一个新的分支 hexo。进入仓库在，点击Branch，输入新的分支名回车建立</p>\n<p><a href=\"https://upload-images.jianshu.io/upload_images/4122543-a8884eab55430542.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\" target=\"_blank\" rel=\"noopener\"></a></p>\n</li>\n<li><p>在本地仓库创建hexo 分支，添加remote 地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> checkout -b hexo <span class=\"comment\"># 代表创建并切换</span></span><br><span class=\"line\"><span class=\"variable\">$git</span> remote add origin git@github.com:PPsteven/hexo_source.git </span><br><span class=\"line\"><span class=\"comment\"># 添加远端地址</span></span><br><span class=\"line\"><span class=\"variable\">$git</span> remote -v <span class=\"comment\"># 查看remote 地址</span></span><br><span class=\"line\">origin\tgit@github.com:PPsteven/PPsteven.github.io.git (fetch)</span><br><span class=\"line\">origin\tgit@github.com:PPsteven/PPsteven.github.io.git (push)<span class=\"comment\"># 表示添加成功</span></span><br></pre></td></tr></table></figure>\n\n<p>其实有一个取巧的方法，在GitHub上创建新的分支hexo 后，在blog 文件夹中直接将该仓库的hexo 分支克隆到本地。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> <span class=\"built_in\">clone</span> -b git@github.com:PPsteven/PPsteven.github.io.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>向本地分支添加文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> add . <span class=\"comment\"># 本地文件添加至暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$git</span> commit -m <span class=\"string\">\"blog file backup\"</span> <span class=\"comment\"># 暂存区文件提交至本地分支</span></span><br><span class=\"line\"><span class=\"variable\">$git</span> push origin hexo <span class=\"comment\"># 向远端hexo 分支提交文件</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>备注: 看到网上讨论，在提交文件的时候，themes 文件夹会出错。原因是themes 下文件夹的主题包含.git 文件，造成了冲突，删除即可。</p>\n</blockquote>\n<h3 id=\"同步分支\"><a href=\"#同步分支\" class=\"headerlink\" title=\"同步分支\"></a>同步分支</h3><p>进入新的电脑，同步到本地就可以编辑了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> pull origin hexo</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Pine Script 学习笔记(二)——基本特点","comments":0,"date":"2019-11-04T13:45:13.000Z","keywords":null,"description":null,"top_img":null,"cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104214742.png","toc":null,"toc_number":null,"copyright":null,"_content":"\n## Context switching and the security function\n\nsecurity 函数可以用于按照特定要求请求数据\n\n```\n//@version=4\nstudy(\"Example security 1\", overlay=true)\nibm_15 = security(\"NYSE:IBM\", \"15\", close)\nplot(ibm_15)\n```\n\n![](https://www.tradingview.com/pine-script-docs/en/v4/_images/Chart_security_1.png)\n\n```\nsecurity(symbol, resolution, expression, gaps, lookahead)\n```\n\n- **symbol (string)** 商品代码。\n\n  商品代码可以包含数据提供商信息，也可以不含\n\n  如 \"NYSE:IBM\",\"BATS:IBM\",\"IBM\"(如不提供，默认使用BATS)\n\n   [syminfo.ticker](https://www.tradingview.com/pine-script-reference/v4/#var_syminfo{dot}ticker) and [syminfo.tickerid](https://www.tradingview.com/pine-script-reference/v4/#var_syminfo{dot}tickerid)是表示当前图标上的商品代码，syminfo.ticker是不含数据供应商信息，syminfo.tickerid是包含供应商信息。Pine教程建议使用后者，为了避免数据的模糊性\n\n- **resolution (string)** 分辨率/ **timeframe**时间周期\n  - 分钟级：1，5，10，21，60，120，等等\n  - 日级: D,1D,2D 等等\n  - 周级：W，1W，2W\n  - 月级：M，1M，2M\n  - timeframe.period 记录当前图标时间周期\n\n- **expression (series)** 计数并从 [security](https://cn.tradingview.com/pine-script-reference/v3/#fun_security)调用返回的表达式。\n\n  如果仅仅是获取收盘价数据，我们可以用`security('EURUSD','D',close)`\n\n  但是，expression能给我们提供更加丰富的操作，比如，我们需要知道，EURUSD相对于GBPUSD 上涨的幅度\n\n  ```Pine\n  //@version=4\n  study(title = \"Advance Decline Ratio\", shorttitle=\"ADR\")\n  ratio(t1, t2, source) =>\n      s1 = security(t1, timeframe.period, source)\n      s2 = security(t2, timeframe.period, source)\n      s1 / s2\n  plot(ratio(\"GBPUSD\", \"EURUSD\", close-open))\n  ```\n\n  ![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102123145.png)\n\n  如上图所以，GBPUSD上涨幅度/EURUSD 的上涨幅度我们可以很轻松的通过7行代码实现。在绝大多数情况下，两者是同比例变动，但是在某些特等情况下，变化是相反的。这对于研究这两种货币对的走势关系有很大的帮助。\n\n\n\n在security数据应用到当前图表上的时候，有两个控制，一个是gaps，另一个是lookahead\n\n- **gaps (const bool)** 默认值为[barmerge.gaps_off](https://cn.tradingview.com/pine-script-reference/v3/#var_barmerge{dot}gaps_off)。可以理解为数据平滑的操作，因为数据中会存在空值（na），在gaps_off的情况下，na会被离它最近的非空值所替代，也就不会出现间隔（gap）的情况\n\n- **lookahead (const bool)** 默认值为[barmerge.lookahead_off](https://cn.tradingview.com/pine-script-reference/v3/#var_barmerge{dot}lookahead_off)。\n\n  合并所请求数据位置的策略。 请求的条形图与当前的条形图按照k线开盘时间合并。 这种合并策略可能导致从“未来”获取数据计算历史的不良影响。 这在回溯测试策略中不被接受，但在指标中可使用。\n\n  ```\n  //@version=4\n  study('My Script', overlay=true)\n  a = security(syminfo.tickerid, '60', low, lookahead=barmerge.lookahead_off)\n  plot(a, color=color.red)\n  b = security(syminfo.tickerid, '60', low, lookahead=barmerge.lookahead_on)\n  plot(b, color=color.lime)\n  ```\n\n  ![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102163742.png)\n\n  红色是lookahead_off，绿色是lookahead_on。 我们发现开启了lookahead功能后，所产生的最低价是整个时间段的最低价，而原先是开盘K点的最低价。\n\n  \n\n## bar state.* 变量\n\n- barstate.isfirst  当前k线为k线组的第一条k线\n\n- barstate.islast  当前k线为k线组的最后一条k线\n\n- barstate.ishistory  当前k线为历史k线\n\n- batstate.isrealtime 当前k线为实时k线\n\n- barstate.isnew 新K线的第一次更新\n\n- batstate.isconfirmed =当前k线的最后(关闭)更新 \n\n  > 不建议在[security](https://cn.tradingview.com/pine-script-reference/v3/#fun_security)表达式中使用[barstate.isconfirmed](https://cn.tradingview.com/pine-script-reference/v3/#var_barstate{dot}isconfirmed)\n\n所有的历史柱线都曾被认为是新的柱线，因为脚本是依次执行的。当柱线第一更开盘价生成的时候，认为此柱线是新的。\n\n## 会话和时间信息\n\nPine 提供方法来生成 交易区间，时间和日期的信息。\n\ntime(变量): 返回的是时间戳格式\n\ntime(函数)：time(resolution, session) → series 返回的是按照session 格式返回的时间，如果不在session时间段的话便会返回na值\n\n```\n//@version=4\nstudy(\"Time\", overlay=true)\nt1 = time(timeframe.period, \"0000-0000\")\nbgcolor(t1 ? color.blue : na)\n```\n\nsession = \"0000-0000:23456\" 即24h，去除周六日，运行结果如下\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102203555.png)\n\n可以看到，周一至周五背景都变成了蓝色，因为t1 不在session的范围内的时候返回na值\n\n交易区间的格式有\n\n- 0000-0000:1234567 24小时交易，时间从午夜0点开始\n- 0000-0000:23456 工作日24小时交易\n- 1700-1700：24小时交易，时间从17点开始\n- 0930-1700:146  交易时间为09:30~17:00，交易时间在周日（1），周三（4），周五（6）\n\n- 24x7 等价于 0000-0000:1234567\n\n```\n// 判断是否为30min的新柱线\n//@version=4\nstudy(\"new 30 min bar\")\nis_newbar(res) =>\n    t = time(res)\n    not na(t) and (na(t[1]) or t > t[1])\nplot(is_newbar(\"30\") ? 1 : 0)\n```\n\n用到的函数变量和类型\n\n- time：UNIX格式的当前k线时间\n- timenow：UNIX格式的当前时间\n- syminfo.timezone：时区\n\n当前K线用到的变量\n\n- year/month/weekofyear\n- dayofmonth\n- dayofweek（sunday,monday 等）\n- hour/minute/second\n\n创建时间\n\n- [timestamp(year, month, day, hour, minute)](https://www.tradingview.com/pine-script-reference/v4/#fun_timestamp) \n\n## 策略编写\n\n### backtesting & forwardtesting\n\nstrategy脚本是可以产生交易订单的Pine 脚本。利用strategy 可以做策略回测（backtesting）和 模拟交易（forwardtesting）\n\n无论backtesting 还是forwardtesting，计算都是**<u>默认</u>**发生在K线收盘的时候，但是在forwardtesting 的时候，可以选择在每一个tick发生的时候，都运行一次。\n\n做法一是调整strategy的 Setting/Properties，或者修改代码，添加`strategy(... ,calc_on_every_tick=true )` ，此外还可以选择在每笔订单完成之后计算`strategy(... , calc_on_order_fills=true)`\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102215042.png)\n\n### 经纪商模拟\n\n仅仅只有OHLC数据的话，K线内数据的生成有一套逻辑，如果最高价更接近开盘价，生成顺序是 open->high->low->close，此外还假设价格是没有gaps的\n\n### 订单生成命令\n\n#### strategy.entry 订单生成函数\n\n这是进入市场的命令。 如果具有相同ID的订单已经挂起，则可修改订单。 如果没有指定ID的订单，则会发出新的订单。 \n\n要取消/停用预挂单，应使用命令[strategy.cancel](https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}cancel)或[strategy.cancel_all](https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}cancel_all)。 \n\n与函数[strategy.order](https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}order)相比，[strategy.entry](https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}entry)功能受金字塔影响，可以正确反转市场位置。 如果“Limit”和“stop”参数均为“NaN”，则订单类型为市场订单。\n\n```\nstrategy.entry(id, long, qty, limit, stop, oca_name, oca_type, comment, when) → void\n```\n\n#### strategy.exit 订单退出函数\n\n```\nstrategy.exit(id, from_entry, qty, qty_percent, profit, limit, loss, stop, trail_price, trail_points, trail_offset, oca_name, comment, when) → void\n```\n\n这是一个退出指定进场或整个市场地位的命令，重点区分它和strategy.close 的不同\n\n- id(string): 订单的标识符。\n- from_entry(string): 这里填入要平仓的订单的标识符，默认为空。\n- qty: 平仓手数(弄清楚合约的大小)\n- qty_percent: 平台的比例\n- profit: 获利点数(一定搞清楚单位是点还是步)\n- limit: 与profit 相似，limit约定获利的价格\n- loss:止损点数\n- stop:与loss 相似，stop约定止损的价格\n- tail.*: 指明跟踪指数\n\n#### strategy.order\n\n这条命令可以生成开仓也可以生成平仓命令，但是它不受金字塔影响。它的作用就是弥补strategy.entry 和 strategy.exit 函数的不灵活星。\n\n#### 实例\n\n下面是几个例子，可以帮助我们理解strategy函数\n\n##### 例1\n\n```\n//@version=4\nstrategy(\"revers demo\")\nif bar_index > 4000\n    strategy.entry(\"buy\", strategy.long, 4, when=strategy.position_size <= 0)\n    strategy.entry(\"sell\", strategy.short, 6, when=strategy.position_size > 0)\nplot(strategy.equity)\n```\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191103235510.png)\n\n当仓位为空头或者无头寸的话，买4。当仓位为多头的话，卖6。\n\n我们可以看到entry中buy 或sell 在交易的时候，会自动平仓，平掉反向的仓位。仓位在+4 --> -6 变化。\n\n##### 例2\n\n```\n//@version=4\nstrategy(\"Partial exit demo\")\nif bar_index > 6500 and bar_index <6550\n    strategy.entry(\"buy\", strategy.long, 40000, when=strategy.position_size <= 0)\nstrategy.exit(\"bracket1\", \"buy\",  20000, profit = 3000,loss = 3000)\nstrategy.exit(\"bracket2\", \"buy\",  profit=2000, loss=2000)\nplot(strategy.equity)\n```\n\n盈亏曲线\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104151143.png)\n\n交易逻辑\n\n- buy：当空仓时候买入，40000笔合约（40000美金）\n- bracket1：设定平仓对象为buy标识的交易，平仓2000美金，止盈300点（单位为步，3000步=300点）。止损300点\n- bracket2：止盈止损200点\n\n下面结合交易清单具体分析\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104215413.png)\n\n- 1：空仓买入4000美金\n- 2：止损200点，亏损20000 * 200 * 0.0001 = $ 400，从图中可以看到是bracket2 先止损\n- 3：价格继续向下，亏损300点，bracket1策略触发，亏损$ 600\n- 4,5,6:同上逻辑\n\n### 风险管理\n\nstrategy.risk.* 一系列函数，可以帮助进行风险管理。当风险管理规则被激活的时候，没有订单会生成。\n\n```\n//@version=4\nstrategy(\"multi risk demo\", overlay=true, pyramiding=10, calc_on_order_fills = true)\nif year > 2014\n    strategy.entry(\"LE\", strategy.long)\nstrategy.risk.max_intraday_filled_orders(5)\nstrategy.risk.max_intraday_filled_orders(2)\n```\n\n- strategy.risk.max_intraday_filled_orders(2)\n\n  限制一天成交的最大的交易单数，一旦达到，所有未成交订单全部取消，成交订单关闭。并且一直关闭交易直到本交易日结束。\n\n  ![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104172514.png)\n\n  上图中，当第二笔交易生成的时候，同时也是两笔交易关闭的时间。\n\n- 其余的函数参考手册\n\n## 指标重绘\n\n历史数据仅仅包含OHLC，不包含线内的运动。这会导致的问题是，历史数据上的回测和实时数据不一致的情况。\n\n另外一个担心是，未来函数的使用。这里尤其要关注security 函数，此函数可能会错误的引入未来的信息。\n\n## 绘图\n\nPine V4 中存在两种绘图类型：label 和 line。\n\n> 注：用户的绘图和 编程绘图是不一样的，编程得到的绘图是不能用鼠标修改的。\n\n和指标绘图函数(plot,plotshape,plotchar) 不一样的是，绘图函数可以在图表右侧没有K线的地方。\n\n### label\n\n```\nlabel.new(x, y, text, xloc, yloc, color, style, textcolor, size) → series[label]\n```\n\n```\n//@version=4\nstudy(\"My Script\", overlay=true)\nlabel.new(bar_index, high, style=label.style_none,\n          text=\"x=\" + tostring(bar_index) + \"\\ny=\" + tostring(high))\n```\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104175710.png)\n\n- x的位置是用bar_index 标识的，此时xloc 的默认值为xloc.barindex\n\n- y的位置是最高价\n\n- xloc取值：xloc.bar_index(默认) 和 xloc.bar_time\n\n- yloc取值：\n\n  - yloc.price 传入此函数，需要输入y值\n\n  - yloc.abovebar,yloc.belowbar 启动时，y值会失效。标签在图表上部或者下部\n  \n- style: 很多种，可能用到比较多的有label.style_none，无底色\n\nlabel.set_* 一系列函数可以用来对对象进一步的修改。\n\n### line\n\n```\nline.new(x1, y1, x2, y2, xloc, extend, color, style, width) → series[line]\n```\n\n- extend: extend.none/extend.right/extend.left\n\n  \n\n","source":"_posts/Pine Script 学习笔记(二).md","raw":"---\ntitle: Pine Script 学习笔记(二)——基本特点\ncomments: false\ndate: 2019-11-04 21:45:13\ntags: [Pine, TradingView, 量化]\ncategories: \n- 量化\n- Pine\nkeywords:\ndescription:\ntop_img:\ncover:  https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104214742.png\ntoc:\ntoc_number:\ncopyright:\n---\n\n## Context switching and the security function\n\nsecurity 函数可以用于按照特定要求请求数据\n\n```\n//@version=4\nstudy(\"Example security 1\", overlay=true)\nibm_15 = security(\"NYSE:IBM\", \"15\", close)\nplot(ibm_15)\n```\n\n![](https://www.tradingview.com/pine-script-docs/en/v4/_images/Chart_security_1.png)\n\n```\nsecurity(symbol, resolution, expression, gaps, lookahead)\n```\n\n- **symbol (string)** 商品代码。\n\n  商品代码可以包含数据提供商信息，也可以不含\n\n  如 \"NYSE:IBM\",\"BATS:IBM\",\"IBM\"(如不提供，默认使用BATS)\n\n   [syminfo.ticker](https://www.tradingview.com/pine-script-reference/v4/#var_syminfo{dot}ticker) and [syminfo.tickerid](https://www.tradingview.com/pine-script-reference/v4/#var_syminfo{dot}tickerid)是表示当前图标上的商品代码，syminfo.ticker是不含数据供应商信息，syminfo.tickerid是包含供应商信息。Pine教程建议使用后者，为了避免数据的模糊性\n\n- **resolution (string)** 分辨率/ **timeframe**时间周期\n  - 分钟级：1，5，10，21，60，120，等等\n  - 日级: D,1D,2D 等等\n  - 周级：W，1W，2W\n  - 月级：M，1M，2M\n  - timeframe.period 记录当前图标时间周期\n\n- **expression (series)** 计数并从 [security](https://cn.tradingview.com/pine-script-reference/v3/#fun_security)调用返回的表达式。\n\n  如果仅仅是获取收盘价数据，我们可以用`security('EURUSD','D',close)`\n\n  但是，expression能给我们提供更加丰富的操作，比如，我们需要知道，EURUSD相对于GBPUSD 上涨的幅度\n\n  ```Pine\n  //@version=4\n  study(title = \"Advance Decline Ratio\", shorttitle=\"ADR\")\n  ratio(t1, t2, source) =>\n      s1 = security(t1, timeframe.period, source)\n      s2 = security(t2, timeframe.period, source)\n      s1 / s2\n  plot(ratio(\"GBPUSD\", \"EURUSD\", close-open))\n  ```\n\n  ![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102123145.png)\n\n  如上图所以，GBPUSD上涨幅度/EURUSD 的上涨幅度我们可以很轻松的通过7行代码实现。在绝大多数情况下，两者是同比例变动，但是在某些特等情况下，变化是相反的。这对于研究这两种货币对的走势关系有很大的帮助。\n\n\n\n在security数据应用到当前图表上的时候，有两个控制，一个是gaps，另一个是lookahead\n\n- **gaps (const bool)** 默认值为[barmerge.gaps_off](https://cn.tradingview.com/pine-script-reference/v3/#var_barmerge{dot}gaps_off)。可以理解为数据平滑的操作，因为数据中会存在空值（na），在gaps_off的情况下，na会被离它最近的非空值所替代，也就不会出现间隔（gap）的情况\n\n- **lookahead (const bool)** 默认值为[barmerge.lookahead_off](https://cn.tradingview.com/pine-script-reference/v3/#var_barmerge{dot}lookahead_off)。\n\n  合并所请求数据位置的策略。 请求的条形图与当前的条形图按照k线开盘时间合并。 这种合并策略可能导致从“未来”获取数据计算历史的不良影响。 这在回溯测试策略中不被接受，但在指标中可使用。\n\n  ```\n  //@version=4\n  study('My Script', overlay=true)\n  a = security(syminfo.tickerid, '60', low, lookahead=barmerge.lookahead_off)\n  plot(a, color=color.red)\n  b = security(syminfo.tickerid, '60', low, lookahead=barmerge.lookahead_on)\n  plot(b, color=color.lime)\n  ```\n\n  ![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102163742.png)\n\n  红色是lookahead_off，绿色是lookahead_on。 我们发现开启了lookahead功能后，所产生的最低价是整个时间段的最低价，而原先是开盘K点的最低价。\n\n  \n\n## bar state.* 变量\n\n- barstate.isfirst  当前k线为k线组的第一条k线\n\n- barstate.islast  当前k线为k线组的最后一条k线\n\n- barstate.ishistory  当前k线为历史k线\n\n- batstate.isrealtime 当前k线为实时k线\n\n- barstate.isnew 新K线的第一次更新\n\n- batstate.isconfirmed =当前k线的最后(关闭)更新 \n\n  > 不建议在[security](https://cn.tradingview.com/pine-script-reference/v3/#fun_security)表达式中使用[barstate.isconfirmed](https://cn.tradingview.com/pine-script-reference/v3/#var_barstate{dot}isconfirmed)\n\n所有的历史柱线都曾被认为是新的柱线，因为脚本是依次执行的。当柱线第一更开盘价生成的时候，认为此柱线是新的。\n\n## 会话和时间信息\n\nPine 提供方法来生成 交易区间，时间和日期的信息。\n\ntime(变量): 返回的是时间戳格式\n\ntime(函数)：time(resolution, session) → series 返回的是按照session 格式返回的时间，如果不在session时间段的话便会返回na值\n\n```\n//@version=4\nstudy(\"Time\", overlay=true)\nt1 = time(timeframe.period, \"0000-0000\")\nbgcolor(t1 ? color.blue : na)\n```\n\nsession = \"0000-0000:23456\" 即24h，去除周六日，运行结果如下\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102203555.png)\n\n可以看到，周一至周五背景都变成了蓝色，因为t1 不在session的范围内的时候返回na值\n\n交易区间的格式有\n\n- 0000-0000:1234567 24小时交易，时间从午夜0点开始\n- 0000-0000:23456 工作日24小时交易\n- 1700-1700：24小时交易，时间从17点开始\n- 0930-1700:146  交易时间为09:30~17:00，交易时间在周日（1），周三（4），周五（6）\n\n- 24x7 等价于 0000-0000:1234567\n\n```\n// 判断是否为30min的新柱线\n//@version=4\nstudy(\"new 30 min bar\")\nis_newbar(res) =>\n    t = time(res)\n    not na(t) and (na(t[1]) or t > t[1])\nplot(is_newbar(\"30\") ? 1 : 0)\n```\n\n用到的函数变量和类型\n\n- time：UNIX格式的当前k线时间\n- timenow：UNIX格式的当前时间\n- syminfo.timezone：时区\n\n当前K线用到的变量\n\n- year/month/weekofyear\n- dayofmonth\n- dayofweek（sunday,monday 等）\n- hour/minute/second\n\n创建时间\n\n- [timestamp(year, month, day, hour, minute)](https://www.tradingview.com/pine-script-reference/v4/#fun_timestamp) \n\n## 策略编写\n\n### backtesting & forwardtesting\n\nstrategy脚本是可以产生交易订单的Pine 脚本。利用strategy 可以做策略回测（backtesting）和 模拟交易（forwardtesting）\n\n无论backtesting 还是forwardtesting，计算都是**<u>默认</u>**发生在K线收盘的时候，但是在forwardtesting 的时候，可以选择在每一个tick发生的时候，都运行一次。\n\n做法一是调整strategy的 Setting/Properties，或者修改代码，添加`strategy(... ,calc_on_every_tick=true )` ，此外还可以选择在每笔订单完成之后计算`strategy(... , calc_on_order_fills=true)`\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102215042.png)\n\n### 经纪商模拟\n\n仅仅只有OHLC数据的话，K线内数据的生成有一套逻辑，如果最高价更接近开盘价，生成顺序是 open->high->low->close，此外还假设价格是没有gaps的\n\n### 订单生成命令\n\n#### strategy.entry 订单生成函数\n\n这是进入市场的命令。 如果具有相同ID的订单已经挂起，则可修改订单。 如果没有指定ID的订单，则会发出新的订单。 \n\n要取消/停用预挂单，应使用命令[strategy.cancel](https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}cancel)或[strategy.cancel_all](https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}cancel_all)。 \n\n与函数[strategy.order](https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}order)相比，[strategy.entry](https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}entry)功能受金字塔影响，可以正确反转市场位置。 如果“Limit”和“stop”参数均为“NaN”，则订单类型为市场订单。\n\n```\nstrategy.entry(id, long, qty, limit, stop, oca_name, oca_type, comment, when) → void\n```\n\n#### strategy.exit 订单退出函数\n\n```\nstrategy.exit(id, from_entry, qty, qty_percent, profit, limit, loss, stop, trail_price, trail_points, trail_offset, oca_name, comment, when) → void\n```\n\n这是一个退出指定进场或整个市场地位的命令，重点区分它和strategy.close 的不同\n\n- id(string): 订单的标识符。\n- from_entry(string): 这里填入要平仓的订单的标识符，默认为空。\n- qty: 平仓手数(弄清楚合约的大小)\n- qty_percent: 平台的比例\n- profit: 获利点数(一定搞清楚单位是点还是步)\n- limit: 与profit 相似，limit约定获利的价格\n- loss:止损点数\n- stop:与loss 相似，stop约定止损的价格\n- tail.*: 指明跟踪指数\n\n#### strategy.order\n\n这条命令可以生成开仓也可以生成平仓命令，但是它不受金字塔影响。它的作用就是弥补strategy.entry 和 strategy.exit 函数的不灵活星。\n\n#### 实例\n\n下面是几个例子，可以帮助我们理解strategy函数\n\n##### 例1\n\n```\n//@version=4\nstrategy(\"revers demo\")\nif bar_index > 4000\n    strategy.entry(\"buy\", strategy.long, 4, when=strategy.position_size <= 0)\n    strategy.entry(\"sell\", strategy.short, 6, when=strategy.position_size > 0)\nplot(strategy.equity)\n```\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191103235510.png)\n\n当仓位为空头或者无头寸的话，买4。当仓位为多头的话，卖6。\n\n我们可以看到entry中buy 或sell 在交易的时候，会自动平仓，平掉反向的仓位。仓位在+4 --> -6 变化。\n\n##### 例2\n\n```\n//@version=4\nstrategy(\"Partial exit demo\")\nif bar_index > 6500 and bar_index <6550\n    strategy.entry(\"buy\", strategy.long, 40000, when=strategy.position_size <= 0)\nstrategy.exit(\"bracket1\", \"buy\",  20000, profit = 3000,loss = 3000)\nstrategy.exit(\"bracket2\", \"buy\",  profit=2000, loss=2000)\nplot(strategy.equity)\n```\n\n盈亏曲线\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104151143.png)\n\n交易逻辑\n\n- buy：当空仓时候买入，40000笔合约（40000美金）\n- bracket1：设定平仓对象为buy标识的交易，平仓2000美金，止盈300点（单位为步，3000步=300点）。止损300点\n- bracket2：止盈止损200点\n\n下面结合交易清单具体分析\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104215413.png)\n\n- 1：空仓买入4000美金\n- 2：止损200点，亏损20000 * 200 * 0.0001 = $ 400，从图中可以看到是bracket2 先止损\n- 3：价格继续向下，亏损300点，bracket1策略触发，亏损$ 600\n- 4,5,6:同上逻辑\n\n### 风险管理\n\nstrategy.risk.* 一系列函数，可以帮助进行风险管理。当风险管理规则被激活的时候，没有订单会生成。\n\n```\n//@version=4\nstrategy(\"multi risk demo\", overlay=true, pyramiding=10, calc_on_order_fills = true)\nif year > 2014\n    strategy.entry(\"LE\", strategy.long)\nstrategy.risk.max_intraday_filled_orders(5)\nstrategy.risk.max_intraday_filled_orders(2)\n```\n\n- strategy.risk.max_intraday_filled_orders(2)\n\n  限制一天成交的最大的交易单数，一旦达到，所有未成交订单全部取消，成交订单关闭。并且一直关闭交易直到本交易日结束。\n\n  ![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104172514.png)\n\n  上图中，当第二笔交易生成的时候，同时也是两笔交易关闭的时间。\n\n- 其余的函数参考手册\n\n## 指标重绘\n\n历史数据仅仅包含OHLC，不包含线内的运动。这会导致的问题是，历史数据上的回测和实时数据不一致的情况。\n\n另外一个担心是，未来函数的使用。这里尤其要关注security 函数，此函数可能会错误的引入未来的信息。\n\n## 绘图\n\nPine V4 中存在两种绘图类型：label 和 line。\n\n> 注：用户的绘图和 编程绘图是不一样的，编程得到的绘图是不能用鼠标修改的。\n\n和指标绘图函数(plot,plotshape,plotchar) 不一样的是，绘图函数可以在图表右侧没有K线的地方。\n\n### label\n\n```\nlabel.new(x, y, text, xloc, yloc, color, style, textcolor, size) → series[label]\n```\n\n```\n//@version=4\nstudy(\"My Script\", overlay=true)\nlabel.new(bar_index, high, style=label.style_none,\n          text=\"x=\" + tostring(bar_index) + \"\\ny=\" + tostring(high))\n```\n\n![](https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104175710.png)\n\n- x的位置是用bar_index 标识的，此时xloc 的默认值为xloc.barindex\n\n- y的位置是最高价\n\n- xloc取值：xloc.bar_index(默认) 和 xloc.bar_time\n\n- yloc取值：\n\n  - yloc.price 传入此函数，需要输入y值\n\n  - yloc.abovebar,yloc.belowbar 启动时，y值会失效。标签在图表上部或者下部\n  \n- style: 很多种，可能用到比较多的有label.style_none，无底色\n\nlabel.set_* 一系列函数可以用来对对象进一步的修改。\n\n### line\n\n```\nline.new(x1, y1, x2, y2, xloc, extend, color, style, width) → series[line]\n```\n\n- extend: extend.none/extend.right/extend.left\n\n  \n\n","slug":"Pine Script 学习笔记(二)","published":1,"updated":"2019-11-04T13:58:45.306Z","layout":"post","photos":[],"link":"","_id":"ck3acxtjy000hpw8m69jx2dej","content":"<h2 id=\"Context-switching-and-the-security-function\"><a href=\"#Context-switching-and-the-security-function\" class=\"headerlink\" title=\"Context switching and the security function\"></a>Context switching and the security function</h2><p>security 函数可以用于按照特定要求请求数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;Example security 1&quot;, overlay=true)</span><br><span class=\"line\">ibm_15 = security(&quot;NYSE:IBM&quot;, &quot;15&quot;, close)</span><br><span class=\"line\">plot(ibm_15)</span><br></pre></td></tr></table></figure>\n\n<p><img alt data-src=\"https://www.tradingview.com/pine-script-docs/en/v4/_images/Chart_security_1.png\" class=\"lozad\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">security(symbol, resolution, expression, gaps, lookahead)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>symbol (string)</strong> 商品代码。</p>\n<p>商品代码可以包含数据提供商信息，也可以不含</p>\n<p>如 “NYSE:IBM”,”BATS:IBM”,”IBM”(如不提供，默认使用BATS)</p>\n<p> <a href=\"https://www.tradingview.com/pine-script-reference/v4/#var_syminfo{dot}ticker\" target=\"_blank\" rel=\"noopener\">syminfo.ticker</a> and <a href=\"https://www.tradingview.com/pine-script-reference/v4/#var_syminfo{dot}tickerid\" target=\"_blank\" rel=\"noopener\">syminfo.tickerid</a>是表示当前图标上的商品代码，syminfo.ticker是不含数据供应商信息，syminfo.tickerid是包含供应商信息。Pine教程建议使用后者，为了避免数据的模糊性</p>\n</li>\n<li><p><strong>resolution (string)</strong> 分辨率/ <strong>timeframe</strong>时间周期</p>\n<ul>\n<li>分钟级：1，5，10，21，60，120，等等</li>\n<li>日级: D,1D,2D 等等</li>\n<li>周级：W，1W，2W</li>\n<li>月级：M，1M，2M</li>\n<li>timeframe.period 记录当前图标时间周期</li>\n</ul>\n</li>\n<li><p><strong>expression (series)</strong> 计数并从 <a href=\"https://cn.tradingview.com/pine-script-reference/v3/#fun_security\" target=\"_blank\" rel=\"noopener\">security</a>调用返回的表达式。</p>\n<p>如果仅仅是获取收盘价数据，我们可以用<code>security(&#39;EURUSD&#39;,&#39;D&#39;,close)</code></p>\n<p>但是，expression能给我们提供更加丰富的操作，比如，我们需要知道，EURUSD相对于GBPUSD 上涨的幅度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(title = &quot;Advance Decline Ratio&quot;, shorttitle=&quot;ADR&quot;)</span><br><span class=\"line\">ratio(t1, t2, source) =&gt;</span><br><span class=\"line\">    s1 = security(t1, timeframe.period, source)</span><br><span class=\"line\">    s2 = security(t2, timeframe.period, source)</span><br><span class=\"line\">    s1 / s2</span><br><span class=\"line\">plot(ratio(&quot;GBPUSD&quot;, &quot;EURUSD&quot;, close-open))</span><br></pre></td></tr></table></figure>\n\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102123145.png\" class=\"lozad\"></p>\n<p>如上图所以，GBPUSD上涨幅度/EURUSD 的上涨幅度我们可以很轻松的通过7行代码实现。在绝大多数情况下，两者是同比例变动，但是在某些特等情况下，变化是相反的。这对于研究这两种货币对的走势关系有很大的帮助。</p>\n</li>\n</ul>\n<p>在security数据应用到当前图表上的时候，有两个控制，一个是gaps，另一个是lookahead</p>\n<ul>\n<li><p><strong>gaps (const bool)</strong> 默认值为<a href=\"https://cn.tradingview.com/pine-script-reference/v3/#var_barmerge{dot}gaps_off\" target=\"_blank\" rel=\"noopener\">barmerge.gaps_off</a>。可以理解为数据平滑的操作，因为数据中会存在空值（na），在gaps_off的情况下，na会被离它最近的非空值所替代，也就不会出现间隔（gap）的情况</p>\n</li>\n<li><p><strong>lookahead (const bool)</strong> 默认值为<a href=\"https://cn.tradingview.com/pine-script-reference/v3/#var_barmerge{dot}lookahead_off\" target=\"_blank\" rel=\"noopener\">barmerge.lookahead_off</a>。</p>\n<p>合并所请求数据位置的策略。 请求的条形图与当前的条形图按照k线开盘时间合并。 这种合并策略可能导致从“未来”获取数据计算历史的不良影响。 这在回溯测试策略中不被接受，但在指标中可使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&apos;My Script&apos;, overlay=true)</span><br><span class=\"line\">a = security(syminfo.tickerid, &apos;60&apos;, low, lookahead=barmerge.lookahead_off)</span><br><span class=\"line\">plot(a, color=color.red)</span><br><span class=\"line\">b = security(syminfo.tickerid, &apos;60&apos;, low, lookahead=barmerge.lookahead_on)</span><br><span class=\"line\">plot(b, color=color.lime)</span><br></pre></td></tr></table></figure>\n\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102163742.png\" class=\"lozad\"></p>\n<p>红色是lookahead_off，绿色是lookahead_on。 我们发现开启了lookahead功能后，所产生的最低价是整个时间段的最低价，而原先是开盘K点的最低价。</p>\n</li>\n</ul>\n<h2 id=\"bar-state-变量\"><a href=\"#bar-state-变量\" class=\"headerlink\" title=\"bar state.* 变量\"></a>bar state.* 变量</h2><ul>\n<li><p>barstate.isfirst  当前k线为k线组的第一条k线</p>\n</li>\n<li><p>barstate.islast  当前k线为k线组的最后一条k线</p>\n</li>\n<li><p>barstate.ishistory  当前k线为历史k线</p>\n</li>\n<li><p>batstate.isrealtime 当前k线为实时k线</p>\n</li>\n<li><p>barstate.isnew 新K线的第一次更新</p>\n</li>\n<li><p>batstate.isconfirmed =当前k线的最后(关闭)更新 </p>\n<blockquote>\n<p>不建议在<a href=\"https://cn.tradingview.com/pine-script-reference/v3/#fun_security\" target=\"_blank\" rel=\"noopener\">security</a>表达式中使用<a href=\"https://cn.tradingview.com/pine-script-reference/v3/#var_barstate{dot}isconfirmed\" target=\"_blank\" rel=\"noopener\">barstate.isconfirmed</a></p>\n</blockquote>\n</li>\n</ul>\n<p>所有的历史柱线都曾被认为是新的柱线，因为脚本是依次执行的。当柱线第一更开盘价生成的时候，认为此柱线是新的。</p>\n<h2 id=\"会话和时间信息\"><a href=\"#会话和时间信息\" class=\"headerlink\" title=\"会话和时间信息\"></a>会话和时间信息</h2><p>Pine 提供方法来生成 交易区间，时间和日期的信息。</p>\n<p>time(变量): 返回的是时间戳格式</p>\n<p>time(函数)：time(resolution, session) → series 返回的是按照session 格式返回的时间，如果不在session时间段的话便会返回na值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;Time&quot;, overlay=true)</span><br><span class=\"line\">t1 = time(timeframe.period, &quot;0000-0000&quot;)</span><br><span class=\"line\">bgcolor(t1 ? color.blue : na)</span><br></pre></td></tr></table></figure>\n\n<p>session = “0000-0000:23456” 即24h，去除周六日，运行结果如下</p>\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102203555.png\" class=\"lozad\"></p>\n<p>可以看到，周一至周五背景都变成了蓝色，因为t1 不在session的范围内的时候返回na值</p>\n<p>交易区间的格式有</p>\n<ul>\n<li><p>0000-0000:1234567 24小时交易，时间从午夜0点开始</p>\n</li>\n<li><p>0000-0000:23456 工作日24小时交易</p>\n</li>\n<li><p>1700-1700：24小时交易，时间从17点开始</p>\n</li>\n<li><p>0930-1700:146  交易时间为09:30~17:00，交易时间在周日（1），周三（4），周五（6）</p>\n</li>\n<li><p>24x7 等价于 0000-0000:1234567</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断是否为30min的新柱线</span><br><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;new 30 min bar&quot;)</span><br><span class=\"line\">is_newbar(res) =&gt;</span><br><span class=\"line\">    t = time(res)</span><br><span class=\"line\">    not na(t) and (na(t[1]) or t &gt; t[1])</span><br><span class=\"line\">plot(is_newbar(&quot;30&quot;) ? 1 : 0)</span><br></pre></td></tr></table></figure>\n\n<p>用到的函数变量和类型</p>\n<ul>\n<li>time：UNIX格式的当前k线时间</li>\n<li>timenow：UNIX格式的当前时间</li>\n<li>syminfo.timezone：时区</li>\n</ul>\n<p>当前K线用到的变量</p>\n<ul>\n<li>year/month/weekofyear</li>\n<li>dayofmonth</li>\n<li>dayofweek（sunday,monday 等）</li>\n<li>hour/minute/second</li>\n</ul>\n<p>创建时间</p>\n<ul>\n<li><a href=\"https://www.tradingview.com/pine-script-reference/v4/#fun_timestamp\" target=\"_blank\" rel=\"noopener\">timestamp(year, month, day, hour, minute)</a> </li>\n</ul>\n<h2 id=\"策略编写\"><a href=\"#策略编写\" class=\"headerlink\" title=\"策略编写\"></a>策略编写</h2><h3 id=\"backtesting-amp-forwardtesting\"><a href=\"#backtesting-amp-forwardtesting\" class=\"headerlink\" title=\"backtesting &amp; forwardtesting\"></a>backtesting &amp; forwardtesting</h3><p>strategy脚本是可以产生交易订单的Pine 脚本。利用strategy 可以做策略回测（backtesting）和 模拟交易（forwardtesting）</p>\n<p>无论backtesting 还是forwardtesting，计算都是<strong><u>默认</u></strong>发生在K线收盘的时候，但是在forwardtesting 的时候，可以选择在每一个tick发生的时候，都运行一次。</p>\n<p>做法一是调整strategy的 Setting/Properties，或者修改代码，添加<code>strategy(... ,calc_on_every_tick=true )</code> ，此外还可以选择在每笔订单完成之后计算<code>strategy(... , calc_on_order_fills=true)</code></p>\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102215042.png\" class=\"lozad\"></p>\n<h3 id=\"经纪商模拟\"><a href=\"#经纪商模拟\" class=\"headerlink\" title=\"经纪商模拟\"></a>经纪商模拟</h3><p>仅仅只有OHLC数据的话，K线内数据的生成有一套逻辑，如果最高价更接近开盘价，生成顺序是 open-&gt;high-&gt;low-&gt;close，此外还假设价格是没有gaps的</p>\n<h3 id=\"订单生成命令\"><a href=\"#订单生成命令\" class=\"headerlink\" title=\"订单生成命令\"></a>订单生成命令</h3><h4 id=\"strategy-entry-订单生成函数\"><a href=\"#strategy-entry-订单生成函数\" class=\"headerlink\" title=\"strategy.entry 订单生成函数\"></a>strategy.entry 订单生成函数</h4><p>这是进入市场的命令。 如果具有相同ID的订单已经挂起，则可修改订单。 如果没有指定ID的订单，则会发出新的订单。 </p>\n<p>要取消/停用预挂单，应使用命令<a href=\"https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}cancel\" target=\"_blank\" rel=\"noopener\">strategy.cancel</a>或<a href=\"https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}cancel_all\" target=\"_blank\" rel=\"noopener\">strategy.cancel_all</a>。 </p>\n<p>与函数<a href=\"https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}order\" target=\"_blank\" rel=\"noopener\">strategy.order</a>相比，<a href=\"https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}entry\" target=\"_blank\" rel=\"noopener\">strategy.entry</a>功能受金字塔影响，可以正确反转市场位置。 如果“Limit”和“stop”参数均为“NaN”，则订单类型为市场订单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strategy.entry(id, long, qty, limit, stop, oca_name, oca_type, comment, when) → void</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"strategy-exit-订单退出函数\"><a href=\"#strategy-exit-订单退出函数\" class=\"headerlink\" title=\"strategy.exit 订单退出函数\"></a>strategy.exit 订单退出函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strategy.exit(id, from_entry, qty, qty_percent, profit, limit, loss, stop, trail_price, trail_points, trail_offset, oca_name, comment, when) → void</span><br></pre></td></tr></table></figure>\n\n<p>这是一个退出指定进场或整个市场地位的命令，重点区分它和strategy.close 的不同</p>\n<ul>\n<li>id(string): 订单的标识符。</li>\n<li>from_entry(string): 这里填入要平仓的订单的标识符，默认为空。</li>\n<li>qty: 平仓手数(弄清楚合约的大小)</li>\n<li>qty_percent: 平台的比例</li>\n<li>profit: 获利点数(一定搞清楚单位是点还是步)</li>\n<li>limit: 与profit 相似，limit约定获利的价格</li>\n<li>loss:止损点数</li>\n<li>stop:与loss 相似，stop约定止损的价格</li>\n<li>tail.*: 指明跟踪指数</li>\n</ul>\n<h4 id=\"strategy-order\"><a href=\"#strategy-order\" class=\"headerlink\" title=\"strategy.order\"></a>strategy.order</h4><p>这条命令可以生成开仓也可以生成平仓命令，但是它不受金字塔影响。它的作用就是弥补strategy.entry 和 strategy.exit 函数的不灵活星。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>下面是几个例子，可以帮助我们理解strategy函数</p>\n<h5 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">strategy(&quot;revers demo&quot;)</span><br><span class=\"line\">if bar_index &gt; 4000</span><br><span class=\"line\">    strategy.entry(&quot;buy&quot;, strategy.long, 4, when=strategy.position_size &lt;= 0)</span><br><span class=\"line\">    strategy.entry(&quot;sell&quot;, strategy.short, 6, when=strategy.position_size &gt; 0)</span><br><span class=\"line\">plot(strategy.equity)</span><br></pre></td></tr></table></figure>\n\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191103235510.png\" class=\"lozad\"></p>\n<p>当仓位为空头或者无头寸的话，买4。当仓位为多头的话，卖6。</p>\n<p>我们可以看到entry中buy 或sell 在交易的时候，会自动平仓，平掉反向的仓位。仓位在+4 –&gt; -6 变化。</p>\n<h5 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">strategy(&quot;Partial exit demo&quot;)</span><br><span class=\"line\">if bar_index &gt; 6500 and bar_index &lt;6550</span><br><span class=\"line\">    strategy.entry(&quot;buy&quot;, strategy.long, 40000, when=strategy.position_size &lt;= 0)</span><br><span class=\"line\">strategy.exit(&quot;bracket1&quot;, &quot;buy&quot;,  20000, profit = 3000,loss = 3000)</span><br><span class=\"line\">strategy.exit(&quot;bracket2&quot;, &quot;buy&quot;,  profit=2000, loss=2000)</span><br><span class=\"line\">plot(strategy.equity)</span><br></pre></td></tr></table></figure>\n\n<p>盈亏曲线</p>\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104151143.png\" class=\"lozad\"></p>\n<p>交易逻辑</p>\n<ul>\n<li>buy：当空仓时候买入，40000笔合约（40000美金）</li>\n<li>bracket1：设定平仓对象为buy标识的交易，平仓2000美金，止盈300点（单位为步，3000步=300点）。止损300点</li>\n<li>bracket2：止盈止损200点</li>\n</ul>\n<p>下面结合交易清单具体分析</p>\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104215413.png\" class=\"lozad\"></p>\n<ul>\n<li>1：空仓买入4000美金</li>\n<li>2：止损200点，亏损20000 * 200 * 0.0001 = $ 400，从图中可以看到是bracket2 先止损</li>\n<li>3：价格继续向下，亏损300点，bracket1策略触发，亏损$ 600</li>\n<li>4,5,6:同上逻辑</li>\n</ul>\n<h3 id=\"风险管理\"><a href=\"#风险管理\" class=\"headerlink\" title=\"风险管理\"></a>风险管理</h3><p>strategy.risk.* 一系列函数，可以帮助进行风险管理。当风险管理规则被激活的时候，没有订单会生成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">strategy(&quot;multi risk demo&quot;, overlay=true, pyramiding=10, calc_on_order_fills = true)</span><br><span class=\"line\">if year &gt; 2014</span><br><span class=\"line\">    strategy.entry(&quot;LE&quot;, strategy.long)</span><br><span class=\"line\">strategy.risk.max_intraday_filled_orders(5)</span><br><span class=\"line\">strategy.risk.max_intraday_filled_orders(2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>strategy.risk.max_intraday_filled_orders(2)</p>\n<p>限制一天成交的最大的交易单数，一旦达到，所有未成交订单全部取消，成交订单关闭。并且一直关闭交易直到本交易日结束。</p>\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104172514.png\" class=\"lozad\"></p>\n<p>上图中，当第二笔交易生成的时候，同时也是两笔交易关闭的时间。</p>\n</li>\n<li><p>其余的函数参考手册</p>\n</li>\n</ul>\n<h2 id=\"指标重绘\"><a href=\"#指标重绘\" class=\"headerlink\" title=\"指标重绘\"></a>指标重绘</h2><p>历史数据仅仅包含OHLC，不包含线内的运动。这会导致的问题是，历史数据上的回测和实时数据不一致的情况。</p>\n<p>另外一个担心是，未来函数的使用。这里尤其要关注security 函数，此函数可能会错误的引入未来的信息。</p>\n<h2 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h2><p>Pine V4 中存在两种绘图类型：label 和 line。</p>\n<blockquote>\n<p>注：用户的绘图和 编程绘图是不一样的，编程得到的绘图是不能用鼠标修改的。</p>\n</blockquote>\n<p>和指标绘图函数(plot,plotshape,plotchar) 不一样的是，绘图函数可以在图表右侧没有K线的地方。</p>\n<h3 id=\"label\"><a href=\"#label\" class=\"headerlink\" title=\"label\"></a>label</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label.new(x, y, text, xloc, yloc, color, style, textcolor, size) → series[label]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;My Script&quot;, overlay=true)</span><br><span class=\"line\">label.new(bar_index, high, style=label.style_none,</span><br><span class=\"line\">          text=&quot;x=&quot; + tostring(bar_index) + &quot;\\ny=&quot; + tostring(high))</span><br></pre></td></tr></table></figure>\n\n<p><img alt data-src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104175710.png\" class=\"lozad\"></p>\n<ul>\n<li><p>x的位置是用bar_index 标识的，此时xloc 的默认值为xloc.barindex</p>\n</li>\n<li><p>y的位置是最高价</p>\n</li>\n<li><p>xloc取值：xloc.bar_index(默认) 和 xloc.bar_time</p>\n</li>\n<li><p>yloc取值：</p>\n<ul>\n<li><p>yloc.price 传入此函数，需要输入y值</p>\n</li>\n<li><p>yloc.abovebar,yloc.belowbar 启动时，y值会失效。标签在图表上部或者下部</p>\n</li>\n</ul>\n</li>\n<li><p>style: 很多种，可能用到比较多的有label.style_none，无底色</p>\n</li>\n</ul>\n<p>label.set_* 一系列函数可以用来对对象进一步的修改。</p>\n<h3 id=\"line\"><a href=\"#line\" class=\"headerlink\" title=\"line\"></a>line</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line.new(x1, y1, x2, y2, xloc, extend, color, style, width) → series[line]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>extend: extend.none/extend.right/extend.left</li>\n</ul>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"excerpt":"","more":"<h2 id=\"Context-switching-and-the-security-function\"><a href=\"#Context-switching-and-the-security-function\" class=\"headerlink\" title=\"Context switching and the security function\"></a>Context switching and the security function</h2><p>security 函数可以用于按照特定要求请求数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;Example security 1&quot;, overlay=true)</span><br><span class=\"line\">ibm_15 = security(&quot;NYSE:IBM&quot;, &quot;15&quot;, close)</span><br><span class=\"line\">plot(ibm_15)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.tradingview.com/pine-script-docs/en/v4/_images/Chart_security_1.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">security(symbol, resolution, expression, gaps, lookahead)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>symbol (string)</strong> 商品代码。</p>\n<p>商品代码可以包含数据提供商信息，也可以不含</p>\n<p>如 “NYSE:IBM”,”BATS:IBM”,”IBM”(如不提供，默认使用BATS)</p>\n<p> <a href=\"https://www.tradingview.com/pine-script-reference/v4/#var_syminfo{dot}ticker\" target=\"_blank\" rel=\"noopener\">syminfo.ticker</a> and <a href=\"https://www.tradingview.com/pine-script-reference/v4/#var_syminfo{dot}tickerid\" target=\"_blank\" rel=\"noopener\">syminfo.tickerid</a>是表示当前图标上的商品代码，syminfo.ticker是不含数据供应商信息，syminfo.tickerid是包含供应商信息。Pine教程建议使用后者，为了避免数据的模糊性</p>\n</li>\n<li><p><strong>resolution (string)</strong> 分辨率/ <strong>timeframe</strong>时间周期</p>\n<ul>\n<li>分钟级：1，5，10，21，60，120，等等</li>\n<li>日级: D,1D,2D 等等</li>\n<li>周级：W，1W，2W</li>\n<li>月级：M，1M，2M</li>\n<li>timeframe.period 记录当前图标时间周期</li>\n</ul>\n</li>\n<li><p><strong>expression (series)</strong> 计数并从 <a href=\"https://cn.tradingview.com/pine-script-reference/v3/#fun_security\" target=\"_blank\" rel=\"noopener\">security</a>调用返回的表达式。</p>\n<p>如果仅仅是获取收盘价数据，我们可以用<code>security(&#39;EURUSD&#39;,&#39;D&#39;,close)</code></p>\n<p>但是，expression能给我们提供更加丰富的操作，比如，我们需要知道，EURUSD相对于GBPUSD 上涨的幅度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(title = &quot;Advance Decline Ratio&quot;, shorttitle=&quot;ADR&quot;)</span><br><span class=\"line\">ratio(t1, t2, source) =&gt;</span><br><span class=\"line\">    s1 = security(t1, timeframe.period, source)</span><br><span class=\"line\">    s2 = security(t2, timeframe.period, source)</span><br><span class=\"line\">    s1 / s2</span><br><span class=\"line\">plot(ratio(&quot;GBPUSD&quot;, &quot;EURUSD&quot;, close-open))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102123145.png\" alt=\"\"></p>\n<p>如上图所以，GBPUSD上涨幅度/EURUSD 的上涨幅度我们可以很轻松的通过7行代码实现。在绝大多数情况下，两者是同比例变动，但是在某些特等情况下，变化是相反的。这对于研究这两种货币对的走势关系有很大的帮助。</p>\n</li>\n</ul>\n<p>在security数据应用到当前图表上的时候，有两个控制，一个是gaps，另一个是lookahead</p>\n<ul>\n<li><p><strong>gaps (const bool)</strong> 默认值为<a href=\"https://cn.tradingview.com/pine-script-reference/v3/#var_barmerge{dot}gaps_off\" target=\"_blank\" rel=\"noopener\">barmerge.gaps_off</a>。可以理解为数据平滑的操作，因为数据中会存在空值（na），在gaps_off的情况下，na会被离它最近的非空值所替代，也就不会出现间隔（gap）的情况</p>\n</li>\n<li><p><strong>lookahead (const bool)</strong> 默认值为<a href=\"https://cn.tradingview.com/pine-script-reference/v3/#var_barmerge{dot}lookahead_off\" target=\"_blank\" rel=\"noopener\">barmerge.lookahead_off</a>。</p>\n<p>合并所请求数据位置的策略。 请求的条形图与当前的条形图按照k线开盘时间合并。 这种合并策略可能导致从“未来”获取数据计算历史的不良影响。 这在回溯测试策略中不被接受，但在指标中可使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&apos;My Script&apos;, overlay=true)</span><br><span class=\"line\">a = security(syminfo.tickerid, &apos;60&apos;, low, lookahead=barmerge.lookahead_off)</span><br><span class=\"line\">plot(a, color=color.red)</span><br><span class=\"line\">b = security(syminfo.tickerid, &apos;60&apos;, low, lookahead=barmerge.lookahead_on)</span><br><span class=\"line\">plot(b, color=color.lime)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102163742.png\" alt=\"\"></p>\n<p>红色是lookahead_off，绿色是lookahead_on。 我们发现开启了lookahead功能后，所产生的最低价是整个时间段的最低价，而原先是开盘K点的最低价。</p>\n</li>\n</ul>\n<h2 id=\"bar-state-变量\"><a href=\"#bar-state-变量\" class=\"headerlink\" title=\"bar state.* 变量\"></a>bar state.* 变量</h2><ul>\n<li><p>barstate.isfirst  当前k线为k线组的第一条k线</p>\n</li>\n<li><p>barstate.islast  当前k线为k线组的最后一条k线</p>\n</li>\n<li><p>barstate.ishistory  当前k线为历史k线</p>\n</li>\n<li><p>batstate.isrealtime 当前k线为实时k线</p>\n</li>\n<li><p>barstate.isnew 新K线的第一次更新</p>\n</li>\n<li><p>batstate.isconfirmed =当前k线的最后(关闭)更新 </p>\n<blockquote>\n<p>不建议在<a href=\"https://cn.tradingview.com/pine-script-reference/v3/#fun_security\" target=\"_blank\" rel=\"noopener\">security</a>表达式中使用<a href=\"https://cn.tradingview.com/pine-script-reference/v3/#var_barstate{dot}isconfirmed\" target=\"_blank\" rel=\"noopener\">barstate.isconfirmed</a></p>\n</blockquote>\n</li>\n</ul>\n<p>所有的历史柱线都曾被认为是新的柱线，因为脚本是依次执行的。当柱线第一更开盘价生成的时候，认为此柱线是新的。</p>\n<h2 id=\"会话和时间信息\"><a href=\"#会话和时间信息\" class=\"headerlink\" title=\"会话和时间信息\"></a>会话和时间信息</h2><p>Pine 提供方法来生成 交易区间，时间和日期的信息。</p>\n<p>time(变量): 返回的是时间戳格式</p>\n<p>time(函数)：time(resolution, session) → series 返回的是按照session 格式返回的时间，如果不在session时间段的话便会返回na值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;Time&quot;, overlay=true)</span><br><span class=\"line\">t1 = time(timeframe.period, &quot;0000-0000&quot;)</span><br><span class=\"line\">bgcolor(t1 ? color.blue : na)</span><br></pre></td></tr></table></figure>\n\n<p>session = “0000-0000:23456” 即24h，去除周六日，运行结果如下</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102203555.png\" alt=\"\"></p>\n<p>可以看到，周一至周五背景都变成了蓝色，因为t1 不在session的范围内的时候返回na值</p>\n<p>交易区间的格式有</p>\n<ul>\n<li><p>0000-0000:1234567 24小时交易，时间从午夜0点开始</p>\n</li>\n<li><p>0000-0000:23456 工作日24小时交易</p>\n</li>\n<li><p>1700-1700：24小时交易，时间从17点开始</p>\n</li>\n<li><p>0930-1700:146  交易时间为09:30~17:00，交易时间在周日（1），周三（4），周五（6）</p>\n</li>\n<li><p>24x7 等价于 0000-0000:1234567</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断是否为30min的新柱线</span><br><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;new 30 min bar&quot;)</span><br><span class=\"line\">is_newbar(res) =&gt;</span><br><span class=\"line\">    t = time(res)</span><br><span class=\"line\">    not na(t) and (na(t[1]) or t &gt; t[1])</span><br><span class=\"line\">plot(is_newbar(&quot;30&quot;) ? 1 : 0)</span><br></pre></td></tr></table></figure>\n\n<p>用到的函数变量和类型</p>\n<ul>\n<li>time：UNIX格式的当前k线时间</li>\n<li>timenow：UNIX格式的当前时间</li>\n<li>syminfo.timezone：时区</li>\n</ul>\n<p>当前K线用到的变量</p>\n<ul>\n<li>year/month/weekofyear</li>\n<li>dayofmonth</li>\n<li>dayofweek（sunday,monday 等）</li>\n<li>hour/minute/second</li>\n</ul>\n<p>创建时间</p>\n<ul>\n<li><a href=\"https://www.tradingview.com/pine-script-reference/v4/#fun_timestamp\" target=\"_blank\" rel=\"noopener\">timestamp(year, month, day, hour, minute)</a> </li>\n</ul>\n<h2 id=\"策略编写\"><a href=\"#策略编写\" class=\"headerlink\" title=\"策略编写\"></a>策略编写</h2><h3 id=\"backtesting-amp-forwardtesting\"><a href=\"#backtesting-amp-forwardtesting\" class=\"headerlink\" title=\"backtesting &amp; forwardtesting\"></a>backtesting &amp; forwardtesting</h3><p>strategy脚本是可以产生交易订单的Pine 脚本。利用strategy 可以做策略回测（backtesting）和 模拟交易（forwardtesting）</p>\n<p>无论backtesting 还是forwardtesting，计算都是<strong><u>默认</u></strong>发生在K线收盘的时候，但是在forwardtesting 的时候，可以选择在每一个tick发生的时候，都运行一次。</p>\n<p>做法一是调整strategy的 Setting/Properties，或者修改代码，添加<code>strategy(... ,calc_on_every_tick=true )</code> ，此外还可以选择在每笔订单完成之后计算<code>strategy(... , calc_on_order_fills=true)</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191102215042.png\" alt=\"\"></p>\n<h3 id=\"经纪商模拟\"><a href=\"#经纪商模拟\" class=\"headerlink\" title=\"经纪商模拟\"></a>经纪商模拟</h3><p>仅仅只有OHLC数据的话，K线内数据的生成有一套逻辑，如果最高价更接近开盘价，生成顺序是 open-&gt;high-&gt;low-&gt;close，此外还假设价格是没有gaps的</p>\n<h3 id=\"订单生成命令\"><a href=\"#订单生成命令\" class=\"headerlink\" title=\"订单生成命令\"></a>订单生成命令</h3><h4 id=\"strategy-entry-订单生成函数\"><a href=\"#strategy-entry-订单生成函数\" class=\"headerlink\" title=\"strategy.entry 订单生成函数\"></a>strategy.entry 订单生成函数</h4><p>这是进入市场的命令。 如果具有相同ID的订单已经挂起，则可修改订单。 如果没有指定ID的订单，则会发出新的订单。 </p>\n<p>要取消/停用预挂单，应使用命令<a href=\"https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}cancel\" target=\"_blank\" rel=\"noopener\">strategy.cancel</a>或<a href=\"https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}cancel_all\" target=\"_blank\" rel=\"noopener\">strategy.cancel_all</a>。 </p>\n<p>与函数<a href=\"https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}order\" target=\"_blank\" rel=\"noopener\">strategy.order</a>相比，<a href=\"https://cn.tradingview.com/pine-script-reference/v4/#fun_strategy{dot}entry\" target=\"_blank\" rel=\"noopener\">strategy.entry</a>功能受金字塔影响，可以正确反转市场位置。 如果“Limit”和“stop”参数均为“NaN”，则订单类型为市场订单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strategy.entry(id, long, qty, limit, stop, oca_name, oca_type, comment, when) → void</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"strategy-exit-订单退出函数\"><a href=\"#strategy-exit-订单退出函数\" class=\"headerlink\" title=\"strategy.exit 订单退出函数\"></a>strategy.exit 订单退出函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strategy.exit(id, from_entry, qty, qty_percent, profit, limit, loss, stop, trail_price, trail_points, trail_offset, oca_name, comment, when) → void</span><br></pre></td></tr></table></figure>\n\n<p>这是一个退出指定进场或整个市场地位的命令，重点区分它和strategy.close 的不同</p>\n<ul>\n<li>id(string): 订单的标识符。</li>\n<li>from_entry(string): 这里填入要平仓的订单的标识符，默认为空。</li>\n<li>qty: 平仓手数(弄清楚合约的大小)</li>\n<li>qty_percent: 平台的比例</li>\n<li>profit: 获利点数(一定搞清楚单位是点还是步)</li>\n<li>limit: 与profit 相似，limit约定获利的价格</li>\n<li>loss:止损点数</li>\n<li>stop:与loss 相似，stop约定止损的价格</li>\n<li>tail.*: 指明跟踪指数</li>\n</ul>\n<h4 id=\"strategy-order\"><a href=\"#strategy-order\" class=\"headerlink\" title=\"strategy.order\"></a>strategy.order</h4><p>这条命令可以生成开仓也可以生成平仓命令，但是它不受金字塔影响。它的作用就是弥补strategy.entry 和 strategy.exit 函数的不灵活星。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>下面是几个例子，可以帮助我们理解strategy函数</p>\n<h5 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">strategy(&quot;revers demo&quot;)</span><br><span class=\"line\">if bar_index &gt; 4000</span><br><span class=\"line\">    strategy.entry(&quot;buy&quot;, strategy.long, 4, when=strategy.position_size &lt;= 0)</span><br><span class=\"line\">    strategy.entry(&quot;sell&quot;, strategy.short, 6, when=strategy.position_size &gt; 0)</span><br><span class=\"line\">plot(strategy.equity)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191103235510.png\" alt=\"\"></p>\n<p>当仓位为空头或者无头寸的话，买4。当仓位为多头的话，卖6。</p>\n<p>我们可以看到entry中buy 或sell 在交易的时候，会自动平仓，平掉反向的仓位。仓位在+4 –&gt; -6 变化。</p>\n<h5 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">strategy(&quot;Partial exit demo&quot;)</span><br><span class=\"line\">if bar_index &gt; 6500 and bar_index &lt;6550</span><br><span class=\"line\">    strategy.entry(&quot;buy&quot;, strategy.long, 40000, when=strategy.position_size &lt;= 0)</span><br><span class=\"line\">strategy.exit(&quot;bracket1&quot;, &quot;buy&quot;,  20000, profit = 3000,loss = 3000)</span><br><span class=\"line\">strategy.exit(&quot;bracket2&quot;, &quot;buy&quot;,  profit=2000, loss=2000)</span><br><span class=\"line\">plot(strategy.equity)</span><br></pre></td></tr></table></figure>\n\n<p>盈亏曲线</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104151143.png\" alt=\"\"></p>\n<p>交易逻辑</p>\n<ul>\n<li>buy：当空仓时候买入，40000笔合约（40000美金）</li>\n<li>bracket1：设定平仓对象为buy标识的交易，平仓2000美金，止盈300点（单位为步，3000步=300点）。止损300点</li>\n<li>bracket2：止盈止损200点</li>\n</ul>\n<p>下面结合交易清单具体分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104215413.png\" alt=\"\"></p>\n<ul>\n<li>1：空仓买入4000美金</li>\n<li>2：止损200点，亏损20000 * 200 * 0.0001 = $ 400，从图中可以看到是bracket2 先止损</li>\n<li>3：价格继续向下，亏损300点，bracket1策略触发，亏损$ 600</li>\n<li>4,5,6:同上逻辑</li>\n</ul>\n<h3 id=\"风险管理\"><a href=\"#风险管理\" class=\"headerlink\" title=\"风险管理\"></a>风险管理</h3><p>strategy.risk.* 一系列函数，可以帮助进行风险管理。当风险管理规则被激活的时候，没有订单会生成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">strategy(&quot;multi risk demo&quot;, overlay=true, pyramiding=10, calc_on_order_fills = true)</span><br><span class=\"line\">if year &gt; 2014</span><br><span class=\"line\">    strategy.entry(&quot;LE&quot;, strategy.long)</span><br><span class=\"line\">strategy.risk.max_intraday_filled_orders(5)</span><br><span class=\"line\">strategy.risk.max_intraday_filled_orders(2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>strategy.risk.max_intraday_filled_orders(2)</p>\n<p>限制一天成交的最大的交易单数，一旦达到，所有未成交订单全部取消，成交订单关闭。并且一直关闭交易直到本交易日结束。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104172514.png\" alt=\"\"></p>\n<p>上图中，当第二笔交易生成的时候，同时也是两笔交易关闭的时间。</p>\n</li>\n<li><p>其余的函数参考手册</p>\n</li>\n</ul>\n<h2 id=\"指标重绘\"><a href=\"#指标重绘\" class=\"headerlink\" title=\"指标重绘\"></a>指标重绘</h2><p>历史数据仅仅包含OHLC，不包含线内的运动。这会导致的问题是，历史数据上的回测和实时数据不一致的情况。</p>\n<p>另外一个担心是，未来函数的使用。这里尤其要关注security 函数，此函数可能会错误的引入未来的信息。</p>\n<h2 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h2><p>Pine V4 中存在两种绘图类型：label 和 line。</p>\n<blockquote>\n<p>注：用户的绘图和 编程绘图是不一样的，编程得到的绘图是不能用鼠标修改的。</p>\n</blockquote>\n<p>和指标绘图函数(plot,plotshape,plotchar) 不一样的是，绘图函数可以在图表右侧没有K线的地方。</p>\n<h3 id=\"label\"><a href=\"#label\" class=\"headerlink\" title=\"label\"></a>label</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label.new(x, y, text, xloc, yloc, color, style, textcolor, size) → series[label]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@version=4</span><br><span class=\"line\">study(&quot;My Script&quot;, overlay=true)</span><br><span class=\"line\">label.new(bar_index, high, style=label.style_none,</span><br><span class=\"line\">          text=&quot;x=&quot; + tostring(bar_index) + &quot;\\ny=&quot; + tostring(high))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104175710.png\" alt=\"\"></p>\n<ul>\n<li><p>x的位置是用bar_index 标识的，此时xloc 的默认值为xloc.barindex</p>\n</li>\n<li><p>y的位置是最高价</p>\n</li>\n<li><p>xloc取值：xloc.bar_index(默认) 和 xloc.bar_time</p>\n</li>\n<li><p>yloc取值：</p>\n<ul>\n<li><p>yloc.price 传入此函数，需要输入y值</p>\n</li>\n<li><p>yloc.abovebar,yloc.belowbar 启动时，y值会失效。标签在图表上部或者下部</p>\n</li>\n</ul>\n</li>\n<li><p>style: 很多种，可能用到比较多的有label.style_none，无底色</p>\n</li>\n</ul>\n<p>label.set_* 一系列函数可以用来对对象进一步的修改。</p>\n<h3 id=\"line\"><a href=\"#line\" class=\"headerlink\" title=\"line\"></a>line</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line.new(x1, y1, x2, y2, xloc, extend, color, style, width) → series[line]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>extend: extend.none/extend.right/extend.left</li>\n</ul>\n"},{"title":"PHP学习笔记","comments":0,"date":"2019-11-19T11:17:08.000Z","description":"学习菜鸟教程随意记的一点东西","cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191119215225.png","_content":"\n## 示例\n\n```php\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My first PHP page</h1>\n\n<?php\necho \"Hello World!\";\n?>\n\n</body>\n</html>\n```\n\n\n## 注释\n```php\n<?php\n// php 代码\n？>\n\n//  单行注释\n/**/ 多行注释\n```\n\n## echo/print \necho // 多个\nprint // 一个\n\n```php\n<?php \n  //两行是相同效果，<br> 看做回车\n  echo \"Hello world! from:\",\"Elen\",\"<br>\";\n  print \"Hello world! from:\".\"Elen\".'<br>'; \n?>\n```\n\n>  Echo,print,print_r,var_dump 区别\n\n**1.echo**\n\n输出一个或者多个字符串。\n\n**2.print**\n\n和 echo 最主要的区别： print 仅支持一个参数，并总是返回 1。\n\n**3.print_r**\n\n打印关于变量的易于理解的信息,如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。object 与数组类似。 记住，print_r() 将把数组的指针移到最后边。使用 reset() 可让指针回到开始处。\n\n**4.var_dump**\n\n此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。\n\n**5.var_dump 和 print_r 的区别**\n\nvar_dump 返回表达式的类型与值而 print_r 仅返回结果，相比调试代码使用 var_dump 更便于阅读。\n\n## EOF 定义字符串\n\n```php\n<?php\n$name=\"Sally\";\n$a= <<<EOF\n        \"hername : \" $name\n        \"123\"\nEOF;\necho $a;\n```\noutput:\n```\n\"hername : \" Sally \"123\"\n```\n> 1. 结束需要独立一行且前后不能空格\n> 2. $name 经过了计算\n> 3. 空格和换行都被处理为一个空格 \n\n## PHP 类型\n\nString（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）\n\n```php\n<?php\n// String\n$a = \"Hello world\";\n// Integer \n$b = 3;\n// Float\n$c = 3.0;\n$d = (float)$a;\n// Boolean\n$e = '3.0'==3; //$e 的值应该是为true，因为== 是弱比较，不关心等式左右的类型\n$f = true; \n// Array\n$g = array('name'=>'wang','year'=>2000);\n// Object\nclass Car\n{\n  var $color;\n  function __construct($color=\"green\") {\n    $this->color = $color;\n  }\n  function what_color() {\n    return $this->color;\n  }\n}\n$h = new Car();\n// NULL\n$i = null;\n\nfunction print_($obj) {\n   echo $obj,'=>',var_dump($obj),'<br>';\n}\n\n// 输出\nprint_($a);\nprint_($b);\nprint_($c);\nprint_($d);\nprint_($e);\nprint_($f);\nprint_($g);\nvar_dump($h);echo \"<br>\";\nprint_($i);\n\n?> \n\n```\n\n结果如下\n```\nHello world=>string(11) \"Hello world\"\n3=>int(3)\n3=>float(3)\n0=>float(0)\n1=>bool(true)\n1=>bool(true)\nArray=>array(2) { [\"name\"]=> string(4) \"wang\" [\"year\"]=> int(2000) }\nobject(Car)#1 (1) { [\"color\"]=> string(5) \"green\" }\n=>NULL\n```\n\n## 常量\n```php\nbool define ( string $name , mixed $value [, bool $case_insensitive = false ] )\n$name:常量名\n$value:值\n$case_insensitive:是否对大小写敏感,true 代表不敏感\n```\n\ndefine(\"GREETING\", \"欢迎访问 Runoob.com\");\necho GREETING;    // 输出 \"欢迎访问 \n常量默认是全局变量\n\n## 字符串相关\n\n```\n//字符串合并\n$txt .\"+\".$txt2 \n//字符串长度\nstrlen()\n//字符串查找，未找到返回False\nstrpos(\"文本\",\"查找字符\") // 返回字符串位置，从0开始\n```\n\n## 条件语句\n\n```php\n<?php\n$age = 18;\n$stage = array('青少年','成年','老年');\nif ($age >=60)\n{\n\t$title = $stage[2];\n}\nelseif ($age >=18)\n{\n\t$title = $stage[1];\n}\nelse{\n\t$title = $stage[0];\n}\necho $title,'<br><br>';\n\n$favcolor=\"red\";\nswitch ($favcolor)\n{\ncase \"red\":\n    echo \"你喜欢的颜色是红色!\";\n    break;\ncase \"blue\":\n    echo \"你喜欢的颜色是蓝色!\";\n    break;\ncase \"green\":\n    echo \"你喜欢的颜色是绿色!\";\n    break;\ndefault:\n    echo \"你喜欢的颜色不是 红, 蓝, 或绿色!\";\n}\n?> \n```\n\n## 循环\nwhile/do while/for /foreach\n### while/do while\n```php\n<?php\n// while \necho \"while <br>\";\n$x = 5;\nwhile ($x) {\n\techo $x--,'<br>';\n}\n\n// do .. while \necho \"do..while <br>\";\n$x = 5;\ndo \n  echo $x,'<br>';\nwhile ($x--)\n?> \n```\n输出：\n```\nwhile\n5\n4\n3\n2\n1\ndo..while\n5\n4\n3\n2\n1\n0\n```\n\n### for/ foreach\n```php\n<?php\nfor ($i=1; $i<=5; $i++)\n{\n    echo \"The number is \" . $i . \"<br>\";\n}\n\n$x=array(\"one\"=>1,\"two\"=>2,\"three\"=>3);\nforeach ($x as $key => $value)\n{\n        echo $key,\" : \",$value,\"<br>\";\n}\n?>\n```\n输出\n```\nThe number is 1\nThe number is 2\nThe number is 3\nThe number is 4\nThe number is 5\none : 1\ntwo : 2\nthree : 3\n```\n\n\n\n## 魔术常量\n\n```\n__LINE__: 语句所处的行号\n__FILE__: 文件的完整路径（含文件名）\n__DIR__: 文件的目录\n__FUNCTION__:函数名\n__CLASS__:类名\n__TRAIT__:\n__METHOD__:类的方法名\n__NAMESPACE__:命名空间\n```\n\n```php+HTML\n<?php\nnamespace MyProject;// 必须是在首行\n// 魔术常量\necho '这是第 \" '  . __LINE__ . ' \" 行','<br>';\necho '该文件位于 \" '  . __FILE__ . ' \" ','<br>';\necho '该文件位于 \" '  . __DIR__ . ' \" ','<br>';\n\necho '命名空间为：\"', __NAMESPACE__, '\"'; // 输出 \"MyProject\"\n\nclass test {\n        function _print() {\n                echo '类名为：'  . __CLASS__ . \"<br>\";\n                echo  '函数名为：' . __FUNCTION__ .\"<br>\";\n                echo  '类的方法名：' . __METHOD__ ;\n        }\n}\n$t = new test();\n$t->_print();\n\n?>\n```\n\n**输出**\n\n```\n这是第 \" 4 \" 行\n该文件位于 \" /Library/WebServer/Documents/a.php \"\n该文件位于 \" /Library/WebServer/Documents \"\n命名空间为：\"MyProject\"类名为：MyProject\\test\n函数名为：_print\n类的方法名：MyProject\\test::_print\n```\n\n> 注：PHP中的命名空间，可以解决的问题：\n\n1. 用户编写的代码与PHP内部的类/函数/常量名字冲突\n2. 为很长的标识符创建一个更加可读的别名\n\n## 数组\n\n### 数组定义\n\n1. 自动分配id\n\n```php\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\");\n```\n\n```php\n$a = array( 'a',3 => 'b',1 => 'c', 'd');\nvar_dump($a)\n?>\n\n// 输出\n//array(4) { [0]=> string(1) \"a\" [3]=> string(1) \"b\" [1]=> string(1) \"c\" [4]=> string(1) \"d\" }\n```\n\n2. 关联数组\n\n```php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\n```\n\n3. 遍历数组\n\n```php\n<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\nforeach ($age as $key => $value) {\n\techo $key,'  => ',$value,'  type: ',var_dump($key),'<br>';\n}\n?> \n```\n\n4. 数组排序\n\nsort() <--> rsort()\nasort() <--> arsort() //关联数组\nksort() <--> krsort() //关联数组\n\n```php\n<?php\n$age=array(\"a\"=>\"5\",\"c\"=>\"37\",\"b\"=>\"-1\",\"e\"=>\"1\");\necho \"原始数组:\";\nprint_r($age);\necho \"<br>\";\n\necho \"按key 排序\";\nksort($age);\nprint_r($age);\necho \"<br>\";\n\necho \"按value 排序\";\nasort($age);\nprint_r($age);\necho \"<br>\";\n\n?> \n```\n\n## PHP 面向对象\n\n```php\n<?php\nclass Site {\n  /* 成员变量 */\n  var $url;\n  var $title;\n  \n  function __construct($par1,$par2){\n  \t$this->url = $par1;\n  \t$this->title = $par2;\n  }\n  function __destruct(){\n  \techo __FUNCTION__.\"  已经运行\";\n\n  }\n  /* 成员函数 */\n  function setUrl($par){\n     $this->url = $par;\n  }\n  \n  function getUrl(){\n     echo $this->url . PHP_EOL;\n  }\n  \n  function setTitle($par){\n     $this->title = $par;\n  }\n  \n  function getTitle(){\n     echo $this->title . PHP_EOL;\n  }\n}\n\n$siteobj = new Site('www.baidu.com','baidu');\nprint $siteobj->url;\n$siteobj->setUrl('ppsteven.github.io');\n$siteobj->setTitle('learnPHP');\n$siteobj->getUrl();\n$siteobj->getTitle();\n?>\n```\n\n## 函数作用域\n\n```php\n<?php\n$y = \"globals varibale\"; //全局变量\nfunction myTest($z=null)\n{\n\tglobal $y; // $y 为全局变量，有两种方式使用\n\techo $y,'<br>';\n\techo $GLOBALS['y'],'<br>'; \n\techo '参数作用域',$z;\n\n    static $x1=0;\n    $x2 = 0; // 局部变量\n\n    echo $x1.'('.$x2.\"）\";// 静态变量是不会随着函数完成而删除\n    $x1++;\n    $x2++;\n}\n \nmyTest();\nmyTest();\nmyTest();\n\n/*\nx2(x1)\n0(0)\n0(1)\n0(2)\n*/\n?>\n```\n\n## Others\n\n包含一些小的知识点和未系统整理的知识\n\n- 三元：expr1 ? expr2 : expr3\n\n  ```php\n  <?php\n   $var = true ? 1 : false ? 2 : 3;\n   $varx = (true ? 1 : false)? 2 : 3;\n   $vary = true ? 1 : (false ? 2 : 3);\n  echo $var.'<br>';\n  echo $varx.'<br>';\n  echo $vary.'<br>';\n  // 结果是 2 2 1 , 这里的三元运算需要注意执行的顺序\n  ```\n\n  \n\n- null == false  : 返回的是false\n\n- 1/2 (0.5) PHP中没有整除算法，有整除函数intdiv(1/2)\n\n- php 作用域\n\n  - local\n  - global\n  - static\n  - parameter // 参数作用域\n\n  ```php\n  <?php\n  $y = \"global varibale\"\n  function myTest()\n  {\n      static $x=0;\n      echo $x;\n      $x++;\n      echo PHP_EOL;    // 换行符\n  }\n   \n  myTest();\n  myTest();\n  myTest();\n  ?>\n  ```\n  \n- echo PHP_EOL; // 换行符\n\n- == 弱比较\n=== 强比较\n","source":"_posts/php学习笔记.md","raw":"---\ntitle: PHP学习笔记\ncomments: false\ndate: 2019-11-19 19:17:08\ntags: [php, 日常学习笔记]\ncategories: \n- php\ndescription: 学习菜鸟教程随意记的一点东西\ncover: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191119215225.png\n---\n\n## 示例\n\n```php\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My first PHP page</h1>\n\n<?php\necho \"Hello World!\";\n?>\n\n</body>\n</html>\n```\n\n\n## 注释\n```php\n<?php\n// php 代码\n？>\n\n//  单行注释\n/**/ 多行注释\n```\n\n## echo/print \necho // 多个\nprint // 一个\n\n```php\n<?php \n  //两行是相同效果，<br> 看做回车\n  echo \"Hello world! from:\",\"Elen\",\"<br>\";\n  print \"Hello world! from:\".\"Elen\".'<br>'; \n?>\n```\n\n>  Echo,print,print_r,var_dump 区别\n\n**1.echo**\n\n输出一个或者多个字符串。\n\n**2.print**\n\n和 echo 最主要的区别： print 仅支持一个参数，并总是返回 1。\n\n**3.print_r**\n\n打印关于变量的易于理解的信息,如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。object 与数组类似。 记住，print_r() 将把数组的指针移到最后边。使用 reset() 可让指针回到开始处。\n\n**4.var_dump**\n\n此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。\n\n**5.var_dump 和 print_r 的区别**\n\nvar_dump 返回表达式的类型与值而 print_r 仅返回结果，相比调试代码使用 var_dump 更便于阅读。\n\n## EOF 定义字符串\n\n```php\n<?php\n$name=\"Sally\";\n$a= <<<EOF\n        \"hername : \" $name\n        \"123\"\nEOF;\necho $a;\n```\noutput:\n```\n\"hername : \" Sally \"123\"\n```\n> 1. 结束需要独立一行且前后不能空格\n> 2. $name 经过了计算\n> 3. 空格和换行都被处理为一个空格 \n\n## PHP 类型\n\nString（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）\n\n```php\n<?php\n// String\n$a = \"Hello world\";\n// Integer \n$b = 3;\n// Float\n$c = 3.0;\n$d = (float)$a;\n// Boolean\n$e = '3.0'==3; //$e 的值应该是为true，因为== 是弱比较，不关心等式左右的类型\n$f = true; \n// Array\n$g = array('name'=>'wang','year'=>2000);\n// Object\nclass Car\n{\n  var $color;\n  function __construct($color=\"green\") {\n    $this->color = $color;\n  }\n  function what_color() {\n    return $this->color;\n  }\n}\n$h = new Car();\n// NULL\n$i = null;\n\nfunction print_($obj) {\n   echo $obj,'=>',var_dump($obj),'<br>';\n}\n\n// 输出\nprint_($a);\nprint_($b);\nprint_($c);\nprint_($d);\nprint_($e);\nprint_($f);\nprint_($g);\nvar_dump($h);echo \"<br>\";\nprint_($i);\n\n?> \n\n```\n\n结果如下\n```\nHello world=>string(11) \"Hello world\"\n3=>int(3)\n3=>float(3)\n0=>float(0)\n1=>bool(true)\n1=>bool(true)\nArray=>array(2) { [\"name\"]=> string(4) \"wang\" [\"year\"]=> int(2000) }\nobject(Car)#1 (1) { [\"color\"]=> string(5) \"green\" }\n=>NULL\n```\n\n## 常量\n```php\nbool define ( string $name , mixed $value [, bool $case_insensitive = false ] )\n$name:常量名\n$value:值\n$case_insensitive:是否对大小写敏感,true 代表不敏感\n```\n\ndefine(\"GREETING\", \"欢迎访问 Runoob.com\");\necho GREETING;    // 输出 \"欢迎访问 \n常量默认是全局变量\n\n## 字符串相关\n\n```\n//字符串合并\n$txt .\"+\".$txt2 \n//字符串长度\nstrlen()\n//字符串查找，未找到返回False\nstrpos(\"文本\",\"查找字符\") // 返回字符串位置，从0开始\n```\n\n## 条件语句\n\n```php\n<?php\n$age = 18;\n$stage = array('青少年','成年','老年');\nif ($age >=60)\n{\n\t$title = $stage[2];\n}\nelseif ($age >=18)\n{\n\t$title = $stage[1];\n}\nelse{\n\t$title = $stage[0];\n}\necho $title,'<br><br>';\n\n$favcolor=\"red\";\nswitch ($favcolor)\n{\ncase \"red\":\n    echo \"你喜欢的颜色是红色!\";\n    break;\ncase \"blue\":\n    echo \"你喜欢的颜色是蓝色!\";\n    break;\ncase \"green\":\n    echo \"你喜欢的颜色是绿色!\";\n    break;\ndefault:\n    echo \"你喜欢的颜色不是 红, 蓝, 或绿色!\";\n}\n?> \n```\n\n## 循环\nwhile/do while/for /foreach\n### while/do while\n```php\n<?php\n// while \necho \"while <br>\";\n$x = 5;\nwhile ($x) {\n\techo $x--,'<br>';\n}\n\n// do .. while \necho \"do..while <br>\";\n$x = 5;\ndo \n  echo $x,'<br>';\nwhile ($x--)\n?> \n```\n输出：\n```\nwhile\n5\n4\n3\n2\n1\ndo..while\n5\n4\n3\n2\n1\n0\n```\n\n### for/ foreach\n```php\n<?php\nfor ($i=1; $i<=5; $i++)\n{\n    echo \"The number is \" . $i . \"<br>\";\n}\n\n$x=array(\"one\"=>1,\"two\"=>2,\"three\"=>3);\nforeach ($x as $key => $value)\n{\n        echo $key,\" : \",$value,\"<br>\";\n}\n?>\n```\n输出\n```\nThe number is 1\nThe number is 2\nThe number is 3\nThe number is 4\nThe number is 5\none : 1\ntwo : 2\nthree : 3\n```\n\n\n\n## 魔术常量\n\n```\n__LINE__: 语句所处的行号\n__FILE__: 文件的完整路径（含文件名）\n__DIR__: 文件的目录\n__FUNCTION__:函数名\n__CLASS__:类名\n__TRAIT__:\n__METHOD__:类的方法名\n__NAMESPACE__:命名空间\n```\n\n```php+HTML\n<?php\nnamespace MyProject;// 必须是在首行\n// 魔术常量\necho '这是第 \" '  . __LINE__ . ' \" 行','<br>';\necho '该文件位于 \" '  . __FILE__ . ' \" ','<br>';\necho '该文件位于 \" '  . __DIR__ . ' \" ','<br>';\n\necho '命名空间为：\"', __NAMESPACE__, '\"'; // 输出 \"MyProject\"\n\nclass test {\n        function _print() {\n                echo '类名为：'  . __CLASS__ . \"<br>\";\n                echo  '函数名为：' . __FUNCTION__ .\"<br>\";\n                echo  '类的方法名：' . __METHOD__ ;\n        }\n}\n$t = new test();\n$t->_print();\n\n?>\n```\n\n**输出**\n\n```\n这是第 \" 4 \" 行\n该文件位于 \" /Library/WebServer/Documents/a.php \"\n该文件位于 \" /Library/WebServer/Documents \"\n命名空间为：\"MyProject\"类名为：MyProject\\test\n函数名为：_print\n类的方法名：MyProject\\test::_print\n```\n\n> 注：PHP中的命名空间，可以解决的问题：\n\n1. 用户编写的代码与PHP内部的类/函数/常量名字冲突\n2. 为很长的标识符创建一个更加可读的别名\n\n## 数组\n\n### 数组定义\n\n1. 自动分配id\n\n```php\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\");\n```\n\n```php\n$a = array( 'a',3 => 'b',1 => 'c', 'd');\nvar_dump($a)\n?>\n\n// 输出\n//array(4) { [0]=> string(1) \"a\" [3]=> string(1) \"b\" [1]=> string(1) \"c\" [4]=> string(1) \"d\" }\n```\n\n2. 关联数组\n\n```php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\n```\n\n3. 遍历数组\n\n```php\n<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\nforeach ($age as $key => $value) {\n\techo $key,'  => ',$value,'  type: ',var_dump($key),'<br>';\n}\n?> \n```\n\n4. 数组排序\n\nsort() <--> rsort()\nasort() <--> arsort() //关联数组\nksort() <--> krsort() //关联数组\n\n```php\n<?php\n$age=array(\"a\"=>\"5\",\"c\"=>\"37\",\"b\"=>\"-1\",\"e\"=>\"1\");\necho \"原始数组:\";\nprint_r($age);\necho \"<br>\";\n\necho \"按key 排序\";\nksort($age);\nprint_r($age);\necho \"<br>\";\n\necho \"按value 排序\";\nasort($age);\nprint_r($age);\necho \"<br>\";\n\n?> \n```\n\n## PHP 面向对象\n\n```php\n<?php\nclass Site {\n  /* 成员变量 */\n  var $url;\n  var $title;\n  \n  function __construct($par1,$par2){\n  \t$this->url = $par1;\n  \t$this->title = $par2;\n  }\n  function __destruct(){\n  \techo __FUNCTION__.\"  已经运行\";\n\n  }\n  /* 成员函数 */\n  function setUrl($par){\n     $this->url = $par;\n  }\n  \n  function getUrl(){\n     echo $this->url . PHP_EOL;\n  }\n  \n  function setTitle($par){\n     $this->title = $par;\n  }\n  \n  function getTitle(){\n     echo $this->title . PHP_EOL;\n  }\n}\n\n$siteobj = new Site('www.baidu.com','baidu');\nprint $siteobj->url;\n$siteobj->setUrl('ppsteven.github.io');\n$siteobj->setTitle('learnPHP');\n$siteobj->getUrl();\n$siteobj->getTitle();\n?>\n```\n\n## 函数作用域\n\n```php\n<?php\n$y = \"globals varibale\"; //全局变量\nfunction myTest($z=null)\n{\n\tglobal $y; // $y 为全局变量，有两种方式使用\n\techo $y,'<br>';\n\techo $GLOBALS['y'],'<br>'; \n\techo '参数作用域',$z;\n\n    static $x1=0;\n    $x2 = 0; // 局部变量\n\n    echo $x1.'('.$x2.\"）\";// 静态变量是不会随着函数完成而删除\n    $x1++;\n    $x2++;\n}\n \nmyTest();\nmyTest();\nmyTest();\n\n/*\nx2(x1)\n0(0)\n0(1)\n0(2)\n*/\n?>\n```\n\n## Others\n\n包含一些小的知识点和未系统整理的知识\n\n- 三元：expr1 ? expr2 : expr3\n\n  ```php\n  <?php\n   $var = true ? 1 : false ? 2 : 3;\n   $varx = (true ? 1 : false)? 2 : 3;\n   $vary = true ? 1 : (false ? 2 : 3);\n  echo $var.'<br>';\n  echo $varx.'<br>';\n  echo $vary.'<br>';\n  // 结果是 2 2 1 , 这里的三元运算需要注意执行的顺序\n  ```\n\n  \n\n- null == false  : 返回的是false\n\n- 1/2 (0.5) PHP中没有整除算法，有整除函数intdiv(1/2)\n\n- php 作用域\n\n  - local\n  - global\n  - static\n  - parameter // 参数作用域\n\n  ```php\n  <?php\n  $y = \"global varibale\"\n  function myTest()\n  {\n      static $x=0;\n      echo $x;\n      $x++;\n      echo PHP_EOL;    // 换行符\n  }\n   \n  myTest();\n  myTest();\n  myTest();\n  ?>\n  ```\n  \n- echo PHP_EOL; // 换行符\n\n- == 弱比较\n=== 强比较\n","slug":"php学习笔记","published":1,"updated":"2019-11-19T13:52:46.562Z","layout":"post","photos":[],"link":"","_id":"ck3acxtk0000ipw8mh2qhfpwc","content":"<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h1&gt;My first PHP page&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// php 代码</span></span><br><span class=\"line\">？&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/**/</span> 多行注释</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"echo-print\"><a href=\"#echo-print\" class=\"headerlink\" title=\"echo/print\"></a>echo/print</h2><p>echo // 多个<br>print // 一个</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">  <span class=\"comment\">//两行是相同效果，&lt;br&gt; 看做回车</span></span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"Hello world! from:\"</span>,<span class=\"string\">\"Elen\"</span>,<span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"Hello world! from:\"</span>.<span class=\"string\">\"Elen\"</span>.<span class=\"string\">'&lt;br&gt;'</span>; </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> Echo,print,print_r,var_dump 区别</p>\n</blockquote>\n<p><strong>1.echo</strong></p>\n<p>输出一个或者多个字符串。</p>\n<p><strong>2.print</strong></p>\n<p>和 echo 最主要的区别： print 仅支持一个参数，并总是返回 1。</p>\n<p><strong>3.print_r</strong></p>\n<p>打印关于变量的易于理解的信息,如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。object 与数组类似。 记住，print_r() 将把数组的指针移到最后边。使用 reset() 可让指针回到开始处。</p>\n<p><strong>4.var_dump</strong></p>\n<p>此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p>\n<p><strong>5.var_dump 和 print_r 的区别</strong></p>\n<p>var_dump 返回表达式的类型与值而 print_r 仅返回结果，相比调试代码使用 var_dump 更便于阅读。</p>\n<h2 id=\"EOF-定义字符串\"><a href=\"#EOF-定义字符串\" class=\"headerlink\" title=\"EOF 定义字符串\"></a>EOF 定义字符串</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$name=<span class=\"string\">\"Sally\"</span>;</span><br><span class=\"line\">$a= <span class=\"string\">&lt;&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"string\">        \"hername : \" <span class=\"subst\">$name</span></span></span><br><span class=\"line\"><span class=\"string\">        \"123\"</span></span><br><span class=\"line\"><span class=\"string\">EOF;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $a;</span><br></pre></td></tr></table></figure>\n<p>output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;hername : &quot; Sally &quot;123&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>结束需要独立一行且前后不能空格</li>\n<li>$name 经过了计算</li>\n<li>空格和换行都被处理为一个空格 </li>\n</ol>\n</blockquote>\n<h2 id=\"PHP-类型\"><a href=\"#PHP-类型\" class=\"headerlink\" title=\"PHP 类型\"></a>PHP 类型</h2><p>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// String</span></span><br><span class=\"line\">$a = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// Integer </span></span><br><span class=\"line\">$b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// Float</span></span><br><span class=\"line\">$c = <span class=\"number\">3.0</span>;</span><br><span class=\"line\">$d = (float)$a;</span><br><span class=\"line\"><span class=\"comment\">// Boolean</span></span><br><span class=\"line\">$e = <span class=\"string\">'3.0'</span>==<span class=\"number\">3</span>; <span class=\"comment\">//$e 的值应该是为true，因为== 是弱比较，不关心等式左右的类型</span></span><br><span class=\"line\">$f = <span class=\"keyword\">true</span>; </span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\">$g = <span class=\"keyword\">array</span>(<span class=\"string\">'name'</span>=&gt;<span class=\"string\">'wang'</span>,<span class=\"string\">'year'</span>=&gt;<span class=\"number\">2000</span>);</span><br><span class=\"line\"><span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $color;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($color=<span class=\"string\">\"green\"</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;color = $color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">what_color</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$h = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\"><span class=\"comment\">// NULL</span></span><br><span class=\"line\">$i = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print_</span><span class=\"params\">($obj)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">echo</span> $obj,<span class=\"string\">'=&gt;'</span>,var_dump($obj),<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">print_($a);</span><br><span class=\"line\">print_($b);</span><br><span class=\"line\">print_($c);</span><br><span class=\"line\">print_($d);</span><br><span class=\"line\">print_($e);</span><br><span class=\"line\">print_($f);</span><br><span class=\"line\">print_($g);</span><br><span class=\"line\">var_dump($h);<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">print_($i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello world=&gt;string(11) &quot;Hello world&quot;</span><br><span class=\"line\">3=&gt;int(3)</span><br><span class=\"line\">3=&gt;float(3)</span><br><span class=\"line\">0=&gt;float(0)</span><br><span class=\"line\">1=&gt;bool(true)</span><br><span class=\"line\">1=&gt;bool(true)</span><br><span class=\"line\">Array=&gt;array(2) &#123; [&quot;name&quot;]=&gt; string(4) &quot;wang&quot; [&quot;year&quot;]=&gt; int(2000) &#125;</span><br><span class=\"line\">object(Car)#1 (1) &#123; [&quot;color&quot;]=&gt; string(5) &quot;green&quot; &#125;</span><br><span class=\"line\">=&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool define ( string $name , mixed $value [, bool $case_insensitive = <span class=\"keyword\">false</span> ] )</span><br><span class=\"line\">$name:常量名</span><br><span class=\"line\">$value:值</span><br><span class=\"line\">$case_insensitive:是否对大小写敏感,<span class=\"keyword\">true</span> 代表不敏感</span><br></pre></td></tr></table></figure>\n\n<p>define(“GREETING”, “欢迎访问 Runoob.com”);<br>echo GREETING;    // 输出 “欢迎访问<br>常量默认是全局变量</p>\n<h2 id=\"字符串相关\"><a href=\"#字符串相关\" class=\"headerlink\" title=\"字符串相关\"></a>字符串相关</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//字符串合并</span><br><span class=\"line\">$txt .&quot;+&quot;.$txt2 </span><br><span class=\"line\">//字符串长度</span><br><span class=\"line\">strlen()</span><br><span class=\"line\">//字符串查找，未找到返回False</span><br><span class=\"line\">strpos(&quot;文本&quot;,&quot;查找字符&quot;) // 返回字符串位置，从0开始</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$age = <span class=\"number\">18</span>;</span><br><span class=\"line\">$stage = <span class=\"keyword\">array</span>(<span class=\"string\">'青少年'</span>,<span class=\"string\">'成年'</span>,<span class=\"string\">'老年'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($age &gt;=<span class=\"number\">60</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$title = $stage[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> ($age &gt;=<span class=\"number\">18</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$title = $stage[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t$title = $stage[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $title,<span class=\"string\">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$favcolor=<span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> ($favcolor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"red\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"你喜欢的颜色是红色!\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"blue\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"你喜欢的颜色是蓝色!\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"green\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"你喜欢的颜色是绿色!\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"你喜欢的颜色不是 红, 蓝, 或绿色!\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>while/do while/for /foreach</p>\n<h3 id=\"while-do-while\"><a href=\"#while-do-while\" class=\"headerlink\" title=\"while/do while\"></a>while/do while</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// while </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"while &lt;br&gt;\"</span>;</span><br><span class=\"line\">$x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($x) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $x--,<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do .. while </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"do..while &lt;br&gt;\"</span>;</span><br><span class=\"line\">$x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">  <span class=\"keyword\">echo</span> $x,<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($x--)</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">do..while</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-foreach\"><a href=\"#for-foreach\" class=\"headerlink\" title=\"for/ foreach\"></a>for/ foreach</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">1</span>; $i&lt;=<span class=\"number\">5</span>; $i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"The number is \"</span> . $i . <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$x=<span class=\"keyword\">array</span>(<span class=\"string\">\"one\"</span>=&gt;<span class=\"number\">1</span>,<span class=\"string\">\"two\"</span>=&gt;<span class=\"number\">2</span>,<span class=\"string\">\"three\"</span>=&gt;<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($x <span class=\"keyword\">as</span> $key =&gt; $value)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $key,<span class=\"string\">\" : \"</span>,$value,<span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The number is 1</span><br><span class=\"line\">The number is 2</span><br><span class=\"line\">The number is 3</span><br><span class=\"line\">The number is 4</span><br><span class=\"line\">The number is 5</span><br><span class=\"line\">one : 1</span><br><span class=\"line\">two : 2</span><br><span class=\"line\">three : 3</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"魔术常量\"><a href=\"#魔术常量\" class=\"headerlink\" title=\"魔术常量\"></a>魔术常量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__LINE__: 语句所处的行号</span><br><span class=\"line\">__FILE__: 文件的完整路径（含文件名）</span><br><span class=\"line\">__DIR__: 文件的目录</span><br><span class=\"line\">__FUNCTION__:函数名</span><br><span class=\"line\">__CLASS__:类名</span><br><span class=\"line\">__TRAIT__:</span><br><span class=\"line\">__METHOD__:类的方法名</span><br><span class=\"line\">__NAMESPACE__:命名空间</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace MyProject;// 必须是在首行</span><br><span class=\"line\">// 魔术常量</span><br><span class=\"line\">echo &apos;这是第 &quot; &apos;  . __LINE__ . &apos; &quot; 行&apos;,&apos;&lt;br&gt;&apos;;</span><br><span class=\"line\">echo &apos;该文件位于 &quot; &apos;  . __FILE__ . &apos; &quot; &apos;,&apos;&lt;br&gt;&apos;;</span><br><span class=\"line\">echo &apos;该文件位于 &quot; &apos;  . __DIR__ . &apos; &quot; &apos;,&apos;&lt;br&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &apos;命名空间为：&quot;&apos;, __NAMESPACE__, &apos;&quot;&apos;; // 输出 &quot;MyProject&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">class test &#123;</span><br><span class=\"line\">        function _print() &#123;</span><br><span class=\"line\">                echo &apos;类名为：&apos;  . __CLASS__ . &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">                echo  &apos;函数名为：&apos; . __FUNCTION__ .&quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">                echo  &apos;类的方法名：&apos; . __METHOD__ ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$t = new test();</span><br><span class=\"line\">$t-&gt;_print();</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是第 &quot; 4 &quot; 行</span><br><span class=\"line\">该文件位于 &quot; /Library/WebServer/Documents/a.php &quot;</span><br><span class=\"line\">该文件位于 &quot; /Library/WebServer/Documents &quot;</span><br><span class=\"line\">命名空间为：&quot;MyProject&quot;类名为：MyProject\\test</span><br><span class=\"line\">函数名为：_print</span><br><span class=\"line\">类的方法名：MyProject\\test::_print</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：PHP中的命名空间，可以解决的问题：</p>\n</blockquote>\n<ol>\n<li>用户编写的代码与PHP内部的类/函数/常量名字冲突</li>\n<li>为很长的标识符创建一个更加可读的别名</li>\n</ol>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"数组定义\"><a href=\"#数组定义\" class=\"headerlink\" title=\"数组定义\"></a>数组定义</h3><ol>\n<li>自动分配id</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cars=<span class=\"keyword\">array</span>(<span class=\"string\">\"Volvo\"</span>,<span class=\"string\">\"BMW\"</span>,<span class=\"string\">\"Toyota\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"keyword\">array</span>( <span class=\"string\">'a'</span>,<span class=\"number\">3</span> =&gt; <span class=\"string\">'b'</span>,<span class=\"number\">1</span> =&gt; <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>);</span><br><span class=\"line\">var_dump($a)</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">//array(4) &#123; [0]=&gt; string(1) \"a\" [3]=&gt; string(1) \"b\" [1]=&gt; string(1) \"c\" [4]=&gt; string(1) \"d\" &#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>关联数组</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$age=<span class=\"keyword\">array</span>(<span class=\"string\">\"Peter\"</span>=&gt;<span class=\"string\">\"35\"</span>,<span class=\"string\">\"Ben\"</span>=&gt;<span class=\"string\">\"37\"</span>,<span class=\"string\">\"Joe\"</span>=&gt;<span class=\"string\">\"43\"</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>遍历数组</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$age=<span class=\"keyword\">array</span>(<span class=\"string\">\"Peter\"</span>=&gt;<span class=\"string\">\"35\"</span>,<span class=\"string\">\"Ben\"</span>=&gt;<span class=\"string\">\"37\"</span>,<span class=\"string\">\"Joe\"</span>=&gt;<span class=\"string\">\"43\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($age <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $key,<span class=\"string\">'  =&gt; '</span>,$value,<span class=\"string\">'  type: '</span>,var_dump($key),<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>数组排序</li>\n</ol>\n<p>sort() &lt;–&gt; rsort()<br>asort() &lt;–&gt; arsort() //关联数组<br>ksort() &lt;–&gt; krsort() //关联数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$age=<span class=\"keyword\">array</span>(<span class=\"string\">\"a\"</span>=&gt;<span class=\"string\">\"5\"</span>,<span class=\"string\">\"c\"</span>=&gt;<span class=\"string\">\"37\"</span>,<span class=\"string\">\"b\"</span>=&gt;<span class=\"string\">\"-1\"</span>,<span class=\"string\">\"e\"</span>=&gt;<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"原始数组:\"</span>;</span><br><span class=\"line\">print_r($age);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"按key 排序\"</span>;</span><br><span class=\"line\">ksort($age);</span><br><span class=\"line\">print_r($age);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"按value 排序\"</span>;</span><br><span class=\"line\">asort($age);</span><br><span class=\"line\">print_r($age);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PHP-面向对象\"><a href=\"#PHP-面向对象\" class=\"headerlink\" title=\"PHP 面向对象\"></a>PHP 面向对象</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Site</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 成员变量 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $url;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $title;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($par1,$par2)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">$this</span>-&gt;url = $par1;</span><br><span class=\"line\">  \t<span class=\"keyword\">$this</span>-&gt;title = $par2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">echo</span> <span class=\"keyword\">__FUNCTION__</span>.<span class=\"string\">\"  已经运行\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 成员函数 */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setUrl</span><span class=\"params\">($par)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">$this</span>-&gt;url = $par;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrl</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;url . PHP_EOL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTitle</span><span class=\"params\">($par)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">$this</span>-&gt;title = $par;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTitle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;title . PHP_EOL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$siteobj = <span class=\"keyword\">new</span> Site(<span class=\"string\">'www.baidu.com'</span>,<span class=\"string\">'baidu'</span>);</span><br><span class=\"line\"><span class=\"keyword\">print</span> $siteobj-&gt;url;</span><br><span class=\"line\">$siteobj-&gt;setUrl(<span class=\"string\">'ppsteven.github.io'</span>);</span><br><span class=\"line\">$siteobj-&gt;setTitle(<span class=\"string\">'learnPHP'</span>);</span><br><span class=\"line\">$siteobj-&gt;getUrl();</span><br><span class=\"line\">$siteobj-&gt;getTitle();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$y = <span class=\"string\">\"globals varibale\"</span>; <span class=\"comment\">//全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span><span class=\"params\">($z=null)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> $y; <span class=\"comment\">// $y 为全局变量，有两种方式使用</span></span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $y,<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $GLOBALS[<span class=\"string\">'y'</span>],<span class=\"string\">'&lt;br&gt;'</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'参数作用域'</span>,$z;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> $x1=<span class=\"number\">0</span>;</span><br><span class=\"line\">    $x2 = <span class=\"number\">0</span>; <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $x1.<span class=\"string\">'('</span>.$x2.<span class=\"string\">\"）\"</span>;<span class=\"comment\">// 静态变量是不会随着函数完成而删除</span></span><br><span class=\"line\">    $x1++;</span><br><span class=\"line\">    $x2++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">x2(x1)</span></span><br><span class=\"line\"><span class=\"comment\">0(0)</span></span><br><span class=\"line\"><span class=\"comment\">0(1)</span></span><br><span class=\"line\"><span class=\"comment\">0(2)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><p>包含一些小的知识点和未系统整理的知识</p>\n<ul>\n<li><p>三元：expr1 ? expr2 : expr3</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"> $var = <span class=\"keyword\">true</span> ? <span class=\"number\">1</span> : <span class=\"keyword\">false</span> ? <span class=\"number\">2</span> : <span class=\"number\">3</span>;</span><br><span class=\"line\"> $varx = (<span class=\"keyword\">true</span> ? <span class=\"number\">1</span> : <span class=\"keyword\">false</span>)? <span class=\"number\">2</span> : <span class=\"number\">3</span>;</span><br><span class=\"line\"> $vary = <span class=\"keyword\">true</span> ? <span class=\"number\">1</span> : (<span class=\"keyword\">false</span> ? <span class=\"number\">2</span> : <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $var.<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $varx.<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $vary.<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 结果是 2 2 1 , 这里的三元运算需要注意执行的顺序</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>null == false  : 返回的是false</p>\n</li>\n<li><p>1/2 (0.5) PHP中没有整除算法，有整除函数intdiv(1/2)</p>\n</li>\n<li><p>php 作用域</p>\n<ul>\n<li>local</li>\n<li>global</li>\n<li>static</li>\n<li>parameter // 参数作用域</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$y = <span class=\"string\">\"global varibale\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> $x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $x;</span><br><span class=\"line\">    $x++;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> PHP_EOL;    <span class=\"comment\">// 换行符</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>echo PHP_EOL; // 换行符</p>\n</li>\n<li><p>== 弱比较<br>=== 强比较</p>\n</li>\n</ul>\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"excerpt":"","more":"<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h1&gt;My first PHP page&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// php 代码</span></span><br><span class=\"line\">？&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/**/</span> 多行注释</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"echo-print\"><a href=\"#echo-print\" class=\"headerlink\" title=\"echo/print\"></a>echo/print</h2><p>echo // 多个<br>print // 一个</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">  <span class=\"comment\">//两行是相同效果，&lt;br&gt; 看做回车</span></span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"Hello world! from:\"</span>,<span class=\"string\">\"Elen\"</span>,<span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"Hello world! from:\"</span>.<span class=\"string\">\"Elen\"</span>.<span class=\"string\">'&lt;br&gt;'</span>; </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> Echo,print,print_r,var_dump 区别</p>\n</blockquote>\n<p><strong>1.echo</strong></p>\n<p>输出一个或者多个字符串。</p>\n<p><strong>2.print</strong></p>\n<p>和 echo 最主要的区别： print 仅支持一个参数，并总是返回 1。</p>\n<p><strong>3.print_r</strong></p>\n<p>打印关于变量的易于理解的信息,如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。object 与数组类似。 记住，print_r() 将把数组的指针移到最后边。使用 reset() 可让指针回到开始处。</p>\n<p><strong>4.var_dump</strong></p>\n<p>此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p>\n<p><strong>5.var_dump 和 print_r 的区别</strong></p>\n<p>var_dump 返回表达式的类型与值而 print_r 仅返回结果，相比调试代码使用 var_dump 更便于阅读。</p>\n<h2 id=\"EOF-定义字符串\"><a href=\"#EOF-定义字符串\" class=\"headerlink\" title=\"EOF 定义字符串\"></a>EOF 定义字符串</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$name=<span class=\"string\">\"Sally\"</span>;</span><br><span class=\"line\">$a= <span class=\"string\">&lt;&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"string\">        \"hername : \" <span class=\"subst\">$name</span></span></span><br><span class=\"line\"><span class=\"string\">        \"123\"</span></span><br><span class=\"line\"><span class=\"string\">EOF;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $a;</span><br></pre></td></tr></table></figure>\n<p>output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;hername : &quot; Sally &quot;123&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>结束需要独立一行且前后不能空格</li>\n<li>$name 经过了计算</li>\n<li>空格和换行都被处理为一个空格 </li>\n</ol>\n</blockquote>\n<h2 id=\"PHP-类型\"><a href=\"#PHP-类型\" class=\"headerlink\" title=\"PHP 类型\"></a>PHP 类型</h2><p>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// String</span></span><br><span class=\"line\">$a = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// Integer </span></span><br><span class=\"line\">$b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// Float</span></span><br><span class=\"line\">$c = <span class=\"number\">3.0</span>;</span><br><span class=\"line\">$d = (float)$a;</span><br><span class=\"line\"><span class=\"comment\">// Boolean</span></span><br><span class=\"line\">$e = <span class=\"string\">'3.0'</span>==<span class=\"number\">3</span>; <span class=\"comment\">//$e 的值应该是为true，因为== 是弱比较，不关心等式左右的类型</span></span><br><span class=\"line\">$f = <span class=\"keyword\">true</span>; </span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\">$g = <span class=\"keyword\">array</span>(<span class=\"string\">'name'</span>=&gt;<span class=\"string\">'wang'</span>,<span class=\"string\">'year'</span>=&gt;<span class=\"number\">2000</span>);</span><br><span class=\"line\"><span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $color;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($color=<span class=\"string\">\"green\"</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;color = $color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">what_color</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$h = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\"><span class=\"comment\">// NULL</span></span><br><span class=\"line\">$i = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print_</span><span class=\"params\">($obj)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">echo</span> $obj,<span class=\"string\">'=&gt;'</span>,var_dump($obj),<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">print_($a);</span><br><span class=\"line\">print_($b);</span><br><span class=\"line\">print_($c);</span><br><span class=\"line\">print_($d);</span><br><span class=\"line\">print_($e);</span><br><span class=\"line\">print_($f);</span><br><span class=\"line\">print_($g);</span><br><span class=\"line\">var_dump($h);<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">print_($i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello world=&gt;string(11) &quot;Hello world&quot;</span><br><span class=\"line\">3=&gt;int(3)</span><br><span class=\"line\">3=&gt;float(3)</span><br><span class=\"line\">0=&gt;float(0)</span><br><span class=\"line\">1=&gt;bool(true)</span><br><span class=\"line\">1=&gt;bool(true)</span><br><span class=\"line\">Array=&gt;array(2) &#123; [&quot;name&quot;]=&gt; string(4) &quot;wang&quot; [&quot;year&quot;]=&gt; int(2000) &#125;</span><br><span class=\"line\">object(Car)#1 (1) &#123; [&quot;color&quot;]=&gt; string(5) &quot;green&quot; &#125;</span><br><span class=\"line\">=&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool define ( string $name , mixed $value [, bool $case_insensitive = <span class=\"keyword\">false</span> ] )</span><br><span class=\"line\">$name:常量名</span><br><span class=\"line\">$value:值</span><br><span class=\"line\">$case_insensitive:是否对大小写敏感,<span class=\"keyword\">true</span> 代表不敏感</span><br></pre></td></tr></table></figure>\n\n<p>define(“GREETING”, “欢迎访问 Runoob.com”);<br>echo GREETING;    // 输出 “欢迎访问<br>常量默认是全局变量</p>\n<h2 id=\"字符串相关\"><a href=\"#字符串相关\" class=\"headerlink\" title=\"字符串相关\"></a>字符串相关</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//字符串合并</span><br><span class=\"line\">$txt .&quot;+&quot;.$txt2 </span><br><span class=\"line\">//字符串长度</span><br><span class=\"line\">strlen()</span><br><span class=\"line\">//字符串查找，未找到返回False</span><br><span class=\"line\">strpos(&quot;文本&quot;,&quot;查找字符&quot;) // 返回字符串位置，从0开始</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$age = <span class=\"number\">18</span>;</span><br><span class=\"line\">$stage = <span class=\"keyword\">array</span>(<span class=\"string\">'青少年'</span>,<span class=\"string\">'成年'</span>,<span class=\"string\">'老年'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($age &gt;=<span class=\"number\">60</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$title = $stage[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> ($age &gt;=<span class=\"number\">18</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t$title = $stage[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t$title = $stage[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $title,<span class=\"string\">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$favcolor=<span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> ($favcolor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"red\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"你喜欢的颜色是红色!\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"blue\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"你喜欢的颜色是蓝色!\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"green\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"你喜欢的颜色是绿色!\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"你喜欢的颜色不是 红, 蓝, 或绿色!\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>while/do while/for /foreach</p>\n<h3 id=\"while-do-while\"><a href=\"#while-do-while\" class=\"headerlink\" title=\"while/do while\"></a>while/do while</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// while </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"while &lt;br&gt;\"</span>;</span><br><span class=\"line\">$x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($x) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $x--,<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do .. while </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"do..while &lt;br&gt;\"</span>;</span><br><span class=\"line\">$x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">  <span class=\"keyword\">echo</span> $x,<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($x--)</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">do..while</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-foreach\"><a href=\"#for-foreach\" class=\"headerlink\" title=\"for/ foreach\"></a>for/ foreach</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">1</span>; $i&lt;=<span class=\"number\">5</span>; $i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"The number is \"</span> . $i . <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$x=<span class=\"keyword\">array</span>(<span class=\"string\">\"one\"</span>=&gt;<span class=\"number\">1</span>,<span class=\"string\">\"two\"</span>=&gt;<span class=\"number\">2</span>,<span class=\"string\">\"three\"</span>=&gt;<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($x <span class=\"keyword\">as</span> $key =&gt; $value)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $key,<span class=\"string\">\" : \"</span>,$value,<span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The number is 1</span><br><span class=\"line\">The number is 2</span><br><span class=\"line\">The number is 3</span><br><span class=\"line\">The number is 4</span><br><span class=\"line\">The number is 5</span><br><span class=\"line\">one : 1</span><br><span class=\"line\">two : 2</span><br><span class=\"line\">three : 3</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"魔术常量\"><a href=\"#魔术常量\" class=\"headerlink\" title=\"魔术常量\"></a>魔术常量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__LINE__: 语句所处的行号</span><br><span class=\"line\">__FILE__: 文件的完整路径（含文件名）</span><br><span class=\"line\">__DIR__: 文件的目录</span><br><span class=\"line\">__FUNCTION__:函数名</span><br><span class=\"line\">__CLASS__:类名</span><br><span class=\"line\">__TRAIT__:</span><br><span class=\"line\">__METHOD__:类的方法名</span><br><span class=\"line\">__NAMESPACE__:命名空间</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace MyProject;// 必须是在首行</span><br><span class=\"line\">// 魔术常量</span><br><span class=\"line\">echo &apos;这是第 &quot; &apos;  . __LINE__ . &apos; &quot; 行&apos;,&apos;&lt;br&gt;&apos;;</span><br><span class=\"line\">echo &apos;该文件位于 &quot; &apos;  . __FILE__ . &apos; &quot; &apos;,&apos;&lt;br&gt;&apos;;</span><br><span class=\"line\">echo &apos;该文件位于 &quot; &apos;  . __DIR__ . &apos; &quot; &apos;,&apos;&lt;br&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &apos;命名空间为：&quot;&apos;, __NAMESPACE__, &apos;&quot;&apos;; // 输出 &quot;MyProject&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">class test &#123;</span><br><span class=\"line\">        function _print() &#123;</span><br><span class=\"line\">                echo &apos;类名为：&apos;  . __CLASS__ . &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">                echo  &apos;函数名为：&apos; . __FUNCTION__ .&quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">                echo  &apos;类的方法名：&apos; . __METHOD__ ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$t = new test();</span><br><span class=\"line\">$t-&gt;_print();</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是第 &quot; 4 &quot; 行</span><br><span class=\"line\">该文件位于 &quot; /Library/WebServer/Documents/a.php &quot;</span><br><span class=\"line\">该文件位于 &quot; /Library/WebServer/Documents &quot;</span><br><span class=\"line\">命名空间为：&quot;MyProject&quot;类名为：MyProject\\test</span><br><span class=\"line\">函数名为：_print</span><br><span class=\"line\">类的方法名：MyProject\\test::_print</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：PHP中的命名空间，可以解决的问题：</p>\n</blockquote>\n<ol>\n<li>用户编写的代码与PHP内部的类/函数/常量名字冲突</li>\n<li>为很长的标识符创建一个更加可读的别名</li>\n</ol>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"数组定义\"><a href=\"#数组定义\" class=\"headerlink\" title=\"数组定义\"></a>数组定义</h3><ol>\n<li>自动分配id</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cars=<span class=\"keyword\">array</span>(<span class=\"string\">\"Volvo\"</span>,<span class=\"string\">\"BMW\"</span>,<span class=\"string\">\"Toyota\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"keyword\">array</span>( <span class=\"string\">'a'</span>,<span class=\"number\">3</span> =&gt; <span class=\"string\">'b'</span>,<span class=\"number\">1</span> =&gt; <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>);</span><br><span class=\"line\">var_dump($a)</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">//array(4) &#123; [0]=&gt; string(1) \"a\" [3]=&gt; string(1) \"b\" [1]=&gt; string(1) \"c\" [4]=&gt; string(1) \"d\" &#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>关联数组</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$age=<span class=\"keyword\">array</span>(<span class=\"string\">\"Peter\"</span>=&gt;<span class=\"string\">\"35\"</span>,<span class=\"string\">\"Ben\"</span>=&gt;<span class=\"string\">\"37\"</span>,<span class=\"string\">\"Joe\"</span>=&gt;<span class=\"string\">\"43\"</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>遍历数组</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$age=<span class=\"keyword\">array</span>(<span class=\"string\">\"Peter\"</span>=&gt;<span class=\"string\">\"35\"</span>,<span class=\"string\">\"Ben\"</span>=&gt;<span class=\"string\">\"37\"</span>,<span class=\"string\">\"Joe\"</span>=&gt;<span class=\"string\">\"43\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($age <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $key,<span class=\"string\">'  =&gt; '</span>,$value,<span class=\"string\">'  type: '</span>,var_dump($key),<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>数组排序</li>\n</ol>\n<p>sort() &lt;–&gt; rsort()<br>asort() &lt;–&gt; arsort() //关联数组<br>ksort() &lt;–&gt; krsort() //关联数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$age=<span class=\"keyword\">array</span>(<span class=\"string\">\"a\"</span>=&gt;<span class=\"string\">\"5\"</span>,<span class=\"string\">\"c\"</span>=&gt;<span class=\"string\">\"37\"</span>,<span class=\"string\">\"b\"</span>=&gt;<span class=\"string\">\"-1\"</span>,<span class=\"string\">\"e\"</span>=&gt;<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"原始数组:\"</span>;</span><br><span class=\"line\">print_r($age);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"按key 排序\"</span>;</span><br><span class=\"line\">ksort($age);</span><br><span class=\"line\">print_r($age);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"按value 排序\"</span>;</span><br><span class=\"line\">asort($age);</span><br><span class=\"line\">print_r($age);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PHP-面向对象\"><a href=\"#PHP-面向对象\" class=\"headerlink\" title=\"PHP 面向对象\"></a>PHP 面向对象</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Site</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 成员变量 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $url;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $title;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($par1,$par2)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">$this</span>-&gt;url = $par1;</span><br><span class=\"line\">  \t<span class=\"keyword\">$this</span>-&gt;title = $par2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">echo</span> <span class=\"keyword\">__FUNCTION__</span>.<span class=\"string\">\"  已经运行\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 成员函数 */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setUrl</span><span class=\"params\">($par)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">$this</span>-&gt;url = $par;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrl</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;url . PHP_EOL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTitle</span><span class=\"params\">($par)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">$this</span>-&gt;title = $par;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTitle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;title . PHP_EOL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$siteobj = <span class=\"keyword\">new</span> Site(<span class=\"string\">'www.baidu.com'</span>,<span class=\"string\">'baidu'</span>);</span><br><span class=\"line\"><span class=\"keyword\">print</span> $siteobj-&gt;url;</span><br><span class=\"line\">$siteobj-&gt;setUrl(<span class=\"string\">'ppsteven.github.io'</span>);</span><br><span class=\"line\">$siteobj-&gt;setTitle(<span class=\"string\">'learnPHP'</span>);</span><br><span class=\"line\">$siteobj-&gt;getUrl();</span><br><span class=\"line\">$siteobj-&gt;getTitle();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$y = <span class=\"string\">\"globals varibale\"</span>; <span class=\"comment\">//全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span><span class=\"params\">($z=null)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> $y; <span class=\"comment\">// $y 为全局变量，有两种方式使用</span></span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $y,<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $GLOBALS[<span class=\"string\">'y'</span>],<span class=\"string\">'&lt;br&gt;'</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'参数作用域'</span>,$z;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> $x1=<span class=\"number\">0</span>;</span><br><span class=\"line\">    $x2 = <span class=\"number\">0</span>; <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $x1.<span class=\"string\">'('</span>.$x2.<span class=\"string\">\"）\"</span>;<span class=\"comment\">// 静态变量是不会随着函数完成而删除</span></span><br><span class=\"line\">    $x1++;</span><br><span class=\"line\">    $x2++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">x2(x1)</span></span><br><span class=\"line\"><span class=\"comment\">0(0)</span></span><br><span class=\"line\"><span class=\"comment\">0(1)</span></span><br><span class=\"line\"><span class=\"comment\">0(2)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><p>包含一些小的知识点和未系统整理的知识</p>\n<ul>\n<li><p>三元：expr1 ? expr2 : expr3</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"> $var = <span class=\"keyword\">true</span> ? <span class=\"number\">1</span> : <span class=\"keyword\">false</span> ? <span class=\"number\">2</span> : <span class=\"number\">3</span>;</span><br><span class=\"line\"> $varx = (<span class=\"keyword\">true</span> ? <span class=\"number\">1</span> : <span class=\"keyword\">false</span>)? <span class=\"number\">2</span> : <span class=\"number\">3</span>;</span><br><span class=\"line\"> $vary = <span class=\"keyword\">true</span> ? <span class=\"number\">1</span> : (<span class=\"keyword\">false</span> ? <span class=\"number\">2</span> : <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $var.<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $varx.<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $vary.<span class=\"string\">'&lt;br&gt;'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 结果是 2 2 1 , 这里的三元运算需要注意执行的顺序</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>null == false  : 返回的是false</p>\n</li>\n<li><p>1/2 (0.5) PHP中没有整除算法，有整除函数intdiv(1/2)</p>\n</li>\n<li><p>php 作用域</p>\n<ul>\n<li>local</li>\n<li>global</li>\n<li>static</li>\n<li>parameter // 参数作用域</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$y = <span class=\"string\">\"global varibale\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> $x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $x;</span><br><span class=\"line\">    $x++;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> PHP_EOL;    <span class=\"comment\">// 换行符</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>echo PHP_EOL; // 换行符</p>\n</li>\n<li><p>== 弱比较<br>=== 强比较</p>\n</li>\n</ul>\n"},{"title":"Mac 入门基础环境搭建","date":"2019-09-01T07:05:40.000Z","cover":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031005821.png","_content":"\n## Homebrew常用命令\n\n> 官网安装 Homebrew\n>\n> http://mxcl.github.com/homebrew/\n\n#### 前言\n\n包管理软件\n\nWin: 360软件管家\n\nDebian/Ubuntu: apt包管理系统 \n\nRedhat/Fedora: yum包管理系统\n\nMac OS X: Macports,Fink,AppStore\n\n以及   **Homebrew** \n\n#### 使用方法\n\nbrew -v\t查询Homebrew版本\nbrew -h\tbrew帮助\nbrew update\t更新Homebrew\nbrew install <pkg_name>\t安装任意软件\nbrew uninstall <pkg_name>\t卸载任意软件\nbrew search <pkg_name>\t查询任意包\nbrew list\t列出安装列表\nbrew info <pkg_name>\t查看任意包内容信息\nbrew upgrade <pkg_name>\t更新任意包\nbrew cleanup <pkg_name>\t删除具体旧软件\nbrew cleanup\t\t删除所有旧软件\nbrew outdated\t\t已安装的包是否需要更新\n\n## item2+oh-my-zsh\n\n```bash\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\nchsh -s /bin/zsh. # 命令航切换bash为zsh shell\niterm的perference->profiles->commond 设置成/bin/zsh # iterm2 界面手动切换\n\n- 更改shell 语言\n  1. cat /etc/shells # 查看所有 shell\n  2. chsh -s /bin/zsh #切换为zsh \n  3. 修改文件\n     vi ~/.zshrc\n     source ~/.zshrc\n  4. echo $SHELL # 查看当前shell \n\n\n\n#### Iterm2 使用技巧\n\n> 参考 [iTerm2常用的快捷键](https://www.cnblogs.com/manastudent/p/7367718.html)\n\n设置全局打开快捷键\n\nPerferemance -> Keys ->Hotkey -> show/hide all windows with a system-wide hotkey\n\ncommand + shift + t  # 设置快捷键 打开iterm2\n\n```\n新建标签：command + t\n关闭标签：command + w\n切换全屏：command + enter\n查找：command + f\n垂直分屏：command + d\n垂直上下分屏：command + shift + d\n左右 tab 之间来回切换：⌘ + 1 / 2\n查看历史命令：command + ; （输入常用命令的前缀后使用该快捷键可以实现补全的功能）\n除当前行：ctrl + u / ctrl +c \n上一条命令：ctrl + p\n搜索命令历史：ctrl + r\n清屏：clear\n重新打开：command + r\niTerm2 剪切板历史：command + shift + h\n```\n\n#### zsh  插件配置\n\n目前已经有的自带插件在官网Github中可以看到，https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins。\n凡是这里有的，都可以立刻生效。\n\n#### 参考页面\n\n> [一些实用常用插件推荐 for zsh oh-my-zsh](https://blog.e9china.net/lesson/yixieshiyongchangyongchajiantuijianforzshoh-my-zsh.html)\n\n##### git 默认自带\n\n##### zsh-syntax-highlighting  语法高亮\n\n```bash\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n```\n\n将zsh-syntax-highlighting 下载到zsh 的plugins 目录中\n\n```\nplugins=(其他的插件 zsh-autosuggestions)\n```\n\n##### zsh-autosuggestions 自动建议\n\n```bash\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\n```\nplugins=(其他的插件 zsh-autosuggestions)\n```\n\n##### sublime 默认自带\n\n| 命令        | 作用                         |\n| ----------- | ---------------------------- |\n| st          | 打开sublime                  |\n| st + 文件夹 | 打开文件夹                   |\n| st + 文件   | 打开文件                     |\n| stt         | 打开当前文件夹 ，等价于 st . |\n| sst         | 管理员权限 相当于 sudo st    |\n\n##### z 默认自带\n\n```bash\nz -x 无效路径\nz 目录名称\n```\n\n##### autojump\n\n```bash\n$brew install autojump \nplugins=(其他的插件 autojump)\n```\n\n#### 附录`.zshrc`配置\n\n```bash\n# If you come from bash you might have to change your $PATH.\n# export PATH=$HOME/bin:/usr/local/bin:$PATH\n\n# Path to your oh-my-zsh installation.\nexport ZSH=\"/Users/ppsteven/.oh-my-zsh\"\n\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\n# ZSH_THEME=\"agnoster\"\nZSH_THEME=\"ys\"\n\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME=random will cause zsh to load\n# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n\n# Uncomment the following line to disable bi-weekly auto-update checks.\n# DISABLE_AUTO_UPDATE=\"true\"\n\n# Uncomment the following line to automatically update without prompting.\n# DISABLE_UPDATE_PROMPT=\"true\"\n\n# Uncomment the following line to change how often to auto-update (in days).\n# export UPDATE_ZSH_DAYS=13\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=true\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS=\"true\"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\n# HIST_STAMPS=\"mm/dd/yyyy\"\n\n# Would you like to use another custom folder than $ZSH/custom?\n# ZSH_CUSTOM=/path/to/new-custom-folder\n\n# Which plugins would you like to load?\n# Standard plugins can be found in ~/.oh-my-zsh/plugins/*\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(\n          git\n#          zsh-syntax-highlighting\n          zsh-autosuggestions\n\t        sublime\n\t        autojump \n        )\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\n# if [[ -n $SSH_CONNECTION ]]; then\n#   export EDITOR='vim'\n# else\n#   export EDITOR='mvim'\n# fi\n\n# added by Anaconda3 2019.07 installer\n# >>> conda init >>>\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$(CONDA_REPORT_ERRORS=false '/Users/ppsteven/anaconda3/bin/conda' shell.bash hook 2> /dev/null)\"\nif [ $? -eq 0 ]; then\n    \\eval \"$__conda_setup\"\nelse\n    if [ -f \"/Users/ppsteven/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/Users/ppsteven/anaconda3/etc/profile.d/conda.sh\"\n        CONDA_CHANGEPS1=false conda activate base\n    else\n        \\export PATH=\"/Users/ppsteven/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n# <<< conda init <<<\n\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n#\n# Example aliases\nalias zshconfig=\"vim ~/.zshrc\"\n# alias ohmyzsh=\"mate ~/.oh-my-zsh\"\n```\n\n\n\n## 解压软件\n\n### 解压软件 unrar\n\nbrew install unrar\n\n使用方法\n\nunrar x test.rar # 解压到当前目录\n\n### 解压软件 7z\n\nbrew search 7z   # p7zip\n\nbrew install p7zip\n\n使用方法\n\n7z e filename.7z\n\n\n\n## 图床软件PicGo\n\n安装教程\n\n> https://github.com/Molunerfinn/PicGo\n>\n> 看完上面的配置才发现也是找工作的学生，真是厉害\n\nGithub 图床配置\n\n```\nPPsteven/pictures\nmaster\nToken:XXXXX\nimg/\nhttps://cdn.jsdelivr.net/gh/PPsteven/pictures\n```\n\n","source":"_posts/Mac 入门配置.md","raw":"---\ntitle: Mac 入门基础环境搭建\ndate: \ntags: Hexo\ncategories: 电脑基本配置\ncover: https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191031005821.png\n---\n\n## Homebrew常用命令\n\n> 官网安装 Homebrew\n>\n> http://mxcl.github.com/homebrew/\n\n#### 前言\n\n包管理软件\n\nWin: 360软件管家\n\nDebian/Ubuntu: apt包管理系统 \n\nRedhat/Fedora: yum包管理系统\n\nMac OS X: Macports,Fink,AppStore\n\n以及   **Homebrew** \n\n#### 使用方法\n\nbrew -v\t查询Homebrew版本\nbrew -h\tbrew帮助\nbrew update\t更新Homebrew\nbrew install <pkg_name>\t安装任意软件\nbrew uninstall <pkg_name>\t卸载任意软件\nbrew search <pkg_name>\t查询任意包\nbrew list\t列出安装列表\nbrew info <pkg_name>\t查看任意包内容信息\nbrew upgrade <pkg_name>\t更新任意包\nbrew cleanup <pkg_name>\t删除具体旧软件\nbrew cleanup\t\t删除所有旧软件\nbrew outdated\t\t已安装的包是否需要更新\n\n## item2+oh-my-zsh\n\n```bash\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\nchsh -s /bin/zsh. # 命令航切换bash为zsh shell\niterm的perference->profiles->commond 设置成/bin/zsh # iterm2 界面手动切换\n\n- 更改shell 语言\n  1. cat /etc/shells # 查看所有 shell\n  2. chsh -s /bin/zsh #切换为zsh \n  3. 修改文件\n     vi ~/.zshrc\n     source ~/.zshrc\n  4. echo $SHELL # 查看当前shell \n\n\n\n#### Iterm2 使用技巧\n\n> 参考 [iTerm2常用的快捷键](https://www.cnblogs.com/manastudent/p/7367718.html)\n\n设置全局打开快捷键\n\nPerferemance -> Keys ->Hotkey -> show/hide all windows with a system-wide hotkey\n\ncommand + shift + t  # 设置快捷键 打开iterm2\n\n```\n新建标签：command + t\n关闭标签：command + w\n切换全屏：command + enter\n查找：command + f\n垂直分屏：command + d\n垂直上下分屏：command + shift + d\n左右 tab 之间来回切换：⌘ + 1 / 2\n查看历史命令：command + ; （输入常用命令的前缀后使用该快捷键可以实现补全的功能）\n除当前行：ctrl + u / ctrl +c \n上一条命令：ctrl + p\n搜索命令历史：ctrl + r\n清屏：clear\n重新打开：command + r\niTerm2 剪切板历史：command + shift + h\n```\n\n#### zsh  插件配置\n\n目前已经有的自带插件在官网Github中可以看到，https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins。\n凡是这里有的，都可以立刻生效。\n\n#### 参考页面\n\n> [一些实用常用插件推荐 for zsh oh-my-zsh](https://blog.e9china.net/lesson/yixieshiyongchangyongchajiantuijianforzshoh-my-zsh.html)\n\n##### git 默认自带\n\n##### zsh-syntax-highlighting  语法高亮\n\n```bash\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n```\n\n将zsh-syntax-highlighting 下载到zsh 的plugins 目录中\n\n```\nplugins=(其他的插件 zsh-autosuggestions)\n```\n\n##### zsh-autosuggestions 自动建议\n\n```bash\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\n```\nplugins=(其他的插件 zsh-autosuggestions)\n```\n\n##### sublime 默认自带\n\n| 命令        | 作用                         |\n| ----------- | ---------------------------- |\n| st          | 打开sublime                  |\n| st + 文件夹 | 打开文件夹                   |\n| st + 文件   | 打开文件                     |\n| stt         | 打开当前文件夹 ，等价于 st . |\n| sst         | 管理员权限 相当于 sudo st    |\n\n##### z 默认自带\n\n```bash\nz -x 无效路径\nz 目录名称\n```\n\n##### autojump\n\n```bash\n$brew install autojump \nplugins=(其他的插件 autojump)\n```\n\n#### 附录`.zshrc`配置\n\n```bash\n# If you come from bash you might have to change your $PATH.\n# export PATH=$HOME/bin:/usr/local/bin:$PATH\n\n# Path to your oh-my-zsh installation.\nexport ZSH=\"/Users/ppsteven/.oh-my-zsh\"\n\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\n# ZSH_THEME=\"agnoster\"\nZSH_THEME=\"ys\"\n\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME=random will cause zsh to load\n# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n\n# Uncomment the following line to disable bi-weekly auto-update checks.\n# DISABLE_AUTO_UPDATE=\"true\"\n\n# Uncomment the following line to automatically update without prompting.\n# DISABLE_UPDATE_PROMPT=\"true\"\n\n# Uncomment the following line to change how often to auto-update (in days).\n# export UPDATE_ZSH_DAYS=13\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=true\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS=\"true\"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\n# HIST_STAMPS=\"mm/dd/yyyy\"\n\n# Would you like to use another custom folder than $ZSH/custom?\n# ZSH_CUSTOM=/path/to/new-custom-folder\n\n# Which plugins would you like to load?\n# Standard plugins can be found in ~/.oh-my-zsh/plugins/*\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(\n          git\n#          zsh-syntax-highlighting\n          zsh-autosuggestions\n\t        sublime\n\t        autojump \n        )\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\n# if [[ -n $SSH_CONNECTION ]]; then\n#   export EDITOR='vim'\n# else\n#   export EDITOR='mvim'\n# fi\n\n# added by Anaconda3 2019.07 installer\n# >>> conda init >>>\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$(CONDA_REPORT_ERRORS=false '/Users/ppsteven/anaconda3/bin/conda' shell.bash hook 2> /dev/null)\"\nif [ $? -eq 0 ]; then\n    \\eval \"$__conda_setup\"\nelse\n    if [ -f \"/Users/ppsteven/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/Users/ppsteven/anaconda3/etc/profile.d/conda.sh\"\n        CONDA_CHANGEPS1=false conda activate base\n    else\n        \\export PATH=\"/Users/ppsteven/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n# <<< conda init <<<\n\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n#\n# Example aliases\nalias zshconfig=\"vim ~/.zshrc\"\n# alias ohmyzsh=\"mate ~/.oh-my-zsh\"\n```\n\n\n\n## 解压软件\n\n### 解压软件 unrar\n\nbrew install unrar\n\n使用方法\n\nunrar x test.rar # 解压到当前目录\n\n### 解压软件 7z\n\nbrew search 7z   # p7zip\n\nbrew install p7zip\n\n使用方法\n\n7z e filename.7z\n\n\n\n## 图床软件PicGo\n\n安装教程\n\n> https://github.com/Molunerfinn/PicGo\n>\n> 看完上面的配置才发现也是找工作的学生，真是厉害\n\nGithub 图床配置\n\n```\nPPsteven/pictures\nmaster\nToken:XXXXX\nimg/\nhttps://cdn.jsdelivr.net/gh/PPsteven/pictures\n```\n\n","slug":"Mac 入门配置","published":1,"updated":"2019-11-21T08:17:21.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3acxtk2000mpw8m7qqgdzvk","content":"<h2 id=\"Homebrew常用命令\"><a href=\"#Homebrew常用命令\" class=\"headerlink\" title=\"Homebrew常用命令\"></a>Homebrew常用命令</h2><blockquote>\n<p>官网安装 Homebrew</p>\n<p><a href=\"http://mxcl.github.com/homebrew/\" target=\"_blank\" rel=\"noopener\">http://mxcl.github.com/homebrew/</a></p>\n</blockquote>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>包管理软件</p>\n<p>Win: 360软件管家</p>\n<p>Debian/Ubuntu: apt包管理系统 </p>\n<p>Redhat/Fedora: yum包管理系统</p>\n<p>Mac OS X: Macports,Fink,AppStore</p>\n<p>以及   <strong>Homebrew</strong> </p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>brew -v    查询Homebrew版本<br>brew -h    brew帮助<br>brew update    更新Homebrew<br>brew install <pkg_name>    安装任意软件<br>brew uninstall <pkg_name>    卸载任意软件<br>brew search <pkg_name>    查询任意包<br>brew list    列出安装列表<br>brew info <pkg_name>    查看任意包内容信息<br>brew upgrade <pkg_name>    更新任意包<br>brew cleanup <pkg_name>    删除具体旧软件<br>brew cleanup        删除所有旧软件<br>brew outdated        已安装的包是否需要更新</p>\n<h2 id=\"item2-oh-my-zsh\"><a href=\"#item2-oh-my-zsh\" class=\"headerlink\" title=\"item2+oh-my-zsh\"></a>item2+oh-my-zsh</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<p>chsh -s /bin/zsh. # 命令航切换bash为zsh shell<br>iterm的perference-&gt;profiles-&gt;commond 设置成/bin/zsh # iterm2 界面手动切换</p>\n<ul>\n<li>更改shell 语言<ol>\n<li>cat /etc/shells # 查看所有 shell</li>\n<li>chsh -s /bin/zsh #切换为zsh </li>\n<li>修改文件<br>vi ~/.zshrc<br>source ~/.zshrc</li>\n<li>echo $SHELL # 查看当前shell </li>\n</ol>\n</li>\n</ul>\n<h4 id=\"Iterm2-使用技巧\"><a href=\"#Iterm2-使用技巧\" class=\"headerlink\" title=\"Iterm2 使用技巧\"></a>Iterm2 使用技巧</h4><blockquote>\n<p>参考 <a href=\"https://www.cnblogs.com/manastudent/p/7367718.html\" target=\"_blank\" rel=\"noopener\">iTerm2常用的快捷键</a></p>\n</blockquote>\n<p>设置全局打开快捷键</p>\n<p>Perferemance -&gt; Keys -&gt;Hotkey -&gt; show/hide all windows with a system-wide hotkey</p>\n<p>command + shift + t  # 设置快捷键 打开iterm2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新建标签：command + t</span><br><span class=\"line\">关闭标签：command + w</span><br><span class=\"line\">切换全屏：command + enter</span><br><span class=\"line\">查找：command + f</span><br><span class=\"line\">垂直分屏：command + d</span><br><span class=\"line\">垂直上下分屏：command + shift + d</span><br><span class=\"line\">左右 tab 之间来回切换：⌘ + 1 / 2</span><br><span class=\"line\">查看历史命令：command + ; （输入常用命令的前缀后使用该快捷键可以实现补全的功能）</span><br><span class=\"line\">除当前行：ctrl + u / ctrl +c </span><br><span class=\"line\">上一条命令：ctrl + p</span><br><span class=\"line\">搜索命令历史：ctrl + r</span><br><span class=\"line\">清屏：clear</span><br><span class=\"line\">重新打开：command + r</span><br><span class=\"line\">iTerm2 剪切板历史：command + shift + h</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"zsh-插件配置\"><a href=\"#zsh-插件配置\" class=\"headerlink\" title=\"zsh  插件配置\"></a>zsh  插件配置</h4><p>目前已经有的自带插件在官网Github中可以看到，<a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins。\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins。</a><br>凡是这里有的，都可以立刻生效。</p>\n<h4 id=\"参考页面\"><a href=\"#参考页面\" class=\"headerlink\" title=\"参考页面\"></a>参考页面</h4><blockquote>\n<p><a href=\"https://blog.e9china.net/lesson/yixieshiyongchangyongchajiantuijianforzshoh-my-zsh.html\" target=\"_blank\" rel=\"noopener\">一些实用常用插件推荐 for zsh oh-my-zsh</a></p>\n</blockquote>\n<h5 id=\"git-默认自带\"><a href=\"#git-默认自带\" class=\"headerlink\" title=\"git 默认自带\"></a>git 默认自带</h5><h5 id=\"zsh-syntax-highlighting-语法高亮\"><a href=\"#zsh-syntax-highlighting-语法高亮\" class=\"headerlink\" title=\"zsh-syntax-highlighting  语法高亮\"></a>zsh-syntax-highlighting  语法高亮</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>\n\n<p>将zsh-syntax-highlighting 下载到zsh 的plugins 目录中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(其他的插件 zsh-autosuggestions)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"zsh-autosuggestions-自动建议\"><a href=\"#zsh-autosuggestions-自动建议\" class=\"headerlink\" title=\"zsh-autosuggestions 自动建议\"></a>zsh-autosuggestions 自动建议</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(其他的插件 zsh-autosuggestions)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sublime-默认自带\"><a href=\"#sublime-默认自带\" class=\"headerlink\" title=\"sublime 默认自带\"></a>sublime 默认自带</h5><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>st</td>\n<td>打开sublime</td>\n</tr>\n<tr>\n<td>st + 文件夹</td>\n<td>打开文件夹</td>\n</tr>\n<tr>\n<td>st + 文件</td>\n<td>打开文件</td>\n</tr>\n<tr>\n<td>stt</td>\n<td>打开当前文件夹 ，等价于 st .</td>\n</tr>\n<tr>\n<td>sst</td>\n<td>管理员权限 相当于 sudo st</td>\n</tr>\n</tbody></table>\n<h5 id=\"z-默认自带\"><a href=\"#z-默认自带\" class=\"headerlink\" title=\"z 默认自带\"></a>z 默认自带</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z -x 无效路径</span><br><span class=\"line\">z 目录名称</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"autojump\"><a href=\"#autojump\" class=\"headerlink\" title=\"autojump\"></a>autojump</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$brew</span> install autojump </span><br><span class=\"line\">plugins=(其他的插件 autojump)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附录-zshrc配置\"><a href=\"#附录-zshrc配置\" class=\"headerlink\" title=\"附录.zshrc配置\"></a>附录<code>.zshrc</code>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># If you come from bash you might have to change your $PATH.</span></span><br><span class=\"line\"><span class=\"comment\"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Path to your oh-my-zsh installation.</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ZSH=<span class=\"string\">\"/Users/ppsteven/.oh-my-zsh\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set name of the theme to load --- if set to \"random\", it will</span></span><br><span class=\"line\"><span class=\"comment\"># load a random theme each time oh-my-zsh is loaded, in which case,</span></span><br><span class=\"line\"><span class=\"comment\"># to know which specific one was loaded, run: echo $RANDOM_THEME</span></span><br><span class=\"line\"><span class=\"comment\"># See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</span></span><br><span class=\"line\"><span class=\"comment\"># ZSH_THEME=\"agnoster\"</span></span><br><span class=\"line\">ZSH_THEME=<span class=\"string\">\"ys\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set list of themes to pick from when loading at random</span></span><br><span class=\"line\"><span class=\"comment\"># Setting this variable when ZSH_THEME=random will cause zsh to load</span></span><br><span class=\"line\"><span class=\"comment\"># a theme from this variable instead of looking in ~/.oh-my-zsh/themes/</span></span><br><span class=\"line\"><span class=\"comment\"># If set to an empty array, this variable will have no effect.</span></span><br><span class=\"line\"><span class=\"comment\"># ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to use case-sensitive completion.</span></span><br><span class=\"line\"><span class=\"comment\"># CASE_SENSITIVE=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to use hyphen-insensitive completion.</span></span><br><span class=\"line\"><span class=\"comment\"># Case-sensitive completion must be off. _ and - will be interchangeable.</span></span><br><span class=\"line\"><span class=\"comment\"># HYPHEN_INSENSITIVE=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to disable bi-weekly auto-update checks.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_AUTO_UPDATE=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to automatically update without prompting.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_UPDATE_PROMPT=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to change how often to auto-update (in days).</span></span><br><span class=\"line\"><span class=\"comment\"># export UPDATE_ZSH_DAYS=13</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line if pasting URLs and other text is messed up.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_MAGIC_FUNCTIONS=true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to disable colors in ls.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_LS_COLORS=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to disable auto-setting terminal title.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_AUTO_TITLE=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to enable command auto-correction.</span></span><br><span class=\"line\"><span class=\"comment\"># ENABLE_CORRECTION=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to display red dots whilst waiting for completion.</span></span><br><span class=\"line\"><span class=\"comment\"># COMPLETION_WAITING_DOTS=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line if you want to disable marking untracked files</span></span><br><span class=\"line\"><span class=\"comment\"># under VCS as dirty. This makes repository status check for large repositories</span></span><br><span class=\"line\"><span class=\"comment\"># much, much faster.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_UNTRACKED_FILES_DIRTY=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line if you want to change the command execution time</span></span><br><span class=\"line\"><span class=\"comment\"># stamp shown in the history command output.</span></span><br><span class=\"line\"><span class=\"comment\"># You can set one of the optional three formats:</span></span><br><span class=\"line\"><span class=\"comment\"># \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"</span></span><br><span class=\"line\"><span class=\"comment\"># or set a custom format using the strftime function format specifications,</span></span><br><span class=\"line\"><span class=\"comment\"># see 'man strftime' for details.</span></span><br><span class=\"line\"><span class=\"comment\"># HIST_STAMPS=\"mm/dd/yyyy\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Would you like to use another custom folder than $ZSH/custom?</span></span><br><span class=\"line\"><span class=\"comment\"># ZSH_CUSTOM=/path/to/new-custom-folder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Which plugins would you like to load?</span></span><br><span class=\"line\"><span class=\"comment\"># Standard plugins can be found in ~/.oh-my-zsh/plugins/*</span></span><br><span class=\"line\"><span class=\"comment\"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span></span><br><span class=\"line\"><span class=\"comment\"># Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class=\"line\"><span class=\"comment\"># Add wisely, as too many plugins slow down shell startup.</span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">          git</span><br><span class=\"line\"><span class=\"comment\">#          zsh-syntax-highlighting</span></span><br><span class=\"line\">          zsh-autosuggestions</span><br><span class=\"line\">\t        sublime</span><br><span class=\"line\">\t        autojump </span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> <span class=\"variable\">$ZSH</span>/oh-my-zsh.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User configuration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># export MANPATH=\"/usr/local/man:$MANPATH\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You may need to manually set your language environment</span></span><br><span class=\"line\"><span class=\"comment\"># export LANG=en_US.UTF-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Preferred editor for local and remote sessions</span></span><br><span class=\"line\"><span class=\"comment\"># if [[ -n $SSH_CONNECTION ]]; then</span></span><br><span class=\"line\"><span class=\"comment\">#   export EDITOR='vim'</span></span><br><span class=\"line\"><span class=\"comment\"># else</span></span><br><span class=\"line\"><span class=\"comment\">#   export EDITOR='mvim'</span></span><br><span class=\"line\"><span class=\"comment\"># fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># added by Anaconda3 2019.07 installer</span></span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt;&gt; conda init &gt;&gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># !! Contents within this block are managed by 'conda init' !!</span></span><br><span class=\"line\">__conda_setup=<span class=\"string\">\"<span class=\"variable\">$(CONDA_REPORT_ERRORS=false '/Users/ppsteven/anaconda3/bin/conda' shell.bash hook 2&gt; /dev/null)</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    \\<span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$__conda_setup</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"/Users/ppsteven/anaconda3/etc/profile.d/conda.sh\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . <span class=\"string\">\"/Users/ppsteven/anaconda3/etc/profile.d/conda.sh\"</span></span><br><span class=\"line\">        CONDA_CHANGEPS1=<span class=\"literal\">false</span> conda activate base</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        \\<span class=\"built_in\">export</span> PATH=<span class=\"string\">\"/Users/ppsteven/anaconda3/bin:<span class=\"variable\">$PATH</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> __conda_setup</span><br><span class=\"line\"><span class=\"comment\"># &lt;&lt;&lt; conda init &lt;&lt;&lt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Compilation flags</span></span><br><span class=\"line\"><span class=\"comment\"># export ARCHFLAGS=\"-arch x86_64\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span></span><br><span class=\"line\"><span class=\"comment\"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span></span><br><span class=\"line\"><span class=\"comment\"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span></span><br><span class=\"line\"><span class=\"comment\"># For a full list of active aliases, run `alias`.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Example aliases</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> zshconfig=<span class=\"string\">\"vim ~/.zshrc\"</span></span><br><span class=\"line\"><span class=\"comment\"># alias ohmyzsh=\"mate ~/.oh-my-zsh\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"解压软件\"><a href=\"#解压软件\" class=\"headerlink\" title=\"解压软件\"></a>解压软件</h2><h3 id=\"解压软件-unrar\"><a href=\"#解压软件-unrar\" class=\"headerlink\" title=\"解压软件 unrar\"></a>解压软件 unrar</h3><p>brew install unrar</p>\n<p>使用方法</p>\n<p>unrar x test.rar # 解压到当前目录</p>\n<h3 id=\"解压软件-7z\"><a href=\"#解压软件-7z\" class=\"headerlink\" title=\"解压软件 7z\"></a>解压软件 7z</h3><p>brew search 7z   # p7zip</p>\n<p>brew install p7zip</p>\n<p>使用方法</p>\n<p>7z e filename.7z</p>\n<h2 id=\"图床软件PicGo\"><a href=\"#图床软件PicGo\" class=\"headerlink\" title=\"图床软件PicGo\"></a>图床软件PicGo</h2><p>安装教程</p>\n<blockquote>\n<p><a href=\"https://github.com/Molunerfinn/PicGo\" target=\"_blank\" rel=\"noopener\">https://github.com/Molunerfinn/PicGo</a></p>\n<p>看完上面的配置才发现也是找工作的学生，真是厉害</p>\n</blockquote>\n<p>Github 图床配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PPsteven/pictures</span><br><span class=\"line\">master</span><br><span class=\"line\">Token:XXXXX</span><br><span class=\"line\">img/</span><br><span class=\"line\">https://cdn.jsdelivr.net/gh/PPsteven/pictures</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Jacky's blogs","link":"https://wangjs-jacky.github.io/","avatar":"https://cdn.jsdelivr.net/gh/wangjs-jacky/testpic/小李.jpg","descr":null},"2":{"name":"Jordenbruce","link":"https://jordenbruce.com/","avatar":"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20191104221056.png","descr":"大神"}}}}}},"excerpt":"","more":"<h2 id=\"Homebrew常用命令\"><a href=\"#Homebrew常用命令\" class=\"headerlink\" title=\"Homebrew常用命令\"></a>Homebrew常用命令</h2><blockquote>\n<p>官网安装 Homebrew</p>\n<p><a href=\"http://mxcl.github.com/homebrew/\" target=\"_blank\" rel=\"noopener\">http://mxcl.github.com/homebrew/</a></p>\n</blockquote>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>包管理软件</p>\n<p>Win: 360软件管家</p>\n<p>Debian/Ubuntu: apt包管理系统 </p>\n<p>Redhat/Fedora: yum包管理系统</p>\n<p>Mac OS X: Macports,Fink,AppStore</p>\n<p>以及   <strong>Homebrew</strong> </p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>brew -v    查询Homebrew版本<br>brew -h    brew帮助<br>brew update    更新Homebrew<br>brew install <pkg_name>    安装任意软件<br>brew uninstall <pkg_name>    卸载任意软件<br>brew search <pkg_name>    查询任意包<br>brew list    列出安装列表<br>brew info <pkg_name>    查看任意包内容信息<br>brew upgrade <pkg_name>    更新任意包<br>brew cleanup <pkg_name>    删除具体旧软件<br>brew cleanup        删除所有旧软件<br>brew outdated        已安装的包是否需要更新</p>\n<h2 id=\"item2-oh-my-zsh\"><a href=\"#item2-oh-my-zsh\" class=\"headerlink\" title=\"item2+oh-my-zsh\"></a>item2+oh-my-zsh</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<p>chsh -s /bin/zsh. # 命令航切换bash为zsh shell<br>iterm的perference-&gt;profiles-&gt;commond 设置成/bin/zsh # iterm2 界面手动切换</p>\n<ul>\n<li>更改shell 语言<ol>\n<li>cat /etc/shells # 查看所有 shell</li>\n<li>chsh -s /bin/zsh #切换为zsh </li>\n<li>修改文件<br>vi ~/.zshrc<br>source ~/.zshrc</li>\n<li>echo $SHELL # 查看当前shell </li>\n</ol>\n</li>\n</ul>\n<h4 id=\"Iterm2-使用技巧\"><a href=\"#Iterm2-使用技巧\" class=\"headerlink\" title=\"Iterm2 使用技巧\"></a>Iterm2 使用技巧</h4><blockquote>\n<p>参考 <a href=\"https://www.cnblogs.com/manastudent/p/7367718.html\" target=\"_blank\" rel=\"noopener\">iTerm2常用的快捷键</a></p>\n</blockquote>\n<p>设置全局打开快捷键</p>\n<p>Perferemance -&gt; Keys -&gt;Hotkey -&gt; show/hide all windows with a system-wide hotkey</p>\n<p>command + shift + t  # 设置快捷键 打开iterm2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新建标签：command + t</span><br><span class=\"line\">关闭标签：command + w</span><br><span class=\"line\">切换全屏：command + enter</span><br><span class=\"line\">查找：command + f</span><br><span class=\"line\">垂直分屏：command + d</span><br><span class=\"line\">垂直上下分屏：command + shift + d</span><br><span class=\"line\">左右 tab 之间来回切换：⌘ + 1 / 2</span><br><span class=\"line\">查看历史命令：command + ; （输入常用命令的前缀后使用该快捷键可以实现补全的功能）</span><br><span class=\"line\">除当前行：ctrl + u / ctrl +c </span><br><span class=\"line\">上一条命令：ctrl + p</span><br><span class=\"line\">搜索命令历史：ctrl + r</span><br><span class=\"line\">清屏：clear</span><br><span class=\"line\">重新打开：command + r</span><br><span class=\"line\">iTerm2 剪切板历史：command + shift + h</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"zsh-插件配置\"><a href=\"#zsh-插件配置\" class=\"headerlink\" title=\"zsh  插件配置\"></a>zsh  插件配置</h4><p>目前已经有的自带插件在官网Github中可以看到，<a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins。\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins。</a><br>凡是这里有的，都可以立刻生效。</p>\n<h4 id=\"参考页面\"><a href=\"#参考页面\" class=\"headerlink\" title=\"参考页面\"></a>参考页面</h4><blockquote>\n<p><a href=\"https://blog.e9china.net/lesson/yixieshiyongchangyongchajiantuijianforzshoh-my-zsh.html\" target=\"_blank\" rel=\"noopener\">一些实用常用插件推荐 for zsh oh-my-zsh</a></p>\n</blockquote>\n<h5 id=\"git-默认自带\"><a href=\"#git-默认自带\" class=\"headerlink\" title=\"git 默认自带\"></a>git 默认自带</h5><h5 id=\"zsh-syntax-highlighting-语法高亮\"><a href=\"#zsh-syntax-highlighting-语法高亮\" class=\"headerlink\" title=\"zsh-syntax-highlighting  语法高亮\"></a>zsh-syntax-highlighting  语法高亮</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>\n\n<p>将zsh-syntax-highlighting 下载到zsh 的plugins 目录中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(其他的插件 zsh-autosuggestions)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"zsh-autosuggestions-自动建议\"><a href=\"#zsh-autosuggestions-自动建议\" class=\"headerlink\" title=\"zsh-autosuggestions 自动建议\"></a>zsh-autosuggestions 自动建议</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(其他的插件 zsh-autosuggestions)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sublime-默认自带\"><a href=\"#sublime-默认自带\" class=\"headerlink\" title=\"sublime 默认自带\"></a>sublime 默认自带</h5><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>st</td>\n<td>打开sublime</td>\n</tr>\n<tr>\n<td>st + 文件夹</td>\n<td>打开文件夹</td>\n</tr>\n<tr>\n<td>st + 文件</td>\n<td>打开文件</td>\n</tr>\n<tr>\n<td>stt</td>\n<td>打开当前文件夹 ，等价于 st .</td>\n</tr>\n<tr>\n<td>sst</td>\n<td>管理员权限 相当于 sudo st</td>\n</tr>\n</tbody></table>\n<h5 id=\"z-默认自带\"><a href=\"#z-默认自带\" class=\"headerlink\" title=\"z 默认自带\"></a>z 默认自带</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z -x 无效路径</span><br><span class=\"line\">z 目录名称</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"autojump\"><a href=\"#autojump\" class=\"headerlink\" title=\"autojump\"></a>autojump</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$brew</span> install autojump </span><br><span class=\"line\">plugins=(其他的插件 autojump)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附录-zshrc配置\"><a href=\"#附录-zshrc配置\" class=\"headerlink\" title=\"附录.zshrc配置\"></a>附录<code>.zshrc</code>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># If you come from bash you might have to change your $PATH.</span></span><br><span class=\"line\"><span class=\"comment\"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Path to your oh-my-zsh installation.</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ZSH=<span class=\"string\">\"/Users/ppsteven/.oh-my-zsh\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set name of the theme to load --- if set to \"random\", it will</span></span><br><span class=\"line\"><span class=\"comment\"># load a random theme each time oh-my-zsh is loaded, in which case,</span></span><br><span class=\"line\"><span class=\"comment\"># to know which specific one was loaded, run: echo $RANDOM_THEME</span></span><br><span class=\"line\"><span class=\"comment\"># See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</span></span><br><span class=\"line\"><span class=\"comment\"># ZSH_THEME=\"agnoster\"</span></span><br><span class=\"line\">ZSH_THEME=<span class=\"string\">\"ys\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set list of themes to pick from when loading at random</span></span><br><span class=\"line\"><span class=\"comment\"># Setting this variable when ZSH_THEME=random will cause zsh to load</span></span><br><span class=\"line\"><span class=\"comment\"># a theme from this variable instead of looking in ~/.oh-my-zsh/themes/</span></span><br><span class=\"line\"><span class=\"comment\"># If set to an empty array, this variable will have no effect.</span></span><br><span class=\"line\"><span class=\"comment\"># ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to use case-sensitive completion.</span></span><br><span class=\"line\"><span class=\"comment\"># CASE_SENSITIVE=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to use hyphen-insensitive completion.</span></span><br><span class=\"line\"><span class=\"comment\"># Case-sensitive completion must be off. _ and - will be interchangeable.</span></span><br><span class=\"line\"><span class=\"comment\"># HYPHEN_INSENSITIVE=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to disable bi-weekly auto-update checks.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_AUTO_UPDATE=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to automatically update without prompting.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_UPDATE_PROMPT=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to change how often to auto-update (in days).</span></span><br><span class=\"line\"><span class=\"comment\"># export UPDATE_ZSH_DAYS=13</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line if pasting URLs and other text is messed up.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_MAGIC_FUNCTIONS=true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to disable colors in ls.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_LS_COLORS=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to disable auto-setting terminal title.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_AUTO_TITLE=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to enable command auto-correction.</span></span><br><span class=\"line\"><span class=\"comment\"># ENABLE_CORRECTION=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line to display red dots whilst waiting for completion.</span></span><br><span class=\"line\"><span class=\"comment\"># COMPLETION_WAITING_DOTS=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line if you want to disable marking untracked files</span></span><br><span class=\"line\"><span class=\"comment\"># under VCS as dirty. This makes repository status check for large repositories</span></span><br><span class=\"line\"><span class=\"comment\"># much, much faster.</span></span><br><span class=\"line\"><span class=\"comment\"># DISABLE_UNTRACKED_FILES_DIRTY=\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment the following line if you want to change the command execution time</span></span><br><span class=\"line\"><span class=\"comment\"># stamp shown in the history command output.</span></span><br><span class=\"line\"><span class=\"comment\"># You can set one of the optional three formats:</span></span><br><span class=\"line\"><span class=\"comment\"># \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"</span></span><br><span class=\"line\"><span class=\"comment\"># or set a custom format using the strftime function format specifications,</span></span><br><span class=\"line\"><span class=\"comment\"># see 'man strftime' for details.</span></span><br><span class=\"line\"><span class=\"comment\"># HIST_STAMPS=\"mm/dd/yyyy\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Would you like to use another custom folder than $ZSH/custom?</span></span><br><span class=\"line\"><span class=\"comment\"># ZSH_CUSTOM=/path/to/new-custom-folder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Which plugins would you like to load?</span></span><br><span class=\"line\"><span class=\"comment\"># Standard plugins can be found in ~/.oh-my-zsh/plugins/*</span></span><br><span class=\"line\"><span class=\"comment\"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span></span><br><span class=\"line\"><span class=\"comment\"># Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class=\"line\"><span class=\"comment\"># Add wisely, as too many plugins slow down shell startup.</span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">          git</span><br><span class=\"line\"><span class=\"comment\">#          zsh-syntax-highlighting</span></span><br><span class=\"line\">          zsh-autosuggestions</span><br><span class=\"line\">\t        sublime</span><br><span class=\"line\">\t        autojump </span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> <span class=\"variable\">$ZSH</span>/oh-my-zsh.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User configuration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># export MANPATH=\"/usr/local/man:$MANPATH\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You may need to manually set your language environment</span></span><br><span class=\"line\"><span class=\"comment\"># export LANG=en_US.UTF-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Preferred editor for local and remote sessions</span></span><br><span class=\"line\"><span class=\"comment\"># if [[ -n $SSH_CONNECTION ]]; then</span></span><br><span class=\"line\"><span class=\"comment\">#   export EDITOR='vim'</span></span><br><span class=\"line\"><span class=\"comment\"># else</span></span><br><span class=\"line\"><span class=\"comment\">#   export EDITOR='mvim'</span></span><br><span class=\"line\"><span class=\"comment\"># fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># added by Anaconda3 2019.07 installer</span></span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt;&gt; conda init &gt;&gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># !! Contents within this block are managed by 'conda init' !!</span></span><br><span class=\"line\">__conda_setup=<span class=\"string\">\"<span class=\"variable\">$(CONDA_REPORT_ERRORS=false '/Users/ppsteven/anaconda3/bin/conda' shell.bash hook 2&gt; /dev/null)</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    \\<span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$__conda_setup</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"/Users/ppsteven/anaconda3/etc/profile.d/conda.sh\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . <span class=\"string\">\"/Users/ppsteven/anaconda3/etc/profile.d/conda.sh\"</span></span><br><span class=\"line\">        CONDA_CHANGEPS1=<span class=\"literal\">false</span> conda activate base</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        \\<span class=\"built_in\">export</span> PATH=<span class=\"string\">\"/Users/ppsteven/anaconda3/bin:<span class=\"variable\">$PATH</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> __conda_setup</span><br><span class=\"line\"><span class=\"comment\"># &lt;&lt;&lt; conda init &lt;&lt;&lt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Compilation flags</span></span><br><span class=\"line\"><span class=\"comment\"># export ARCHFLAGS=\"-arch x86_64\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span></span><br><span class=\"line\"><span class=\"comment\"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span></span><br><span class=\"line\"><span class=\"comment\"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span></span><br><span class=\"line\"><span class=\"comment\"># For a full list of active aliases, run `alias`.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Example aliases</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> zshconfig=<span class=\"string\">\"vim ~/.zshrc\"</span></span><br><span class=\"line\"><span class=\"comment\"># alias ohmyzsh=\"mate ~/.oh-my-zsh\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"解压软件\"><a href=\"#解压软件\" class=\"headerlink\" title=\"解压软件\"></a>解压软件</h2><h3 id=\"解压软件-unrar\"><a href=\"#解压软件-unrar\" class=\"headerlink\" title=\"解压软件 unrar\"></a>解压软件 unrar</h3><p>brew install unrar</p>\n<p>使用方法</p>\n<p>unrar x test.rar # 解压到当前目录</p>\n<h3 id=\"解压软件-7z\"><a href=\"#解压软件-7z\" class=\"headerlink\" title=\"解压软件 7z\"></a>解压软件 7z</h3><p>brew search 7z   # p7zip</p>\n<p>brew install p7zip</p>\n<p>使用方法</p>\n<p>7z e filename.7z</p>\n<h2 id=\"图床软件PicGo\"><a href=\"#图床软件PicGo\" class=\"headerlink\" title=\"图床软件PicGo\"></a>图床软件PicGo</h2><p>安装教程</p>\n<blockquote>\n<p><a href=\"https://github.com/Molunerfinn/PicGo\" target=\"_blank\" rel=\"noopener\">https://github.com/Molunerfinn/PicGo</a></p>\n<p>看完上面的配置才发现也是找工作的学生，真是厉害</p>\n</blockquote>\n<p>Github 图床配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PPsteven/pictures</span><br><span class=\"line\">master</span><br><span class=\"line\">Token:XXXXX</span><br><span class=\"line\">img/</span><br><span class=\"line\">https://cdn.jsdelivr.net/gh/PPsteven/pictures</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3acxtjq000apw8m8xbaa7os","category_id":"ck3acxtjl0006pw8me94604s8","_id":"ck3acxtk1000jpw8m2sx37rey"},{"post_id":"ck3acxtjf0002pw8m11j43su3","category_id":"ck3acxtjl0006pw8me94604s8","_id":"ck3acxtk3000npw8m747hbddc"},{"post_id":"ck3acxtjj0004pw8mekvcffme","category_id":"ck3acxtjl0006pw8me94604s8","_id":"ck3acxtk4000ppw8m9kgx1ok9"},{"post_id":"ck3acxtjs000cpw8m7lxy6st0","category_id":"ck3acxtk4000qpw8m4fxwbpig","_id":"ck3acxtk6000vpw8mhf833aqk"},{"post_id":"ck3acxtk0000ipw8mh2qhfpwc","category_id":"ck3acxtk6000upw8mbulhgh9s","_id":"ck3acxtk80013pw8m2bxlban7"},{"post_id":"ck3acxtk2000mpw8m7qqgdzvk","category_id":"ck3acxtk4000qpw8m4fxwbpig","_id":"ck3acxtk90016pw8mcb5fe6ng"},{"post_id":"ck3acxtjn0008pw8md9pfb4kv","category_id":"ck3acxtk1000kpw8me5te8e4x","_id":"ck3acxtka001bpw8m4u4x3l94"},{"post_id":"ck3acxtjn0008pw8md9pfb4kv","category_id":"ck3acxtk80012pw8m44zmfmkb","_id":"ck3acxtkb001dpw8m3jntcp14"},{"post_id":"ck3acxtjy000hpw8m69jx2dej","category_id":"ck3acxtk1000kpw8me5te8e4x","_id":"ck3acxtkb001epw8m4zuo7d8r"},{"post_id":"ck3acxtjy000hpw8m69jx2dej","category_id":"ck3acxtk80012pw8m44zmfmkb","_id":"ck3acxtkc001gpw8m6hb50bj0"}],"PostTag":[{"post_id":"ck3acxtjf0002pw8m11j43su3","tag_id":"ck3acxtjn0007pw8m5oz5d89d","_id":"ck3acxtjy000gpw8m848947an"},{"post_id":"ck3acxtjj0004pw8mekvcffme","tag_id":"ck3acxtju000epw8mcdbu9gnd","_id":"ck3acxtk3000opw8m78zzaxxp"},{"post_id":"ck3acxtjn0008pw8md9pfb4kv","tag_id":"ck3acxtk2000lpw8mdkkt8p2w","_id":"ck3acxtk6000xpw8m9at3gjbe"},{"post_id":"ck3acxtjn0008pw8md9pfb4kv","tag_id":"ck3acxtk4000rpw8mccsegtww","_id":"ck3acxtk7000zpw8m599u6mcc"},{"post_id":"ck3acxtjn0008pw8md9pfb4kv","tag_id":"ck3acxtk5000tpw8m9dbzh58g","_id":"ck3acxtk70011pw8mbwk78ybd"},{"post_id":"ck3acxtjq000apw8m8xbaa7os","tag_id":"ck3acxtk6000wpw8m87lf3s2h","_id":"ck3acxtk90015pw8mbjmd1dwl"},{"post_id":"ck3acxtjq000apw8m8xbaa7os","tag_id":"ck3acxtk70010pw8md3ps7qvt","_id":"ck3acxtk90018pw8m0604414c"},{"post_id":"ck3acxtjs000cpw8m7lxy6st0","tag_id":"ck3acxtk80014pw8m1i2nb17x","_id":"ck3acxtka001apw8m6qpeary0"},{"post_id":"ck3acxtjy000hpw8m69jx2dej","tag_id":"ck3acxtk2000lpw8mdkkt8p2w","_id":"ck3acxtkd001ipw8mgllqhjip"},{"post_id":"ck3acxtjy000hpw8m69jx2dej","tag_id":"ck3acxtk4000rpw8mccsegtww","_id":"ck3acxtkd001jpw8m7s921j0z"},{"post_id":"ck3acxtjy000hpw8m69jx2dej","tag_id":"ck3acxtk5000tpw8m9dbzh58g","_id":"ck3acxtke001lpw8mahhe1ivv"},{"post_id":"ck3acxtk0000ipw8mh2qhfpwc","tag_id":"ck3acxtkc001hpw8m7xz43359","_id":"ck3acxtkg001npw8m93y39coi"},{"post_id":"ck3acxtk0000ipw8mh2qhfpwc","tag_id":"ck3acxtk70010pw8md3ps7qvt","_id":"ck3acxtkh001opw8m9hud5cos"},{"post_id":"ck3acxtk2000mpw8m7qqgdzvk","tag_id":"ck3acxtk80014pw8m1i2nb17x","_id":"ck3acxtkh001ppw8me30a14e1"}],"Tag":[{"name":"Github,","_id":"ck3acxtjn0007pw8m5oz5d89d"},{"name":"日常学习笔记,Docker","_id":"ck3acxtju000epw8mcdbu9gnd"},{"name":"Pine","_id":"ck3acxtk2000lpw8mdkkt8p2w"},{"name":"TradingView","_id":"ck3acxtk4000rpw8mccsegtww"},{"name":"量化","_id":"ck3acxtk5000tpw8m9dbzh58g"},{"name":"git","_id":"ck3acxtk6000wpw8m87lf3s2h"},{"name":"日常学习笔记","_id":"ck3acxtk70010pw8md3ps7qvt"},{"name":"Hexo","_id":"ck3acxtk80014pw8m1i2nb17x"},{"name":"php","_id":"ck3acxtkc001hpw8m7xz43359"}]}}