"use strict";(self.webpackChunkcodepainter=self.webpackChunkcodepainter||[]).push([[3443],{85279:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>a});var t=r(74848),o=r(28453);const s={title:"\u9762\u8bd5\u989828. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811",date:new Date("2020-08-15T11:28:00.000Z"),tags:["\u5251\u6307Offer"],categories:"\u5251\u6307Offer",cover:"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20201014133927.png",slug:"/pages/5501d6/"},l=void 0,i={id:"\u9762\u8bd5\u6280\u5de7/\u5251\u6307Offer/offer-28",title:"\u9762\u8bd5\u989828. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811",description:"\u9898\u76ee\u63cf\u8ff0",source:"@site/docs/02.\u9762\u8bd5\u6280\u5de7/04.\u5251\u6307Offer/offer-28.md",sourceDirName:"02.\u9762\u8bd5\u6280\u5de7/04.\u5251\u6307Offer",slug:"/pages/5501d6/",permalink:"/docs/pages/5501d6/",draft:!1,unlisted:!1,editUrl:"https://github.com/PPsteven/CodePainter/tree/master/docs/02.\u9762\u8bd5\u6280\u5de7/04.\u5251\u6307Offer/offer-28.md",tags:[{label:"\u5251\u6307Offer",permalink:"/docs/tags/\u5251\u6307-offer"}],version:"current",frontMatter:{title:"\u9762\u8bd5\u989828. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811",date:"2020-08-15T11:28:00.000Z",tags:["\u5251\u6307Offer"],categories:"\u5251\u6307Offer",cover:"https://cdn.jsdelivr.net/gh/PPsteven/pictures/img/20201014133927.png",slug:"/pages/5501d6/"},sidebar:"interview",previous:{title:"\u9762\u8bd5\u989827. \u4e8c\u53c9\u6811\u7684\u955c\u50cf",permalink:"/docs/pages/e14b74/"},next:{title:"\u9762\u8bd5\u989829. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635",permalink:"/docs/pages/2131df/"}},c={},a=[{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:2},{value:"\u89e3\u9898\u601d\u8def",id:"\u89e3\u9898\u601d\u8def",level:2},{value:"\u65b9\u6cd5\u4e00\uff1a\u9012\u5f52",id:"\u65b9\u6cd5\u4e00\u9012\u5f52",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u505a\u9898\u94fe\u63a5\uff1a",(0,t.jsx)(n.a,{href:"https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/",children:"\u9762\u8bd5\u989828. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\u89e3\u9898\u601d\u8def",children:"\u89e3\u9898\u601d\u8def"}),"\n",(0,t.jsx)(n.h3,{id:"\u65b9\u6cd5\u4e00\u9012\u5f52",children:"\u65b9\u6cd5\u4e00\uff1a\u9012\u5f52"}),"\n",(0,t.jsx)(n.p,{children:"\u65b9\u6cd5\u4e8c\uff1a\u5c42\u6b21\u904d\u5386"}),"\n",(0,t.jsx)(n.p,{children:"\u901a\u8fc7\u5c42\u6b21\u904d\u5386\uff0c\u628a\u4e8c\u53c9\u6811\u8f6c\u5316\u4e3a\u5206\u5c42\u7ed3\u6784\uff0c\u7136\u540e\u518d\u6bd4\u8f83\u5373\u53ef\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u5e76\u4e0d\u5c5e\u4e8e\u6700\u4f18\u7684\u89e3\u6cd5"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# \u4e3e\u4f8b\n[1,2,2,3,4,4,3]  => \n\n[\n\n\t[1],\n\t[2,2],\n\t[3,4,4,3]\n\n]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u4ee3\u7801\u4e00\uff1a \u9012\u5f52"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        def compareTwoTree(A, B):\n            if not A and not B: return True # \u90fd\u662f null \u8282\u70b9\n            if not A or not B: return False # \u6709\u4e00\u8fb9\u662f null \u8282\u70b9\uff0c\u4fdd\u8bc1\u540e\u7eed\u6761\u4ef6\u8fd0\u884c\n            if A.val != B.val: return False \n            return compareTwoTree(A.left, B.right) and compareTwoTree(A.right, B.left)\n            \n        if not root: return True \n        return compareTwoTree(root.left, root.right)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u4ee3\u7801\u4e00\uff1a \u9012\u5f522"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u5355\u72ec\u8003\u8651 ",(0,t.jsx)(n.code,{children:"if not A or not B: return False"})," \u8fd9\u79cd\u60c5\u51b5"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        def compareTwoTree(A, B):\n            if not A and not B: return True # \u90fd\u662f null \u8282\u70b9\n            if A and B and A.val == B.val and compareTwoTree(A.left, B.right) and compareTwoTree(A.right, B.left): \n                return True \n            return False \n            \n        if not root: return True \n        return compareTwoTree(root.left, root.right)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u4ee3\u7801\u4e00\uff1a \u9012\u5f523"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\u901a\u8fc7\u4e4b\u524d\u5b66\u7684 bool(A, B) \u53ef\u4ee5\u8fdb\u4e00\u6b65\u7b80\u5316\u4ee3\u7801"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        def compareTwoTree(A, B):\n            if not A and not B: return True # \u90fd\u662f null \u8282\u70b9\n           \n            return bool(A and B) and (A.val == B.val) and \\\n                   compareTwoTree(A.left, B.right) and \\\n                   compareTwoTree(A.right, B.left)\n            \n        if not root: return True \n        return compareTwoTree(root.left, root.right)\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u4ee3\u7801\u4e8c\uff1a\u5c42\u7ea7\u904d\u5386"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if not root: return True \n        queue, res = collections.deque(), []\n        queue.append(root)\n        while queue:\n            _res = []\n            for _ in range(len(queue)):\n                temp = queue.popleft()\n                if temp.left: \n                    queue.append(temp.left)\n                    _res.append(temp.left.val)\n                else:\n                    _res.append(None)\n\n                if temp.right: \n                    queue.append(temp.right)\n                    _res.append(temp.right.val)\n                else:\n                    _res.append(None)\n                \n            res.append(_res)\n        for _res in res:\n            if _res != _res[::-1]: return False # \u6bd4\u8f83\n        return True \n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var t=r(96540);const o={},s=t.createContext(o);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);