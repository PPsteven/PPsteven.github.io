"use strict";(self.webpackChunkcodepainter=self.webpackChunkcodepainter||[]).push([[1597],{34037:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=t(74848),a=t(28453);const i={title:"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c(Medium)",date:new Date("2021-01-10T21:24:24.000Z"),slug:"/pages/ea5006/",categories:["\u6570\u636e\u7ed3\u6784","\u6808\u548c\u961f\u5217"]},c=void 0,o={id:"\u9762\u8bd5\u6280\u5de7/\u6570\u636e\u7ed3\u6784/\u6808\u548c\u961f\u5217/\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c(150)",title:"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c(Medium)",description:"\u9898\u76ee\u63cf\u8ff0",source:"@site/docs/02.\u9762\u8bd5\u6280\u5de7/03.\u6570\u636e\u7ed3\u6784/03.\u6808\u548c\u961f\u5217/07.\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c(150).md",sourceDirName:"02.\u9762\u8bd5\u6280\u5de7/03.\u6570\u636e\u7ed3\u6784/03.\u6808\u548c\u961f\u5217",slug:"/pages/ea5006/",permalink:"/docs/pages/ea5006/",draft:!1,unlisted:!1,editUrl:"https://github.com/PPsteven/CodePainter/tree/master/docs/02.\u9762\u8bd5\u6280\u5de7/03.\u6570\u636e\u7ed3\u6784/03.\u6808\u548c\u961f\u5217/07.\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c(150).md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c(Medium)",date:"2021-01-10T21:24:24.000Z",slug:"/pages/ea5006/",categories:["\u6570\u636e\u7ed3\u6784","\u6808\u548c\u961f\u5217"]},sidebar:"interview",previous:{title:"20. \u6709\u6548\u7684\u62ec\u53f7(Easy)",permalink:"/docs/pages/e44d9d/"},next:{title:"394. \u5b57\u7b26\u4e32\u89e3\u7801(Medium)",permalink:"/docs/pages/e46eba/"}},r={},l=[{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:2},{value:"\u6837\u4f8b",id:"\u6837\u4f8b",level:2},{value:"\u9898\u76ee\u89e3\u6790",id:"\u9898\u76ee\u89e3\u6790",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:2}];function p(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,s.jsx)(e.p,{children:"\u6c42\u51fa\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u6839\u636e \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6cd5"}),"\n",(0,s.jsx)(e.h2,{id:"\u6837\u4f8b",children:"\u6837\u4f8b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'Input: ["2", "1", "+", "3", "*"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u76ee\u89e3\u6790",children:"\u9898\u76ee\u89e3\u6790"}),"\n",(0,s.jsx)(e.p,{children:"\u7ecf\u5178\u6808"}),"\n",(0,s.jsx)(e.h2,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        stack = []\n        for char in tokens:\n            if  char in '+-*/':\n                x2 = stack.pop()\n                x1 = stack.pop()\n                if char == '+': stack.append(x1 + x2)\n                if char == '-': stack.append(x1 - x2)\n                if char == '*': stack.append(x1 * x2)\n                if char == '/': stack.append(int(x1 / x2))\n            else:\n                stack.append(int(char))\n        return stack[0]\n"})}),"\n",(0,s.jsx)(e.p,{children:"Go \u7684\u4f7f\u7528"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'func Pop(nums *[]int) int {\n    n := len(*nums)\n    value := (*nums)[n - 1] // \u4e00\u5b9a\u8981\u52a0 \u62ec\u53f7\n    *nums = (*nums)[:n - 1] \n    return value\n}\n\nfunc evalRPN(tokens []string) int {\n    n := len(tokens)\n    stack := make([]int, 0)\n    for i:= 0;i < n; i++ {\n        if strings.Contains("+-*/", tokens[i]) {\n            v1 := Pop(&stack)\n            v2 := Pop(&stack)\n            if tokens[i] == "+" {\n                stack = append(stack, v1 + v2)\n            } else if tokens[i] == "-" {\n                stack = append(stack, v2 - v1)\n            } else if tokens[i] == "*" {\n                stack = append(stack, v1 * v2)\n            } else {\n                stack = append(stack, v2 / v1)\n            }\n        } else {\n            tokenInt, _ := strconv.Atoi(tokens[i]) // value, error = strconv.Atoi\n            stack = append(stack, tokenInt)\n        }\n    }  \n    return stack[0]\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'func Pop(nums *[]int) int {\n    n := len(*nums)\n    value := (*nums)[n - 1]\n    *nums = (*nums)[:n - 1]\n    return value\n}\n\nfunc evalRPN(tokens []string) int {\n    n := len(tokens)\n    stack := make([]int, 0)\n    for i:=0; i < n; i++ {\n        if strings.Contains("+-*/", tokens[i]){\n            v1 := Pop(&stack)\n            v2 := Pop(&stack)\n            if tokens[i] == "+" {\n                stack = append(stack, v1 + v2) \n            } else if tokens[i] == "-" {\n                stack = append(stack, v2 - v1) \n            } else if tokens[i] == "*" {\n                stack = append(stack, v1 * v2) \n            } else {\n                stack = append(stack, v2 / v1) \n            }\n        } else {\n\t        value, _ := strconv.Atoi(tokens[i])\n\t        stack = append(stack, value)\n        }\n    }\n    return stack[0]\n}\n\n'})})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>o});var s=t(96540);const a={},i=s.createContext(a);function c(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:c(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);