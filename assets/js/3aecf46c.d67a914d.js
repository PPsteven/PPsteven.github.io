"use strict";(self.webpackChunkcodepainter=self.webpackChunkcodepainter||[]).push([[1120],{77305:(n,e,d)=>{d.r(e),d.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});var r=d(74848),i=d(28453);const s={title:"126. \u5355\u8bcd\u63a5\u9f99 II(Hard)",date:new Date("2020-12-09T00:05:04.000Z"),permalink:"/pages/7ab245/",categories:["\u7b97\u6cd5","\u641c\u7d22\u7b97\u6cd5"]},o=void 0,t={id:"\u9762\u8bd5\u6280\u5de7/\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5/\u5355\u8bcd\u63a5\u9f99 II(126)",title:"126. \u5355\u8bcd\u63a5\u9f99 II(Hard)",description:"\u9898\u76ee\u63cf\u8ff0",source:"@site/docs/02.\u9762\u8bd5\u6280\u5de7/02.\u7b97\u6cd5/05.\u641c\u7d22\u7b97\u6cd5/07.\u5355\u8bcd\u63a5\u9f99 II(126).md",sourceDirName:"02.\u9762\u8bd5\u6280\u5de7/02.\u7b97\u6cd5/05.\u641c\u7d22\u7b97\u6cd5",slug:"/\u9762\u8bd5\u6280\u5de7/\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5/\u5355\u8bcd\u63a5\u9f99 II(126)",permalink:"/docs/\u9762\u8bd5\u6280\u5de7/\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5/\u5355\u8bcd\u63a5\u9f99 II(126)",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02.\u9762\u8bd5\u6280\u5de7/02.\u7b97\u6cd5/05.\u641c\u7d22\u7b97\u6cd5/07.\u5355\u8bcd\u63a5\u9f99 II(126).md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"126. \u5355\u8bcd\u63a5\u9f99 II(Hard)",date:"2020-12-09T00:05:04.000Z",permalink:"/pages/7ab245/",categories:["\u7b97\u6cd5","\u641c\u7d22\u7b97\u6cd5"]},sidebar:"interview",previous:{title:"934. \u6700\u77ed\u7684\u6865(Medium)",permalink:"/docs/\u9762\u8bd5\u6280\u5de7/\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5/\u6700\u77ed\u7684\u6865(934)"},next:{title:"\u7ec3\u4e60\u9898",permalink:"/docs/\u9762\u8bd5\u6280\u5de7/\u7b97\u6cd5/\u641c\u7d22\u7b97\u6cd5/\u7ec3\u4e60"}},a={},c=[{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:2},{value:"\u6837\u4f8b",id:"\u6837\u4f8b",level:2},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:2},{value:"\u5355\u5c42\u65e0\u4f18\u5316 BFS \u4ee3\u7801",id:"\u5355\u5c42\u65e0\u4f18\u5316-bfs-\u4ee3\u7801",level:2},{value:"\u5355\u5c42BFS\u4f18\u5316\u2460",id:"\u5355\u5c42bfs\u4f18\u5316",level:2},{value:"\u53cc\u5411\u5e7f\u641c",id:"\u53cc\u5411\u5e7f\u641c",level:2}];function l(n){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,r.jsx)(e.p,{children:"\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08beginWord \u548c endWord\uff09\u548c\u4e00\u4e2a\u5b57\u5178 wordList\uff0c\u627e\u51fa\u6240\u6709\u4ece beginWord \u5230 endWord \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u8f6c\u6362\u540e\u5f97\u5230\u7684\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8bf4\u660e\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u4f60\u53ef\u4ee5\u5047\u8bbe beginWord \u548c endWord \u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"\u6837\u4f8b",children:"\u6837\u4f8b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'Input:\nbeginWord = "hit",\nendWord = "cog",\nwordList = ["hot","dot","dog","lot","log","cog"]\n\nOuptut:\n[\n  ["hit","hot","dot","dog","cog"],\n\xa0 ["hit","hot","lot","log","cog"]\n]\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\u5355\u5c42 BFS"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["\u56fe\u53c2\u8003\uff1a",(0,r.jsx)(e.a,{href:"https://leetcode-cn.com/problems/word-ladder-ii/solution/yan-du-you-xian-bian-li-shuang-xiang-yan-du-you--2/",children:"\u5355\u53cc\u5411\u5e7f\u5ea6\u4f18\u5148\u904d\u5386 + \u56de\u6eaf\u7b97\u6cd5\uff08Java\u3001Python\uff09"})]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"image-20201209001926718",src:d(8661).A+"",width:"825",height:"237"})}),"\n",(0,r.jsx)(e.h2,{id:"\u5355\u5c42\u65e0\u4f18\u5316-bfs-\u4ee3\u7801",children:"\u5355\u5c42\u65e0\u4f18\u5316 BFS \u4ee3\u7801"}),"\n",(0,r.jsxs)(e.p,{children:["\u8fd9\u91cc\u7684\u56fe\u7684\u5efa\u7acb\u662f\u901a\u8fc7  ",(0,r.jsx)(e.strong,{children:"\u5c42\u6b21\u904d\u5386\u6cd5"})," \u5efa\u7acb\u7684\u5173\u7cfb\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \u8d85\u65f6 20/39\nfrom collections import deque \ndef diffOneletter(word1, word2):\n    c = 0\n    for i in range(len(word1)):\n        if word1[i] != word2[i]:\n            c += 1\n    return c == 1\n\nclass Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        queue = deque()\n        queue.append([beginWord, [beginWord]])\n        ans = []\n        find = False \n        while queue:\n            for _ in range(len(queue)):\n                word, path = queue.popleft()\n                if word == endWord:\n                    ans.append(path[:])\n                    find = True \n                for i in range(len(wordList)):  # \u901a\u8fc7\u4e0d\u505c\u7684\u8bd5\u5efa\u7acb\u4e86 \u5b57\u4e0e\u5b57\u7684\u5173\u7cfb\n                    if wordList[i] not in path and diffOneletter(word, wordList[i]):\n                        queue.append([wordList[i], path + [wordList[i]]])\n            if find: \n                break \n        return ans \n"})}),"\n",(0,r.jsx)(e.p,{children:"\u4ee3\u7801\u5b9e\u73b0\u4e86\u57fa\u672c\u7684BFS\u601d\u60f3\uff0c\u4f46\u662f\u5b58\u5728\u5f88\u591a\u4f18\u5316\u7684\u70b9\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"diffOneletter"})," \u5b58\u5728\u5927\u91cf\u91cd\u590d\u8ba1\u7b97"]}),"\n",(0,r.jsx)(e.li,{children:"\u7531\u4e8e\u662f\u8981\u6c42\u51fa\u6240\u6709\u6700\u77ed\u8def\u5f84\u96c6\u5408\uff0c\u800c\u4e0d\u662f\u6700\u77ed\u6b65\u6570\uff0c\u5982\u679c\u4e0d\u52a0\u526a\u679d\u7b56\u7565\u7684\u8bdd\uff0c\u4e00\u5b9a\u4f1a\u8d85\u65f6\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"\u5355\u5c42bfs\u4f18\u5316",children:"\u5355\u5c42BFS\u4f18\u5316\u2460"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["\u53c2\u8003\uff1a",(0,r.jsx)(e.a,{href:"https://leetcode-cn.com/problems/word-ladder-ii/solution/dan-ci-jie-long-ii-by-leetcode-solution/",children:"LeetCode \u5b98\u65b9\u9898\u89e3"}),"\u7684\u601d\u8def"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u8fd9\u91cc\u7684\u4f18\u5316\u4f53\u73b0\u5728\uff0c\u9996\u5148\u6839\u636e wordList \u5b57\u5178\u6765 ",(0,r.jsx)(e.strong,{children:"\u5efa\u7acb\u4e00\u5f20\u56fe"}),"\uff0c\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u5b9e\u73b0\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"edges = defaultdict(set)\nfor word1 in wordList:\n  for word2 in wordList:\n    if diffOneletter(word1, word2):\n      edges[word1].add(word2)\n      edges[word2].add(word1)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"image-20201209004652545",src:d(37046).A+"",width:"662",height:"214"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \u8d85\u65f6 32/39\nfrom collections import deque, defaultdict\ndef diffOneletter(word1, word2):\n    c = 0\n    for i in range(len(word1)):\n        if word1[i] != word2[i]:\n            c += 1\n    return c == 1\n\nclass Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        # \u5f53 endWord \u4e0d\u5b58\u5728\u7684\u65f6\u5019\uff0c\u5c31\u8fd4\u56de\u7a7a\u6570\u7ec4\n        if endWord not in wordList: \n            return []\n        # \u521b\u5efa\u90bb\u63a5\u77e9\u9635\n        if beginWord not in wordList:\n            wordList.append(beginWord)\n        edges = defaultdict(list)\n        for i in range(len(wordList)):\n            for j in range(i + 1, len(wordList)):\n                if diffOneletter(wordList[i], wordList[j]):\n                    edges[wordList[i]].append(wordList[j])\n                    edges[wordList[j]].append(wordList[i])\n        \n        queue = deque()\n        queue.append([beginWord])\n        visited = set()\n        visited.add(beginWord)\n        ans = []\n        find = False \n        while queue:\n            subvisited = set() # \u96c6\u5408\u8bb0\u5f55\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u505a\u5230\u53bb\u91cd\n            for _ in range(len(queue)):\n                path = queue.popleft()\n                cur_word = path[-1]\n                if cur_word == endWord:\n                    ans.append(path[:])  # \u8fd9\u91cc\u4f7f\u7528 path \u6bcf\u6b21\u76f4\u63a5\u4fdd\u5b58\u4e86\u8def\u5f84\uff0c\u4f46\u662f\u5f88\u591a\u89e3\u6cd5\u8ba4\u4e3a\u8fd9\u6837\u505a\u6cd5\u4f1a\u6781\u5927\u6d88\u8017\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e00\u822c\u662f\u901a\u8fc7 BFS \u5efa\u7acb\u8bcd\u4e0e\u8bcd\u7684\u5173\u7cfb\u56fe\uff0c\u7136\u540e\u518d\u4f7f\u7528 DFS \u5bfb\u627e\u6700\u4f18\u8def\u5f84\u3002\n                    find = True \n                for word in edges[cur_word]:\n                    if word not in visited and :\n                        queue.append(path + [word])\n                        subvisited.add(word)\n            for word in subvisited: # \u540c\u4e00\u5c42\u904d\u5386\u7ed3\u675f\u540e\uff0c\u518d\u52a0\u5165\n                visited.add(word)\n            if find: \n                break \n        return ans \n"})}),"\n",(0,r.jsx)(e.p,{children:"\u8fd9\u6837\u4f18\u5316\u7684 Python \u4ee3\u7801\u65e0\u6cd5AC\uff0c\u4f46\u662f\u7b49\u4ef7\u7684 Java \u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u8fc7\u4e5f\u662f\u5c5e\u4e8e\u6781\u9650\u72b6\u6001\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u4e3a\u4e86\u7ee7\u7eed\u4f18\u5316\uff0c\u6211\u4eec\u53c2\u8003 ",(0,r.jsx)(e.a,{href:"https://leetcode-cn.com/problems/word-ladder-ii/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-3-3/",children:"\u8be6\u7ec6\u901a\u4fd7\u7684\u601d\u8def\u5206\u6790\uff0c\u591a\u89e3\u6cd5"})," \u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5c42\u4fe1\u606f\uff0c\u5f53 abc \u51fa\u73b0\u7b2c\u4e8c\u6b21\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u66fe\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u5c31\u4e0d\u5e94\u8be5\u7ee7\u7eed\u641c\u7d22\u4e86\u3002"]}),"\n",(0,r.jsx)(e.img,{src:"./assets/img/a677744731d785ae02ee5373b669c056ad03293262b03b6b8bb90a5cd5105093.jpg",alt:"img",style:{zoom:"67%"}}),"\n",(0,r.jsx)(e.h2,{id:"\u53cc\u5411\u5e7f\u641c",children:"\u53cc\u5411\u5e7f\u641c"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"image.png",src:d(7868).A+"",width:"1396",height:"544"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def backtracking(src, dst, successors, path, ans):\n    if src == dst:\n        ans.append(path[:])\n        return \n    for cur in successors[src]:\n        path.append(cur)\n        backtracking(cur, dst, successors, path, ans)\n        path.pop()\n    \nclass Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        if endWord not in wordList:  # \u5982\u679cendWord\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u4e00\u5b9a\u662f\u51fa\u4e0d\u6765\u7b54\u6848\n            return []\n        q1, q2 = {beginWord}, {endWord}  # \u8fd9\u91cc\u6ce8\u610f\u4e0d\u80fd\u4f7f\u7528 list \u4f1a\u8d85\u65f6\u7684\uff0c\u5fc5\u987b\u4f7f\u7528 set \u54c8\u5e0c\u8868\n        notVisitedWords = set(wordList)  # \u8bb0\u5f55\u4e86\u6240\u6709\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u5355\u8bcd\n        if beginWord in notVisitedWords:  # beginWord \u4e0d\u4e00\u5b9a\u4f1a\u5728 wordList \u4e2d\n            notVisitedWords.remove(beginWord)\n        notVisitedWords.remove(endWord)\n\n        successors = defaultdict(set)  # bfs \u7528\u6765\u8bb0\u5f55\u5b57\u5178\u7684\u56fe\u5173\u7cfb\n        reverse = False\n        found = False\n        while q1:  # \u5148\u4f7f\u7528 q1 \n            visitedWords = set()\n            for curWord in q1:\n                for j in range(len(curWord)):\n                    ch = curWord[j]\n                    for k in range(26):\n                        nextList = list(curWord)\n                        nextList[j] = chr(ord('a') + k)\n                        nextWord = ''.join(nextList)\n                        if nextWord in q2:  # \u5982\u679c\u5728q2\u4e2d\u51fa\u73b0\u8fc7\uff0c\u8bc1\u660e\u5df2\u7ecf\u627e\u5230\u4e86\n                            found = True\n                            if not reverse:\n                                successors[curWord].add(nextWord)\n                            else:\n                                successors[nextWord].add(curWord)\n                        if nextWord in notVisitedWords:  # \u5982\u679cnextWord\u662f\u5408\u6cd5\u7684\n                            if not reverse:\n                                successors[curWord].add(nextWord)\n                            else:\n                                successors[nextWord].add(curWord)\n                            visitedWords.add(nextWord)  # \u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u5355\u8bcd\n            if found:  # \u526a\u679d\n                break \n            for word in visitedWords:  # \u5c06\u6240\u6709\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u4ece\u672a\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u4e2d\u53bb\u9664\n                if word in notVisitedWords:\n                    notVisitedWords.remove(word)\n            if len(visitedWords) <= len(q2):  # \u6839\u636e\u8282\u70b9\u7684\u5927\u5c0f\u8c03\u6574\u641c\u7d22\u7684\u65b9\u5411\n                q1 = visitedWords  # \u8bb0\u5f55\u4ece\u5de6\u641c\u7d22\n            else:\n                reverse = not reverse  # \u7ffb\u8f6c\uff0c\u6362\u4e2a\u65b9\u5411\u641c\u7d22\n                q1 = q2\n                q2 = visitedWords\n        ans = []\n        if found:  # \u4f7f\u7528 dfs \u641c\u7d22\u51fa\u6700\u4f18\u8def\u5f84\n            path = [beginWord]\n            backtracking(beginWord, endWord, successors, path, ans)\n        return ans\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},7868:(n,e,d)=>{d.d(e,{A:()=>r});const r=d.p+"assets/images/cd190a4a61445ac9affc344f941da381d64a163b81c7594f342d45793c5bfd06-image-09c4b548c38f05889bc26d77550dab12.png"},8661:(n,e,d)=>{d.d(e,{A:()=>r});const r=d.p+"assets/images/image-20201209001926718-5f7dee02600a5e4723b6827b844b2eeb.png"},37046:(n,e,d)=>{d.d(e,{A:()=>r});const r=d.p+"assets/images/image-20201209004652545-fa2722f61f4cf2e04a9f9ace37e0a59a.png"},28453:(n,e,d)=>{d.d(e,{R:()=>o,x:()=>t});var r=d(96540);const i={},s=r.createContext(i);function o(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);