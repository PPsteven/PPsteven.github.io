"use strict";(self.webpackChunkcodepainter=self.webpackChunkcodepainter||[]).push([[3746],{79189:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var t=a(74848),s=a(28453);const i={title:"0x10.\u5bb6\u5ead\u670d\u52a1\u5668\u6298\u817e\u8bb0|\u5185\u7f51\u7a7f\u900f\u65b9\u6848|Headscale",date:new Date("2022-08-08T00:37:45.000Z"),slug:"old-computer-adventures/Headscale",categories:["\u73af\u5883\u7ba1\u7406","\u5bb6\u7528\u670d\u52a1\u5668\u6298\u817e\u8bb0"]},o=void 0,l={permalink:"/blog/old-computer-adventures/Headscale",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/01.\u5bb6\u7528\u670d\u52a1\u5668\u6298\u817e\u8bb0/10.\u5185\u7f51\u7a7f\u900f\u65b9\u6848-Headscale.md",source:"@site/blog/01.\u5bb6\u7528\u670d\u52a1\u5668\u6298\u817e\u8bb0/10.\u5185\u7f51\u7a7f\u900f\u65b9\u6848-Headscale.md",title:"0x10.\u5bb6\u5ead\u670d\u52a1\u5668\u6298\u817e\u8bb0|\u5185\u7f51\u7a7f\u900f\u65b9\u6848|Headscale",description:"\u4e0a\u6587\u5df2\u4ecb\u7ecd\u4e86zerotier\u662f\u5f02\u5730\u7ec4\u7f51\u5de5\u5177\uff0c\u4e0b\u9762\u518d\u4ecb\u7ecd\u4e00\u6b3e\u5f00\u6e90\u7684\u5185\u7f51\u7a7f\u900f\u5de5\u5177Headscale\uff0c\u5b83\u662f\u57fa\u4e8eTailscale\u7684\u5f00\u6e90\u7248\u672c\u3002",date:"2022-08-08T00:37:45.000Z",tags:[],readingTime:14.51,hasTruncateMarker:!0,authors:[],frontMatter:{title:"0x10.\u5bb6\u5ead\u670d\u52a1\u5668\u6298\u817e\u8bb0|\u5185\u7f51\u7a7f\u900f\u65b9\u6848|Headscale",date:"2022-08-08T00:37:45.000Z",slug:"old-computer-adventures/Headscale",categories:["\u73af\u5883\u7ba1\u7406","\u5bb6\u7528\u670d\u52a1\u5668\u6298\u817e\u8bb0"]},unlisted:!1,prevItem:{title:"0x5.\u5bb6\u5ead\u670d\u52a1\u5668\u6298\u817e\u8bb0|\u5185\u7f51\u7a7f\u900f\u65b9\u6848|ZerotierOne",permalink:"/blog/old-computer-adventures/zerotier-one"},nextItem:{title:"0x3.\u5bb6\u5ead\u670d\u52a1\u5668\u6298\u817e\u8bb0|\u64cd\u4f5c\u7cfb\u7edf|Ubuntu",permalink:"/blog/old-computer-adventures/ubuntu"}},r={authorsImageUrls:[]},d=[{value:"\u4ecb\u7ecd",id:"\u4ecb\u7ecd",level:2},{value:"\u670d\u52a1\u7aef\u90e8\u7f72",id:"\u670d\u52a1\u7aef\u90e8\u7f72",level:2},{value:"Headscale \u914d\u7f6e",id:"headscale-\u914d\u7f6e",level:3},{value:"Config\u914d\u7f6e",id:"config\u914d\u7f6e",level:3},{value:"Caddy\u90e8\u7f72",id:"caddy\u90e8\u7f72",level:3},{value:"Caddy Dockerfile",id:"caddy-dockerfile",level:3},{value:"Caddy\u914d\u7f6e",id:"caddy\u914d\u7f6e",level:3},{value:"\u5ba2\u6237\u7aef",id:"\u5ba2\u6237\u7aef",level:2},{value:"\u547d\u4ee4\u6c47\u603b",id:"\u547d\u4ee4\u6c47\u603b",level:3},{value:"\u53c2\u8003",id:"\u53c2\u8003",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"\u4e0a\u6587\u5df2\u4ecb\u7ecd\u4e86zerotier\u662f\u5f02\u5730\u7ec4\u7f51\u5de5\u5177\uff0c\u4e0b\u9762\u518d\u4ecb\u7ecd\u4e00\u6b3e\u5f00\u6e90\u7684\u5185\u7f51\u7a7f\u900f\u5de5\u5177Headscale\uff0c\u5b83\u662f\u57fa\u4e8eTailscale\u7684\u5f00\u6e90\u7248\u672c\u3002"}),"\n",(0,t.jsx)(n.h2,{id:"\u4ecb\u7ecd",children:"\u4ecb\u7ecd"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Tailscale \u662f\u4e00\u79cd\u57fa\u4e8e WireGuard \u7684\u865a\u62df\u7ec4\u7f51\u5de5\u5177\uff0c\u548c Netmaker \u7c7b\u4f3c\uff0c",(0,t.jsx)(n.strong,{children:"\u6700\u5927\u7684\u533a\u522b\u5728\u4e8e Tailscale \u662f\u5728\u7528\u6237\u6001\u5b9e\u73b0\u4e86 WireGuard \u534f\u8bae\uff0c\u800c Netmaker \u76f4\u63a5\u4f7f\u7528\u4e86\u5185\u6838\u6001\u7684 WireGuard"}),"\u3002\u6240\u4ee5 Tailscale \u76f8\u6bd4\u4e8e\u5185\u6838\u6001 WireGuard \u6027\u80fd\u4f1a\u6709\u6240\u635f\u5931\uff0c\u4f46\u4e0e OpenVPN \u4e4b\u6d41\u76f8\u6bd4\u8fd8\u662f\u80fd\u7529\u597d\u51e0\u5341\u6761\u8857\u7684\uff0cTailscale \u867d\u7136\u5728\u6027\u80fd\u4e0a\u505a\u4e86\u4e9b\u8bb8\u53d6\u820d\uff0c\u4f46\u5728\u529f\u80fd\u548c\u6613\u7528\u6027\u4e0a\u7edd\u5bf9\u662f\u5b8c\u7206\u5176\u4ed6\u5de5\u5177"]}),"\n",(0,t.jsxs)(n.p,{children:["--\u8be6\u89c1 ",(0,t.jsx)(n.a,{href:"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#macos",children:"Tailscale \u57fa\u7840\u6559\u7a0b\uff1aHeadscale \u7684\u90e8\u7f72\u65b9\u6cd5\u548c\u4f7f\u7528\u6559\u7a0b"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\u670d\u52a1\u7aef\u90e8\u7f72",children:"\u670d\u52a1\u7aef\u90e8\u7f72"}),"\n",(0,t.jsx)(n.h3,{id:"headscale-\u914d\u7f6e",children:"Headscale \u914d\u7f6e"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# docker network create [OPTIONS] NETWORK\n# docker network create --ipv6 caddy_net\nversion: \'3.5\'\nservices:\n  headscale:\n    image: headscale/headscale:latest\n    container_name: headscale\n    volumes:\n      - ./config:/etc/headscale\n      - ../../docker-data/headscale:/var/lib/headscale\n    cap_add:\n      - NET_ADMIN\n      - NET_RAW\n      - SYS_MODULE\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv6.conf.all.forwarding=1\n    # proxy by caddy\n    # ports:\n    #   - 3050:8080\n    networks:\n      - caddy_net\n    command: ["headscale", "serve"]\n    restart: unless-stopped\n    logging:\n      driver: json-file\n      options:\n        max-size: "50m"\n\n\n  headscale-ui:\n    image: ghcr.io/gurucomputing/headscale-ui:latest\n    container_name: headscale-ui\n    # proxy by caddy\n    # ports:\n    #   - 3100:80\n    networks:\n      - caddy_net\n    restart: unless-stopped\n    logging:\n      driver: json-file\n      options:\n        max-size: "50m"\n\nnetworks:\n  caddy_net:\n    name: caddy_net\n    external: true\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f51\u4e0a\u7ed9\u51fa\u4e86\u597d\u51e0\u79cd\u90e8\u7f72\u65b9\u5f0f\uff0c\u4e00\u822c\u5206\u4e3a\u5bb9\u5668\u5316\u90e8\u7f72\u548c\u975e\u5bb9\u5668\u5316\u90e8\u7f72\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u662f\u4f7f\u7528\u5bb9\u5668\u5316\u90e8\u7f72\uff0c\u9700\u8981\u5c06"}),"\n",(0,t.jsxs)(n.li,{children:["\u4e3a\u4ec0\u4e48\u6ce8\u91ca\u6389\u7aef\u53e3\u6620\u5c04\uff1f\u5efa\u8bae\u521a\u5f00\u59cb\u90e8\u7f72\u670d\u52a1\u7684\u540c\u5b66\u6253\u5f00\u7aef\u53e3\u6620\u5c04\uff0c\u8fd9\u6837\u65b9\u4fbf\u5728\u5bb9\u5668\u5916\u8c03\u8bd5\u3002\u6211\u5173\u95ed\u662f\u56e0\u4e3a\u60f3\u8981\u901a\u8fc7Caddy\u6765\u4ee3\u7406\u3002\uff08\u8bdd\u8bf4\u6211\u4e5f\u662f\u4ece\u8fd9\u4e2a\u670d\u52a1\u91cc\u4e86\u89e3Caddy\u7684\uff09\u3002\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Caddy \u662fWeb\u670d\u52a1\u5668\uff0c\u662fNginx\u7684\u66ff\u4ee3\u54c1\uff0c\u914d\u7f6e\u4e0a\u6bd4Nginx\u7b80\u5355\u5f88\u591a\u3002\u7279\u70b9\u662f\u81ea\u52a8\u5e2e\u52a9\u7533\u8bf7Https\uff0c\u7701\u53bb\u4e86\u81ea\u5df1\u914d\u7f6e\u8bc1\u4e66\u7684\u9ebb\u70e6\u3002\u4e0e\u4e4b\u76f8\u7c7b\u4f3c\u7684\u670d\u52a1\u6709",(0,t.jsx)(n.a,{href:"https://github.com/NginxProxyManager/nginx-proxy-manager",children:"NginxProxyManager"}),"\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:["\u65b0\u5efa\u4e86\u4e00\u4e2a\u5bb9\u5668\u7f51\u7edc ",(0,t.jsx)(n.code,{children:"caddy_net"}),"\uff0c\u6240\u6709\u670d\u52a1\u4e0e",(0,t.jsx)(n.code,{children:"caddy_net"}),"\u8054\u901a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u7aef\u53e3\u4e0d\u66b4\u9732\u51fa\u53bb\uff0c\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u7ecf\u8fc7Caddy\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"headscale-ui\nheadscale-ui \u662f\u4e00\u6b3e\u5f00\u6e90\u7684Headscale\u56fe\u5f62\u5316\u914d\u7f6e\u9875\u9762\uff0c\u7528\u4ee5\u6dfb\u52a0\u5ba2\u6237\u7aef\u8bbe\u5907\u3002\u8fd9\u91cc\u5751\u7684\u5730\u65b9\u5728\u4e8eheadscale-ui\u662f\u6709\u8de8\u57df\u9650\u5236\u3002\u4e3e\u4f8bHeadscale\u90e8\u7f72\u5728 abc.com\u4e0a\uff0cHeadscale-ui \u5fc5\u987b\u90e8\u7f72\u5728 abc.com/web \u4e0a\uff0c\u4e0d\u7136\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\u3002"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"config\u914d\u7f6e",children:"Config\u914d\u7f6e"}),"\n",(0,t.jsxs)(n.p,{children:["\u5982\u4e0b\u6587\u4ef6\u7ea6\u5b9a\u4e86Headscale\u7684\u57fa\u7840\u914d\u7f6e\uff0c\u5bb9\u5668\u4e2d\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u5fc5\u987b\u5c06 ",(0,t.jsx)(n.code,{children:"127.0.0.1"})," \u6539\u4e3a ",(0,t.jsx)(n.code,{children:"0.0.0.0"})," \u8fd9\u6837\u4fdd\u8bc1\u4e86\u5916\u90e8\u7f51\u7edc\u7684\u8bf7\u6c42\u80fd\u88ab\u5904\u7406\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# reference: https://github.com/juanfont/headscale/raw/main/config-example.yaml\n---\n# headscale will look for a configuration file named `config.yaml` (or `config.json`) in the following order:\n#\n# - `/etc/headscale`\n# - `~/.headscale`\n# - current working directory\n\n# The url clients will connect to.\n# Typically this will be a domain like:\n#\n# https://myheadscale.example.com:443\n#\n# \u5ba2\u6237\u7aef\u771f\u5b9e\u8bf7\u6c42\u7684\u5730\u5740\uff0c\u53cd\u5411\u4ee3\u7406\u540e\u7684\u5730\u5740\n# \u516c\u7f51IP\uff0c\u6216\u662f\u57df\u540d\uff0c\u662f\u6240\u6709\u8bbe\u5907\u9700\u8981\u80fd\u8bbf\u95ee\u5230\u7684\u5730\u5740\u3002\nserver_url: https://xxx.com/\n\n# Address to listen to / bind to on the server\n#\n# For local:\n# listen_addr: 127.0.0.1:8080\n# For production:\n# Listen to 0.0.0.0 so it\'s accessible outside the container\nlisten_addr: 0.0.0.0:8080\n\n# Address to listen to /metrics, you may want\n# to keep this endpoint private to your internal\n# network\n# For local:\n# metrics_listen_addr: 127.0.0.1:9090\n# set to 0.0.0\n# Listen to 0.0.0.0 so it\'s accessible outside the container\nmetrics_listen_addr: 0.0.0.0:9090\n\n# Address to listen for gRPC.\n# gRPC is used for controlling a headscale server\n# remotely with the CLI\n# Note: Remote access _only_ works if you have\n# valid certificates.\n#\n# For production:\n# grpc_listen_addr: 0.0.0.0:50443\ngrpc_listen_addr: 127.0.0.1:50443\n\n# Allow the gRPC admin interface to run in INSECURE\n# mode. This is not recommended as the traffic will\n# be unencrypted. Only enable if you know what you\n# are doing.\ngrpc_allow_insecure: false\n\n# Private key used to encrypt the traffic between headscale\n# and Tailscale clients.\n# The private key file will be autogenerated if it\'s missing.\n#\n# For production:\n# /var/lib/headscale/private.key\n# For test:\n# ./private.key\nprivate_key_path: /var/lib/headscale/private.key\n\n# The Noise section includes specific configuration for the\n# TS2021 Noise protocol\nnoise:\n  # The Noise private key is used to encrypt the\n  # traffic between headscale and Tailscale clients when\n  # using the new Noise-based protocol. It must be different\n  # from the legacy private key.\n  #\n  # For production:\n  # private_key_path: /var/lib/headscale/noise_private.key\n  # For test:\n  # ./noise_private.key\n  private_key_path: /var/lib/headscale/noise_private.key\n\n# List of IP prefixes to allocate tailaddresses from.\n# Each prefix consists of either an IPv4 or IPv6 address,\n# and the associated prefix length, delimited by a slash.\n# While this looks like it can take arbitrary values, it\n# needs to be within IP ranges supported by the Tailscale\n# client.\n# IPv6: https://github.com/tailscale/tailscale/blob/22ebb25e833264f58d7c3f534a8b166894a89536/net/tsaddr/tsaddr.go#LL81C52-L81C71\n# IPv4: https://github.com/tailscale/tailscale/blob/22ebb25e833264f58d7c3f534a8b166894a89536/net/tsaddr/tsaddr.go#L33\nip_prefixes:\n  - fd7a:115c:a1e0::/48\n  - 100.64.0.0/10\n\n# DERP is a relay system that Tailscale uses when a direct\n# connection cannot be established.\n# https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp\n#\n# headscale needs a list of DERP servers that can be presented\n# to the clients.\nderp:\n  server:\n    # If enabled, runs the embedded DERP server and merges it into the rest of the DERP config\n    # The Headscale server_url defined above MUST be using https, DERP requires TLS to be in place\n    enabled: false\n\n    # Region ID to use for the embedded DERP server.\n    # The local DERP prevails if the region ID collides with other region ID coming from\n    # the regular DERP config.\n    region_id: 999\n\n    # Region code and name are displayed in the Tailscale UI to identify a DERP region\n    region_code: "headscale"\n    region_name: "Headscale Embedded DERP"\n\n    # Listens over UDP at the configured address for STUN connections - to help with NAT traversal.\n    # When the embedded DERP server is enabled stun_listen_addr MUST be defined.\n    #\n    # For more details on how this works, check this great article: https://tailscale.com/blog/how-tailscale-works/\n    stun_listen_addr: "0.0.0.0:3478"\n\n  # List of externally available DERP maps encoded in JSON\n  urls:\n    - https://controlplane.tailscale.com/derpmap/default\n\n  # Locally available DERP map files encoded in YAML\n  #\n  # This option is mostly interesting for people hosting\n  # their own DERP servers:\n  # https://tailscale.com/kb/1118/custom-derp-servers/\n  #\n  # paths:\n  #   - /etc/headscale/derp-example.yaml\n  paths: []\n\n  # If enabled, a worker will be set up to periodically\n  # refresh the given sources and update the derpmap\n  # will be set up.\n  auto_update_enabled: true\n\n  # How often should we check for DERP updates?\n  update_frequency: 24h\n\n# Disables the automatic check for headscale updates on startup\ndisable_check_updates: false\n\n# Time before an inactive ephemeral node is deleted?\nephemeral_node_inactivity_timeout: 30m\n\n# Period to check for node updates within the tailnet. A value too low will severely affect\n# CPU consumption of Headscale. A value too high (over 60s) will cause problems\n# for the nodes, as they won\'t get updates or keep alive messages frequently enough.\n# In case of doubts, do not touch the default 10s.\nnode_update_check_interval: 10s\n\n# SQLite config\ndb_type: sqlite3\n\n# For production:\n# db_path: /var/lib/headscale/db.sqlite\ndb_path: ./db.sqlite\n\n# # Postgres config\n# If using a Unix socket to connect to Postgres, set the socket path in the \'host\' field and leave \'port\' blank.\n# db_type: postgres\n# db_host: localhost\n# db_port: 5432\n# db_name: headscale\n# db_user: foo\n# db_pass: bar\n\n# If other \'sslmode\' is required instead of \'require(true)\' and \'disabled(false)\', set the \'sslmode\' you need\n# in the \'db_ssl\' field. Refers to https://www.postgresql.org/docs/current/libpq-ssl.html Table 34.1.\n# db_ssl: false\n\n### TLS configuration\n#\n## Let\'s encrypt / ACME\n#\n# headscale supports automatically requesting and setting up\n# TLS for a domain with Let\'s Encrypt.\n#\n# URL to ACME directory\nacme_url: https://acme-v02.api.letsencrypt.org/directory\n\n# Email to register with ACME provider\nacme_email: ""\n\n# Domain name to request a TLS certificate for:\ntls_letsencrypt_hostname: ""\n\n# Path to store certificates and metadata needed by\n# letsencrypt\n# For production:\n# tls_letsencrypt_cache_dir: /var/lib/headscale/cache\n# For test:\n# ./cache\ntls_letsencrypt_cache_dir: /var/lib/headscale/cache\n\n# Type of ACME challenge to use, currently supported types:\n# HTTP-01 or TLS-ALPN-01\n# See [docs/tls.md](docs/tls.md) for more information\ntls_letsencrypt_challenge_type: HTTP-01\n# When HTTP-01 challenge is chosen, letsencrypt must set up a\n# verification endpoint, and it will be listening on:\n# :http = port 80\ntls_letsencrypt_listen: ":http"\n\n## Use already defined certificates:\ntls_cert_path: ""\ntls_key_path: ""\n\nlog:\n  # Output formatting for logs: text or json\n  format: text\n  level: info\n\n# Path to a file containg ACL policies.\n# ACLs can be defined as YAML or HUJSON.\n# https://tailscale.com/kb/1018/acls/\nacl_policy_path: ""\n\n## DNS\n#\n# headscale supports Tailscale\'s DNS configuration and MagicDNS.\n# Please have a look to their KB to better understand the concepts:\n#\n# - https://tailscale.com/kb/1054/dns/\n# - https://tailscale.com/kb/1081/magicdns/\n# - https://tailscale.com/blog/2021-09-private-dns-with-magicdns/\n#\ndns_config:\n  # Whether to prefer using Headscale provided DNS or use local.\n  override_local_dns: true\n\n  # List of DNS servers to expose to clients.\n  nameservers:\n    - 1.1.1.1\n\n  # NextDNS (see https://tailscale.com/kb/1218/nextdns/).\n  # "abc123" is example NextDNS ID, replace with yours.\n  #\n  # With metadata sharing:\n  # nameservers:\n  #   - https://dns.nextdns.io/abc123\n  #\n  # Without metadata sharing:\n  # nameservers:\n  #   - 2a07:a8c0::ab:c123\n  #   - 2a07:a8c1::ab:c123\n\n  # Split DNS (see https://tailscale.com/kb/1054/dns/),\n  # list of search domains and the DNS to query for each one.\n  #\n  # restricted_nameservers:\n  #   foo.bar.com:\n  #     - 1.1.1.1\n  #   darp.headscale.net:\n  #     - 1.1.1.1\n  #     - 8.8.8.8\n\n  # Search domains to inject.\n  domains: []\n\n  # Extra DNS records\n  # so far only A-records are supported (on the tailscale side)\n  # See https://github.com/juanfont/headscale/blob/main/docs/dns-records.md#Limitations\n  # extra_records:\n  #   - name: "grafana.myvpn.example.com"\n  #     type: "A"\n  #     value: "100.64.0.3"\n  #\n  #   # you can also put it in one line\n  #   - { name: "prometheus.myvpn.example.com", type: "A", value: "100.64.0.3" }\n\n  # Whether to use [MagicDNS](https://tailscale.com/kb/1081/magicdns/).\n  # Only works if there is at least a nameserver defined.\n  # \u4f46\u662fTailscale\u6709\u4e00\u4e2a\u5f88\u574f\u7684\u7f3a\u70b9\uff0c\u5c31\u662f\u5b83\u4e0d\u80fd\u81ea\u5b9a\u4e49\u8282\u70b9\u7684IP\uff0c\u63a7\u5236\u5668\u7ed9\u5206\u914d\u4ec0\u4e48\u5c31\u53ea\u80fd\u662f\u4ec0\u4e48\n  # \u6240\u4ee5\u4f60\u80af\u5b9a\u4f1a\u9700\u8981Magic DNS\u6765\u5e2e\u4f60\u8fa8\u8bc6\u8282\u70b9\u7684\uff01\n  magic_dns: true\n\n  # Defines the base domain to create the hostnames for MagicDNS.\n  # `base_domain` must be a FQDNs, without the trailing dot.\n  # The FQDN of the hosts will be\n  # `hostname.user.base_domain` (e.g., _myhost.myuser.example.com_).\n  # \u663e\u793a\u5728Magic DNS\u91cc\u7684\u8bbe\u5907\u57df\u540d\uff0c\u968f\u4fbf\u5199\u5199\n  base_domain: example.com\n\n# Unix socket used for the CLI to connect without authentication\n# Note: for production you will want to set this to something like:\n# For production\n# unix_socket: /var/run/headscale.sock\n# For test\n# unix_socket: ./headscale.sock\nunix_socket: /var/run/headscale.sock\nunix_socket_permission: "0770"\n#\n# headscale supports experimental OpenID connect support,\n# it is still being tested and might have some bugs, please\n# help us test it.\n# OpenID Connect\n# oidc:\n#   only_start_if_oidc_is_available: true\n#   issuer: "https://your-oidc.issuer.com/path"\n#   client_id: "your-oidc-client-id"\n#   client_secret: "your-oidc-client-secret"\n#   # Alternatively, set `client_secret_path` to read the secret from the file.\n#   # It resolves environment variables, making integration to systemd\'s\n#   # `LoadCredential` straightforward:\n#   client_secret_path: "${CREDENTIALS_DIRECTORY}/oidc_client_secret"\n#   # client_secret and client_secret_path are mutually exclusive.\n#\n#   # The amount of time from a node is authenticated with OpenID until it\n#   # expires and needs to reauthenticate.\n#   # Setting the value to "0" will mean no expiry.\n#   expiry: 180d\n#\n#   # Use the expiry from the token received from OpenID when the user logged\n#   # in, this will typically lead to frequent need to reauthenticate and should\n#   # only been enabled if you know what you are doing.\n#   # Note: enabling this will cause `oidc.expiry` to be ignored.\n#   use_expiry_from_token: false\n#\n#   # Customize the scopes used in the OIDC flow, defaults to "openid", "profile" and "email" and add custom query\n#   # parameters to the Authorize Endpoint request. Scopes default to "openid", "profile" and "email".\n#\n#   scope: ["openid", "profile", "email", "custom"]\n#   extra_params:\n#     domain_hint: example.com\n#\n#   # List allowed principal domains and/or users. If an authenticated user\'s domain is not in this list, the\n#   # authentication request will be rejected.\n#\n#   allowed_domains:\n#     - example.com\n#   # Note: Groups from keycloak have a leading \'/\'\n#   allowed_groups:\n#     - /headscale\n#   allowed_users:\n#     - alice@example.com\n#\n#   # If `strip_email_domain` is set to `true`, the domain part of the username email address will be removed.\n#   # This will transform `first-name.last-name@example.com` to the user `first-name.last-name`\n#   # If `strip_email_domain` is set to `false` the domain part will NOT be removed resulting to the following\n#   user: `first-name.last-name.example.com`\n#\n#   strip_email_domain: true\n\n# Logtail configuration\n# Logtail is Tailscales logging and auditing infrastructure, it allows the control panel\n# to instruct tailscale nodes to log their activity to a remote server.\nlogtail:\n  # Enable logtail for this headscales clients.\n  # As there is currently no support for overriding the log server in headscale, this is\n  # disabled by default. Enabling this will make your clients send logs to Tailscale Inc.\n  enabled: false\n\n# Enabling this option makes devices prefer a random port for WireGuard traffic over the\n# default static port 41641. This option is intended as a workaround for some buggy\n# firewall devices. See https://tailscale.com/kb/1181/firewalls/ for more information.\nrandomize_client_port: false\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"caddy\u90e8\u7f72",children:"Caddy\u90e8\u7f72"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# docker network create [OPTIONS] NETWORK\n# docker network create --ipv6 caddy_net\nversion: '3.5'\nservices:\n  caddy:\n    # build image to add new module\n    # image: caddy:latest\n    build: \n      context: .\n      dockerfile: Dockerfile\n    container_name: caddy\n    networks:\n      - caddy_net\n    volumes:\n      - ../../docker-data/caddy:/data\n      - ./config:/config\n      - /etc/localtime:/etc/localtime:ro \n    ports:\n      - 80:80\n      - 443:443\n    env_file:\n      - ./dnspod.env\n    entrypoint: /usr/bin/caddy run --adapter caddyfile --config /config/Caddyfile\n\nnetworks:\n  caddy_net:\n    name: caddy_net\n    external: true\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u7531\u4e8e\u6211\u9700\u8981\u63a5\u5165 ",(0,t.jsx)(n.code,{children:"\u6cdb\u57df\u540d"}),"\uff0c\u6240\u4ee5\u8fd9\u91cc\u81ea\u5df1build\u4e86\u4e00\u4e2a\u955c\u50cf\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u9700\u8981\uff0c\u5219\u76f4\u63a5\u62c9\u53d6\u6700\u65b0\u7684 ",(0,t.jsx)(n.code,{children:"caddy:latest"}),"\u5373\u53ef"]}),"\n",(0,t.jsx)(n.h3,{id:"caddy-dockerfile",children:"Caddy Dockerfile"}),"\n",(0,t.jsxs)(n.p,{children:["Caddy \u662f\u7528Go\u5199\u7684\uff0c\u82e5\u662f\u9700\u8981\u6dfb\u52a0\u65b0\u529f\u80fd\u5fc5\u987b\u5f97\u91cd\u65b0\u7f16\u8bd1\u3002\u5982\u4e0bDockerfile \u6dfb\u52a0\u4e86",(0,t.jsx)(n.code,{children:"cloudflare"}),"\u6a21\u5757\uff0c\u8ba9Caddy\u652f\u6301",(0,t.jsx)(n.code,{children:"\u6cdb\u57df\u540d"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Reference: https://hub.docker.com/_/caddy #Adding custom Caddy modules\nFROM caddy:2.6.4-builder AS builder\n\n# package can be found in https://caddyserver.com/download\nRUN xcaddy build \\\n    --with github.com/caddy-dns/cloudflare\n\nFROM caddy:latest\n\nCOPY --from=builder /usr/bin/caddy /usr/bin/caddy\n"})}),"\n",(0,t.jsx)(n.h3,{id:"caddy\u914d\u7f6e",children:"Caddy\u914d\u7f6e"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# all supported dns: https://caddyserver.com/docs/modules/\n*.abc.top {\n    tls {\n        dns cloudflare {env.CF_API_TOKEN}\n    }\n}\n\n# how to config wildcard-certificate https://caddyserver.com/docs/caddyfile/patterns#wildcard-certificates\nheadscale.abc.top {\n    # headscale \u670d\u52a1\u5730\u5740\n    reverse_proxy http://headscale:8080\n\n    # headscale-ui \u5730\u5740\uff0c\u5fc5\u987b\u4e0e\u4e0a\u9762\u7684\u57df\u540d\u4e00\u81f4\uff0c\u4e3a\u4e86\u9632\u6b62CORS\u9519\u8bef\n    handle /web* {\n        reverse_proxy http://headscale-ui\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u5ba2\u6237\u7aef",children:"\u5ba2\u6237\u7aef"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#tailscale-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5",children:"Tailscale-\u5ba2\u6237\u7aef\u63a5\u5165"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"\u547d\u4ee4\u6c47\u603b",children:"\u547d\u4ee4\u6c47\u603b"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# \u521b\u5efa\u7528\u6237\ndocker-compose -f headscale.yaml exec headscale \\\n  headscale users create ppsteven\n# \u6ce8\u518c\u8282\u70b9\uff08\u4e5f\u53ef\u4ee5\u901a\u8fc7\u56fe\u5f62\u5316\u9875\u9762\u914d\u7f6e\uff09\ndocker-compose -f headscale.yaml exec headscale \\\n  headscale nodes register --user jacky --key nodekey:xxxxxx\n# \u67e5\u770b\u8282\u70b9\u8fde\u63a5\u72b6\u6001\uff08\u83b7\u53d6\u5185\u7f51ip\uff0c\u662f\u5426\u5728\u7ebf\u7b49\uff09\ndocker-compose -f headscale.yaml exec headscale \\\n  headscale nodes list\n# linux \u547d\u4ee4\u884c\u8fde\u63a5\uff08\u7528\u4ee5\u83b7\u53d6\u8bbe\u5907\u7684\u767b\u5f55\u8bc6\u522b\u7801 nodekey:xxxxx\uff0c\u62ff\u8fd9\u4e2a\u7801\u5c31\u53ef\u4ee5\u53bb\u670d\u52a1\u7aef\u8fde\u63a5\u4e86\uff09\ntailscale up --login-server=http://abc.com/ --accept-routes=true --accept-dns=false\n# \u67e5\u770b\u4f60\u7684IP\u5730\u5740\u4e0e\u5230\u5404\u5927\u516c\u5171DERP\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u5ef6\u8fdf\ntailscale netcheck\n# \u67e5\u770b\u5404\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u72b6\u6001\uff0c\u662f\u76f4\u8fde\u8fd8\u662f\u4e2d\u7ee7\u4e00\u76ee\u4e86\u7136\ntailscale status\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u53c2\u8003",children:"\u53c2\u8003"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://maxng.cc/posts/headscale-ez-tutorial/",children:"\u642d\u5efa\u5c5e\u4e8e\u81ea\u5df1\u7684Tailscale\u7f51\u7edc"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/#tailscale-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5",children:"Tailscale \u57fa\u7840\u6559\u7a0b\uff1aHeadscale \u7684\u90e8\u7f72\u65b9\u6cd5\u548c\u4f7f\u7528\u6559\u7a0b"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://mritd.com/2022/10/19/use-headscale-to-build-a-p2p-network/#3-3%E3%80%81%E8%AF%81%E4%B9%A6%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86",children:"Headscale \u642d\u5efa P2P \u5185\u7f51\u7a7f\u900f_"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/juanfont/headscale/blob/main/docs/reverse-proxy.md#caddy",children:"\u3010\u5b98\u65b9\u3011Headscale\u914d\u7f6e\u53cd\u5411\u4ee3\u7406"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>l});var t=a(96540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);