"use strict";(self.webpackChunkcodepainter=self.webpackChunkcodepainter||[]).push([[6380],{62911:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var s=t(74848),i=t(28453);const r={title:"Go\u8bed\u6cd5-\u7c7b\u578b\u5224\u65ad",date:new Date("2021-06-16T23:56:21.000Z"),slug:"/pages/5d6302/",categories:["\u540e\u7aef","Go"]},o=void 0,c={id:"\u6280\u672f\u7b14\u8bb0/\u540e\u7aef/Go/Go\u8bed\u6cd5-\u7c7b\u578b\u5224\u65ad",title:"Go\u8bed\u6cd5-\u7c7b\u578b\u5224\u65ad",description:"Type Switch",source:"@site/docs/01.\u6280\u672f\u7b14\u8bb0/02.\u540e\u7aef/02.Go/01.Go\u8bed\u6cd5-\u7c7b\u578b\u5224\u65ad.md",sourceDirName:"01.\u6280\u672f\u7b14\u8bb0/02.\u540e\u7aef/02.Go",slug:"/pages/5d6302/",permalink:"/docs/pages/5d6302/",draft:!1,unlisted:!1,editUrl:"https://github.com/PPsteven/CodePainter/tree/master/docs/01.\u6280\u672f\u7b14\u8bb0/02.\u540e\u7aef/02.Go/01.Go\u8bed\u6cd5-\u7c7b\u578b\u5224\u65ad.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Go\u8bed\u6cd5-\u7c7b\u578b\u5224\u65ad",date:"2021-06-16T23:56:21.000Z",slug:"/pages/5d6302/",categories:["\u540e\u7aef","Go"]},sidebar:"techwiki",previous:{title:"\u540e\u7aef",permalink:"/docs/category/\u540e\u7aef"},next:{title:"\u5982\u4f55\u5199Go\u5355\u5143\u6d4b\u8bd5",permalink:"/docs/pages/48be02/"}},a={},l=[{value:"Type Switch",id:"type-switch",level:2},{value:"Type Assertion",id:"type-assertion",level:2},{value:"\u6848\u4f8b",id:"\u6848\u4f8b",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"type-switch",children:"Type Switch"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://golang.org/doc/effective_go#type_switch",children:"https://golang.org/doc/effective_go#type_switch"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'var t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\ndefault:\n    fmt.Printf("unexpected type %T\\n", t)     // %T prints whatever type t has\ncase bool:\n    fmt.Printf("boolean %t\\n", t)             // t has type bool\ncase int:\n    fmt.Printf("integer %d\\n", t)             // t has type int\ncase *bool:\n    fmt.Printf("pointer to boolean %t\\n", *t) // t has type *bool\ncase *int:\n    fmt.Printf("pointer to integer %d\\n", *t) // t has type *int\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"type-assertion",children:"Type Assertion"}),"\n",(0,s.jsxs)(n.p,{children:["Type Switch \u4f7f\u7528\u4e86 ",(0,s.jsx)(n.code,{children:"type"})," \u6807\u8bc6\u7b26\uff0c\u5982\u679c\u6211\u4eec\u53ea\u5173\u5fc3\u4e00\u79cd\u7c7b\u578b\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528\u786e\u5b9a \u7684 ",(0,s.jsx)(n.code,{children:"type"})," \u7c7b\u578b\u6765\u66ff\u4ee3 ",(0,s.jsx)(n.code,{children:"type"})," \u6807\u8bc6\u7b26\uff0c\u5982 ",(0,s.jsx)(n.code,{children:"value.(typeName)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c ",(0,s.jsx)(n.code,{children:"interface{}"})," \u4e2d\u4e0d\u5305\u542b\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"typeName"})," \u5c31\u4f1a\u62a5\u9519\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u7b80\u5355\u4f8b\u5b50"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'var i interface{}\ni = int(42)\n\na, ok := i.(int)\n// a == 42 and ok == true\n\nb, ok := i.(string)\n// b == "" (default value) and ok == false\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u590d\u6742\u4f8b\u5b50"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"type Stringer interface {\n    String() string\n}\n\nif str, ok := value.(string); ok {\n\t  return str\n} else if str, ok := value.(Stringer); ok {\n    return str.String()\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u6848\u4f8b",children:"\u6848\u4f8b"}),"\n",(0,s.jsx)(n.p,{children:"\u7531\u4e8e\u5386\u53f2\u539f\u56e0\u6216\u4ee3\u7801\u5bf9\u63a5\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u505a\u5230\u7edf\u4e00\u6570\u636e\u7c7b\u578b"}),"\n",(0,s.jsx)(n.p,{children:"\u5982\u51fa\u73b0\u4e0b\u9762\u4e24\u79cd\u7c7b\u578b"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"type Message struct {\n   Name string\n   Time string\n}\ntype Message struct {\n   Name string\n   Time float64\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5904\u7406\u7684\u65b9\u5f0f\u5c31\u662f\u7ed3\u5408\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"interface{}"})," \u548c ",(0,s.jsx)(n.code,{children:"type switch"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type Message struct {\n   Name string\n   Time interface{}\n}\n\nb := []byte(`{"Name":"Wednesday","Time":6}`)\n\nvar f Message\njson.Unmarshal(b, &f)\n\nswitch v := f.Time.(type) {\ncase float64:\n   fmt.Printf("Name: %v; Time: %v\\n", f.Name, v)\n   fmt.Printf("Time type %T!\\n", v)\ncase string:\n   fmt.Printf("Name: %v; Time: %v\\n", f.Name, v)\n   fmt.Printf("Time type %T!\\n", v)\ndefault:\n   fmt.Printf("I don\'t know about type %T!\\n", v)\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u53c2\u8003\uff1a",(0,s.jsx)(n.a,{href:"https://medium.com/@kevinbai/golang-type-switches-df2afacc903e",children:"Golang Type switches"})]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);